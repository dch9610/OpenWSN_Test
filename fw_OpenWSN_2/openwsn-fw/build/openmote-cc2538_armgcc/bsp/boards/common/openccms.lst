   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"openccms.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.rodata
  16              		.align	2
  19              	rreg_uriquery:
  20 0000 683D7563 		.ascii	"h=ucb\000"
  20      6200
  21 0006 0000     		.align	2
  24              	infoBoardname:
  25 0008 43433235 		.ascii	"CC2538\000"
  25      333800
  26 000f 00       		.align	2
  29              	infouCName:
  30 0010 43433235 		.ascii	"CC2538\000"
  30      333800
  31 0017 00       		.align	2
  34              	infoRadioName:
  35 0018 43433235 		.ascii	"CC2538 SoC\000"
  35      33382053 
  35      6F4300
  36 0023 00       		.align	2
  39              	infoStackName:
  40 0024 4F70656E 		.ascii	"OpenWSN \000"
  40      57534E20 
  40      00
  41              		.text
  42              		.align	1
  43              		.global	openccms_enc
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  47              		.fpu softvfp
  49              	openccms_enc:
  50              	.LFB0:
  51              		.file 1 "build\\openmote-cc2538_armgcc\\bsp\\boards\\common\\openccms.c"
   1:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** /**
   2:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \brief AES CCMS implementation
   3:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****   
   4:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \author Marcelo Barros de Almeida <marcelobarrosalmeida@gmail.com>, March 2015.
   5:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \author Malisa Vucinic <malishav@gmail.com>, June 2017.
   6:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** */
   7:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** #include <string.h>
   8:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** #include <stdint.h>
   9:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** #include "opendefs.h"
  10:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** #include "openccms.h"
  11:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** #include "openaes.h"
  12:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** #include "cryptoengine.h"
  13:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  14:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** //=========================== defines =========================================
  15:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  16:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  17:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** //=========================== prototypes ======================================
  18:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  19:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** static owerror_t aes_cbc_mac(uint8_t* a, uint8_t len_a, uint8_t* m, uint8_t len_m, uint8_t* nonce, 
  20:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** static owerror_t aes_ctr_enc(uint8_t* m, uint8_t len_m, uint8_t* nonce, uint8_t key[16], uint8_t* m
  21:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** owerror_t aes_cbc_enc_raw(uint8_t* buffer, uint8_t len, uint8_t key[16], uint8_t iv[16]); 
  22:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** owerror_t aes_ctr_enc_raw(uint8_t* buffer, uint8_t len, uint8_t key[16], uint8_t iv[16]);
  23:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** static void inc_counter(uint8_t* counter); 
  24:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  25:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** //=========================== public ==========================================
  26:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  27:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** /**
  28:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \brief CCM* forward transformation (i.e. encryption + authentication) implemented in software. Invo
  29:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] a Pointer to the authentication only data.
  30:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] len_a Length of authentication only data.
  31:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in,out] m Pointer to the data that is both authenticated and encrypted. Overwritten by
  32:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    ciphertext and the trailing authentication tag. Buffer must hold len_m + CBC_MAC_SIZE.
  33:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in,out] len_m Length of data that is both authenticated and encrypted. Accounts for
  34:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    the added authentication tag of len_mac octets on return.
  35:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] nonce Buffer containing nonce (13 octets).
  36:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] l CCM parameter L that allows selection of different nonce length. This implementation
  37:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    supports l = 2 (i.e. 13 octet long nonce) only.
  38:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] key Buffer containing the secret key (16 octets).
  39:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] len_mac Length of the authentication tag.
  40:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  41:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \returns E_SUCCESS when the generation was successful, E_FAIL otherwise. 
  42:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** */
  43:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** owerror_t openccms_enc(uint8_t* a,
  44:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t len_a,
  45:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t* m,
  46:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t* len_m,
  47:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t* nonce,
  48:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t l,
  49:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t key[16],
  50:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t len_mac) {
  52              		.loc 1 50 0
  53              		.cfi_startproc
  54              		@ args = 16, pretend = 0, frame = 32
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56 0000 80B5     		push	{r7, lr}
  57              		.cfi_def_cfa_offset 8
  58              		.cfi_offset 7, -8
  59              		.cfi_offset 14, -4
  60 0002 8EB0     		sub	sp, sp, #56
  61              		.cfi_def_cfa_offset 64
  62 0004 06AF     		add	r7, sp, #24
  63              		.cfi_def_cfa 7, 40
  64 0006 F860     		str	r0, [r7, #12]
  65 0008 7A60     		str	r2, [r7, #4]
  66 000a 3B60     		str	r3, [r7]
  67 000c 0B46     		mov	r3, r1
  68 000e FB72     		strb	r3, [r7, #11]
  51:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  52:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t mac[CBC_MAX_MAC_SIZE];
  53:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  54:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    if ((len_mac > CBC_MAX_MAC_SIZE) || (l != 2)) {
  69              		.loc 1 54 0
  70 0010 97F83430 		ldrb	r3, [r7, #52]	@ zero_extendqisi2
  71 0014 102B     		cmp	r3, #16
  72 0016 03D8     		bhi	.L2
  73              		.loc 1 54 0 is_stmt 0 discriminator 1
  74 0018 97F82C30 		ldrb	r3, [r7, #44]	@ zero_extendqisi2
  75 001c 022B     		cmp	r3, #2
  76 001e 01D0     		beq	.L3
  77              	.L2:
  55:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       return E_FAIL;
  78              		.loc 1 55 0 is_stmt 1
  79 0020 0123     		movs	r3, #1
  80 0022 41E0     		b	.L6
  81              	.L3:
  56:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    }
  57:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  58:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    if (aes_cbc_mac(a, len_a, m, *len_m, nonce, key, mac, len_mac, l) == E_SUCCESS) {
  82              		.loc 1 58 0
  83 0024 3B68     		ldr	r3, [r7]
  84 0026 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  85 0028 F97A     		ldrb	r1, [r7, #11]	@ zero_extendqisi2
  86 002a 97F82C30 		ldrb	r3, [r7, #44]	@ zero_extendqisi2
  87 002e 0493     		str	r3, [sp, #16]
  88 0030 97F83430 		ldrb	r3, [r7, #52]	@ zero_extendqisi2
  89 0034 0393     		str	r3, [sp, #12]
  90 0036 07F11003 		add	r3, r7, #16
  91 003a 0293     		str	r3, [sp, #8]
  92 003c 3B6B     		ldr	r3, [r7, #48]
  93 003e 0193     		str	r3, [sp, #4]
  94 0040 BB6A     		ldr	r3, [r7, #40]
  95 0042 0093     		str	r3, [sp]
  96 0044 1346     		mov	r3, r2
  97 0046 7A68     		ldr	r2, [r7, #4]
  98 0048 F868     		ldr	r0, [r7, #12]
  99 004a 00F095F8 		bl	aes_cbc_mac
 100 004e 0346     		mov	r3, r0
 101 0050 002B     		cmp	r3, #0
 102 0052 28D1     		bne	.L5
  59:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       if (aes_ctr_enc(m, *len_m, nonce, key, mac, len_mac, l) == E_SUCCESS) {
 103              		.loc 1 59 0
 104 0054 3B68     		ldr	r3, [r7]
 105 0056 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 106 0058 97F82C30 		ldrb	r3, [r7, #44]	@ zero_extendqisi2
 107 005c 0293     		str	r3, [sp, #8]
 108 005e 97F83430 		ldrb	r3, [r7, #52]	@ zero_extendqisi2
 109 0062 0193     		str	r3, [sp, #4]
 110 0064 07F11003 		add	r3, r7, #16
 111 0068 0093     		str	r3, [sp]
 112 006a 3B6B     		ldr	r3, [r7, #48]
 113 006c BA6A     		ldr	r2, [r7, #40]
 114 006e 7868     		ldr	r0, [r7, #4]
 115 0070 00F0A5F9 		bl	aes_ctr_enc
 116 0074 0346     		mov	r3, r0
 117 0076 002B     		cmp	r3, #0
 118 0078 15D1     		bne	.L5
  60:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          memcpy(&m[*len_m], mac, len_mac);
 119              		.loc 1 60 0
 120 007a 3B68     		ldr	r3, [r7]
 121 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 122 007e 1A46     		mov	r2, r3
 123 0080 7B68     		ldr	r3, [r7, #4]
 124 0082 1344     		add	r3, r3, r2
 125 0084 97F83420 		ldrb	r2, [r7, #52]	@ zero_extendqisi2
 126 0088 07F11001 		add	r1, r7, #16
 127 008c 1846     		mov	r0, r3
 128 008e FFF7FEFF 		bl	memcpy
  61:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          *len_m += len_mac;
 129              		.loc 1 61 0
 130 0092 3B68     		ldr	r3, [r7]
 131 0094 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 132 0096 97F83430 		ldrb	r3, [r7, #52]
 133 009a 1344     		add	r3, r3, r2
 134 009c DAB2     		uxtb	r2, r3
 135 009e 3B68     		ldr	r3, [r7]
 136 00a0 1A70     		strb	r2, [r3]
  62:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  63:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          return E_SUCCESS;
 137              		.loc 1 63 0
 138 00a2 0023     		movs	r3, #0
 139 00a4 00E0     		b	.L6
 140              	.L5:
  64:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       }
  65:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    }
  66:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  67:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    return E_FAIL;
 141              		.loc 1 67 0
 142 00a6 0123     		movs	r3, #1
 143              	.L6:
  68:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** }
 144              		.loc 1 68 0 discriminator 1
 145 00a8 1846     		mov	r0, r3
 146 00aa 2037     		adds	r7, r7, #32
 147              		.cfi_def_cfa_offset 8
 148 00ac BD46     		mov	sp, r7
 149              		.cfi_def_cfa_register 13
 150              		@ sp needed
 151 00ae 80BD     		pop	{r7, pc}
 152              		.cfi_endproc
 153              	.LFE0:
 155              		.align	1
 156              		.global	openccms_dec
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 160              		.fpu softvfp
 162              	openccms_dec:
 163              	.LFB1:
  69:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  70:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** /**
  71:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \brief CCM* inverse transformation (i.e. decryption + tag verification) implemented in software. In
  72:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] a Pointer to the authentication only data.
  73:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] len_a Length of authentication only data.
  74:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in,out] m Pointer to the data that is both authenticated and encrypted. Overwritten by
  75:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    plaintext.
  76:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in,out] len_m Length of data that is both authenticated and encrypted, including the
  77:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    trailing authentication tag. On return it is reduced for len_mac octets to account for the
  78:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    removed authentication tag.
  79:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] nonce Buffer containing nonce (13 octets).
  80:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] l CCM parameter L that allows selection of different nonce length. This implementation
  81:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    supports l = 2 (i.e. 13 octet long nonce) only.
  82:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] key Buffer containing the secret key (16 octets).
  83:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] len_mac Length of the authentication tag.
  84:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  85:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \returns E_SUCCESS when decryption and verification were successful, E_FAIL otherwise. 
  86:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** */
  87:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** owerror_t openccms_dec(uint8_t* a,
  88:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t len_a,
  89:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t* m,
  90:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t* len_m,
  91:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t* nonce,
  92:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t l,
  93:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t key[16],
  94:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t len_mac) {
 164              		.loc 1 94 0
 165              		.cfi_startproc
 166              		@ args = 16, pretend = 0, frame = 48
 167              		@ frame_needed = 1, uses_anonymous_args = 0
 168 00b0 80B5     		push	{r7, lr}
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 7, -8
 171              		.cfi_offset 14, -4
 172 00b2 92B0     		sub	sp, sp, #72
 173              		.cfi_def_cfa_offset 80
 174 00b4 06AF     		add	r7, sp, #24
 175              		.cfi_def_cfa 7, 56
 176 00b6 F860     		str	r0, [r7, #12]
 177 00b8 7A60     		str	r2, [r7, #4]
 178 00ba 3B60     		str	r3, [r7]
 179 00bc 0B46     		mov	r3, r1
 180 00be FB72     		strb	r3, [r7, #11]
  95:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  96:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t mac[CBC_MAX_MAC_SIZE];
  97:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t orig_mac[CBC_MAX_MAC_SIZE];
  98:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
  99:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    if ((len_mac > CBC_MAX_MAC_SIZE) || (l != 2)) {
 181              		.loc 1 99 0
 182 00c0 97F84430 		ldrb	r3, [r7, #68]	@ zero_extendqisi2
 183 00c4 102B     		cmp	r3, #16
 184 00c6 03D8     		bhi	.L8
 185              		.loc 1 99 0 is_stmt 0 discriminator 1
 186 00c8 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
 187 00cc 022B     		cmp	r3, #2
 188 00ce 01D0     		beq	.L9
 189              	.L8:
 100:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       return E_FAIL;
 190              		.loc 1 100 0 is_stmt 1
 191 00d0 0123     		movs	r3, #1
 192 00d2 4DE0     		b	.L12
 193              	.L9:
 101:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    }
 102:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 103:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    *len_m -= len_mac;
 194              		.loc 1 103 0
 195 00d4 3B68     		ldr	r3, [r7]
 196 00d6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 197 00d8 97F84430 		ldrb	r3, [r7, #68]
 198 00dc D31A     		subs	r3, r2, r3
 199 00de DAB2     		uxtb	r2, r3
 200 00e0 3B68     		ldr	r3, [r7]
 201 00e2 1A70     		strb	r2, [r3]
 104:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memcpy(mac, &m[*len_m], len_mac);
 202              		.loc 1 104 0
 203 00e4 3B68     		ldr	r3, [r7]
 204 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 205 00e8 1A46     		mov	r2, r3
 206 00ea 7B68     		ldr	r3, [r7, #4]
 207 00ec 9918     		adds	r1, r3, r2
 208 00ee 97F84420 		ldrb	r2, [r7, #68]	@ zero_extendqisi2
 209 00f2 07F12003 		add	r3, r7, #32
 210 00f6 1846     		mov	r0, r3
 211 00f8 FFF7FEFF 		bl	memcpy
 105:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 106:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    if (aes_ctr_enc(m, *len_m, nonce, key, mac, len_mac, l) == E_SUCCESS) {
 212              		.loc 1 106 0
 213 00fc 3B68     		ldr	r3, [r7]
 214 00fe 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 215 0100 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
 216 0104 0293     		str	r3, [sp, #8]
 217 0106 97F84430 		ldrb	r3, [r7, #68]	@ zero_extendqisi2
 218 010a 0193     		str	r3, [sp, #4]
 219 010c 07F12003 		add	r3, r7, #32
 220 0110 0093     		str	r3, [sp]
 221 0112 3B6C     		ldr	r3, [r7, #64]
 222 0114 BA6B     		ldr	r2, [r7, #56]
 223 0116 7868     		ldr	r0, [r7, #4]
 224 0118 00F051F9 		bl	aes_ctr_enc
 225 011c 0346     		mov	r3, r0
 226 011e 002B     		cmp	r3, #0
 227 0120 25D1     		bne	.L11
 107:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       if (aes_cbc_mac(a, len_a, m, *len_m, nonce, key, orig_mac, len_mac, l) == E_SUCCESS) {
 228              		.loc 1 107 0
 229 0122 3B68     		ldr	r3, [r7]
 230 0124 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 231 0126 F97A     		ldrb	r1, [r7, #11]	@ zero_extendqisi2
 232 0128 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
 233 012c 0493     		str	r3, [sp, #16]
 234 012e 97F84430 		ldrb	r3, [r7, #68]	@ zero_extendqisi2
 235 0132 0393     		str	r3, [sp, #12]
 236 0134 07F11003 		add	r3, r7, #16
 237 0138 0293     		str	r3, [sp, #8]
 238 013a 3B6C     		ldr	r3, [r7, #64]
 239 013c 0193     		str	r3, [sp, #4]
 240 013e BB6B     		ldr	r3, [r7, #56]
 241 0140 0093     		str	r3, [sp]
 242 0142 1346     		mov	r3, r2
 243 0144 7A68     		ldr	r2, [r7, #4]
 244 0146 F868     		ldr	r0, [r7, #12]
 245 0148 00F016F8 		bl	aes_cbc_mac
 246 014c 0346     		mov	r3, r0
 247 014e 002B     		cmp	r3, #0
 248 0150 0DD1     		bne	.L11
 108:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          if (memcmp(mac, orig_mac, len_mac) == 0) {
 249              		.loc 1 108 0
 250 0152 97F84420 		ldrb	r2, [r7, #68]	@ zero_extendqisi2
 251 0156 07F11001 		add	r1, r7, #16
 252 015a 07F12003 		add	r3, r7, #32
 253 015e 1846     		mov	r0, r3
 254 0160 FFF7FEFF 		bl	memcmp
 255 0164 0346     		mov	r3, r0
 256 0166 002B     		cmp	r3, #0
 257 0168 01D1     		bne	.L11
 109:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****             return E_SUCCESS;
 258              		.loc 1 109 0
 259 016a 0023     		movs	r3, #0
 260 016c 00E0     		b	.L12
 261              	.L11:
 110:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          }
 111:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       }
 112:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    }
 113:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 114:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    return E_FAIL;
 262              		.loc 1 114 0
 263 016e 0123     		movs	r3, #1
 264              	.L12:
 115:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** }
 265              		.loc 1 115 0 discriminator 1
 266 0170 1846     		mov	r0, r3
 267 0172 3037     		adds	r7, r7, #48
 268              		.cfi_def_cfa_offset 8
 269 0174 BD46     		mov	sp, r7
 270              		.cfi_def_cfa_register 13
 271              		@ sp needed
 272 0176 80BD     		pop	{r7, pc}
 273              		.cfi_endproc
 274              	.LFE1:
 276              		.align	1
 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
 280              		.fpu softvfp
 282              	aes_cbc_mac:
 283              	.LFB2:
 116:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 117:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** //=========================== private =========================================
 118:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 119:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** /**
 120:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \brief CBC-MAC generation specific to CCM*.
 121:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] a Pointer to the authentication only data.
 122:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] len_a Length of authentication only data.
 123:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] m Pointer to the data that is both authenticated and encrypted.
 124:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] len_m Length of data that is both authenticated and encrypted.
 125:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] nonce Buffer containing nonce (13 octets).
 126:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] key Buffer containing the secret key (16 octets).
 127:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[out] mac Buffer where the value of the CBC-MAC tag will be written.
 128:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] len_mac Length of the CBC-MAC tag. Must be 4, 8 or 16 octets.
 129:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] l CCM parameter L that allows selection of different nonce length.
 130:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 131:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \returns E_SUCCESS when the generation was successful, E_FAIL otherwise. 
 132:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** */
 133:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** static owerror_t aes_cbc_mac(uint8_t* a,
 134:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t len_a,
 135:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t* m,
 136:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t len_m,
 137:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t* nonce,
 138:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t key[16],
 139:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t* mac,
 140:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t len_mac,
 141:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t l) {
 284              		.loc 1 141 0
 285              		.cfi_startproc
 286              		@ args = 20, pretend = 0, frame = 200
 287              		@ frame_needed = 1, uses_anonymous_args = 0
 288 0178 80B5     		push	{r7, lr}
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 7, -8
 291              		.cfi_offset 14, -4
 292 017a B2B0     		sub	sp, sp, #200
 293              		.cfi_def_cfa_offset 208
 294 017c 00AF     		add	r7, sp, #0
 295              		.cfi_def_cfa_register 7
 296 017e F860     		str	r0, [r7, #12]
 297 0180 7A60     		str	r2, [r7, #4]
 298 0182 1A46     		mov	r2, r3
 299 0184 0B46     		mov	r3, r1
 300 0186 FB72     		strb	r3, [r7, #11]
 301 0188 1346     		mov	r3, r2
 302 018a BB72     		strb	r3, [r7, #10]
 142:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    
 143:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t  pad_len;
 144:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t  len;
 145:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t  cbc_mac_iv[16];
 146:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t  buffer[128+16+16]; // max buffer plus IV
 147:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 148:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    // asserts here
 149:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    if (!((len_mac == 0) || (len_mac == 4) || (len_mac == 8) || (len_mac == 16))) {
 303              		.loc 1 149 0
 304 018c 97F8DC30 		ldrb	r3, [r7, #220]	@ zero_extendqisi2
 305 0190 002B     		cmp	r3, #0
 306 0192 0DD0     		beq	.L14
 307              		.loc 1 149 0 is_stmt 0 discriminator 1
 308 0194 97F8DC30 		ldrb	r3, [r7, #220]	@ zero_extendqisi2
 309 0198 042B     		cmp	r3, #4
 310 019a 09D0     		beq	.L14
 311              		.loc 1 149 0 discriminator 2
 312 019c 97F8DC30 		ldrb	r3, [r7, #220]	@ zero_extendqisi2
 313 01a0 082B     		cmp	r3, #8
 314 01a2 05D0     		beq	.L14
 315              		.loc 1 149 0 discriminator 3
 316 01a4 97F8DC30 		ldrb	r3, [r7, #220]	@ zero_extendqisi2
 317 01a8 102B     		cmp	r3, #16
 318 01aa 01D0     		beq	.L14
 150:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       return E_FAIL;
 319              		.loc 1 150 0 is_stmt 1
 320 01ac 0123     		movs	r3, #1
 321 01ae 02E1     		b	.L29
 322              	.L14:
 151:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    }
 152:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 153:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    if ((len_a > 127) || (len_m > 127) || ((len_a + len_m) > 127)) {
 323              		.loc 1 153 0
 324 01b0 97F90B30 		ldrsb	r3, [r7, #11]
 325 01b4 002B     		cmp	r3, #0
 326 01b6 08DB     		blt	.L16
 327              		.loc 1 153 0 is_stmt 0 discriminator 1
 328 01b8 97F90A30 		ldrsb	r3, [r7, #10]
 329 01bc 002B     		cmp	r3, #0
 330 01be 04DB     		blt	.L16
 331              		.loc 1 153 0 discriminator 2
 332 01c0 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 333 01c2 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 334 01c4 1344     		add	r3, r3, r2
 335 01c6 7F2B     		cmp	r3, #127
 336 01c8 01DD     		ble	.L17
 337              	.L16:
 154:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       return E_FAIL;
 338              		.loc 1 154 0 is_stmt 1
 339 01ca 0123     		movs	r3, #1
 340 01cc F3E0     		b	.L29
 341              	.L17:
 155:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    }
 156:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 157:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    if (mac == 0) {
 342              		.loc 1 157 0
 343 01ce D7F8D830 		ldr	r3, [r7, #216]
 344 01d2 002B     		cmp	r3, #0
 345 01d4 01D1     		bne	.L18
 158:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       return E_FAIL;
 346              		.loc 1 158 0
 347 01d6 0123     		movs	r3, #1
 348 01d8 EDE0     		b	.L29
 349              	.L18:
 159:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    }
 160:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 161:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memset(cbc_mac_iv, 0x00, 16); // CBC-MAC Initialization Vector is a zero string
 350              		.loc 1 161 0
 351 01da 07F1B403 		add	r3, r7, #180
 352 01de 1022     		movs	r2, #16
 353 01e0 0021     		movs	r1, #0
 354 01e2 1846     		mov	r0, r3
 355 01e4 FFF7FEFF 		bl	memset
 162:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 163:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    // IV: flags (1B) | SADDR (8B) | ASN (5B) | len(m) (2B)
 164:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    // X0 xor IV in first 16 bytes of buffer: set buffer[:16] as IV)
 165:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    buffer[0] = 0x00; // set flags to zero including reserved
 356              		.loc 1 165 0
 357 01e8 0023     		movs	r3, #0
 358 01ea 3B75     		strb	r3, [r7, #20]
 166:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    buffer[0] |= 0x07 & (l-1); // field L
 359              		.loc 1 166 0
 360 01ec 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 361 01ee 5AB2     		sxtb	r2, r3
 362 01f0 97F8E030 		ldrb	r3, [r7, #224]
 363 01f4 013B     		subs	r3, r3, #1
 364 01f6 DBB2     		uxtb	r3, r3
 365 01f8 5BB2     		sxtb	r3, r3
 366 01fa 03F00703 		and	r3, r3, #7
 367 01fe 5BB2     		sxtb	r3, r3
 368 0200 1343     		orrs	r3, r3, r2
 369 0202 5BB2     		sxtb	r3, r3
 370 0204 DBB2     		uxtb	r3, r3
 371 0206 3B75     		strb	r3, [r7, #20]
 167:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    // (len_mac - 2)/2 shifted left 3 times corresponds to (len_mac - 2) << 2
 168:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    buffer[0] |= len_mac == 0 ? 0 : (0x07 & (len_mac - 2)) << 2; // field M
 372              		.loc 1 168 0
 373 0208 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 374 020a 5AB2     		sxtb	r2, r3
 375 020c 97F8DC30 		ldrb	r3, [r7, #220]	@ zero_extendqisi2
 376 0210 002B     		cmp	r3, #0
 377 0212 08D0     		beq	.L19
 378              		.loc 1 168 0 is_stmt 0 discriminator 1
 379 0214 97F8DC30 		ldrb	r3, [r7, #220]	@ zero_extendqisi2
 380 0218 023B     		subs	r3, r3, #2
 381 021a 9B00     		lsls	r3, r3, #2
 382 021c 5BB2     		sxtb	r3, r3
 383 021e 03F01C03 		and	r3, r3, #28
 384 0222 5BB2     		sxtb	r3, r3
 385 0224 00E0     		b	.L20
 386              	.L19:
 387              		.loc 1 168 0 discriminator 2
 388 0226 0023     		movs	r3, #0
 389              	.L20:
 390              		.loc 1 168 0 discriminator 4
 391 0228 1343     		orrs	r3, r3, r2
 392 022a 5BB2     		sxtb	r3, r3
 393 022c DBB2     		uxtb	r3, r3
 394 022e 3B75     		strb	r3, [r7, #20]
 169:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    buffer[0] |= len_a != 0 ? 0x40 : 0; // field Adata
 395              		.loc 1 169 0 is_stmt 1 discriminator 4
 396 0230 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 397 0232 5BB2     		sxtb	r3, r3
 398 0234 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 399 0236 002A     		cmp	r2, #0
 400 0238 01D0     		beq	.L21
 401              		.loc 1 169 0 is_stmt 0 discriminator 1
 402 023a 4022     		movs	r2, #64
 403 023c 00E0     		b	.L22
 404              	.L21:
 405              		.loc 1 169 0 discriminator 2
 406 023e 0022     		movs	r2, #0
 407              	.L22:
 408              		.loc 1 169 0 discriminator 4
 409 0240 1343     		orrs	r3, r3, r2
 410 0242 5BB2     		sxtb	r3, r3
 411 0244 DBB2     		uxtb	r3, r3
 412 0246 3B75     		strb	r3, [r7, #20]
 170:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    
 171:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memcpy(&buffer[1], nonce, 13);
 413              		.loc 1 171 0 is_stmt 1 discriminator 4
 414 0248 07F11403 		add	r3, r7, #20
 415 024c 0133     		adds	r3, r3, #1
 416 024e 0D22     		movs	r2, #13
 417 0250 D7F8D010 		ldr	r1, [r7, #208]
 418 0254 1846     		mov	r0, r3
 419 0256 FFF7FEFF 		bl	memcpy
 172:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 173:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    if (l == 3) {
 420              		.loc 1 173 0 discriminator 4
 421 025a 97F8E030 		ldrb	r3, [r7, #224]	@ zero_extendqisi2
 422 025e 032B     		cmp	r3, #3
 423 0260 02D1     		bne	.L23
 174:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       buffer[13] = 0;
 424              		.loc 1 174 0
 425 0262 0023     		movs	r3, #0
 426 0264 87F82130 		strb	r3, [r7, #33]
 427              	.L23:
 175:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    }
 176:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 177:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    buffer[14] = 0;
 428              		.loc 1 177 0
 429 0268 0023     		movs	r3, #0
 430 026a 87F82230 		strb	r3, [r7, #34]
 178:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    buffer[15] = len_m;
 431              		.loc 1 178 0
 432 026e BB7A     		ldrb	r3, [r7, #10]
 433 0270 87F82330 		strb	r3, [r7, #35]
 179:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 180:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    len = 16;
 434              		.loc 1 180 0
 435 0274 1023     		movs	r3, #16
 436 0276 87F8C730 		strb	r3, [r7, #199]
 181:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    // len(a)
 182:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    if(len_a > 0) {
 437              		.loc 1 182 0
 438 027a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 439 027c 002B     		cmp	r3, #0
 440 027e 0AD0     		beq	.L24
 183:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       buffer[16] = 0;
 441              		.loc 1 183 0
 442 0280 0023     		movs	r3, #0
 443 0282 87F82430 		strb	r3, [r7, #36]
 184:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       buffer[17] = len_a;
 444              		.loc 1 184 0
 445 0286 FB7A     		ldrb	r3, [r7, #11]
 446 0288 87F82530 		strb	r3, [r7, #37]
 185:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       len += 2;
 447              		.loc 1 185 0
 448 028c 97F8C730 		ldrb	r3, [r7, #199]
 449 0290 0233     		adds	r3, r3, #2
 450 0292 87F8C730 		strb	r3, [r7, #199]
 451              	.L24:
 186:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    }
 187:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 188:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    //  (((x >> 4) + 1)<<4) - x   or    16 - (x % 16) ?
 189:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    // a + padding
 190:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    pad_len = ((((len_a + len - 16) >> 4) + 1) << 4) - (len_a + len - 16);
 452              		.loc 1 190 0
 453 0296 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 454 0298 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 455 029c 1344     		add	r3, r3, r2
 456 029e 103B     		subs	r3, r3, #16
 457 02a0 1B11     		asrs	r3, r3, #4
 458 02a2 DBB2     		uxtb	r3, r3
 459 02a4 0133     		adds	r3, r3, #1
 460 02a6 DBB2     		uxtb	r3, r3
 461 02a8 1B01     		lsls	r3, r3, #4
 462 02aa DAB2     		uxtb	r2, r3
 463 02ac F97A     		ldrb	r1, [r7, #11]
 464 02ae 97F8C730 		ldrb	r3, [r7, #199]
 465 02b2 0B44     		add	r3, r3, r1
 466 02b4 DBB2     		uxtb	r3, r3
 467 02b6 D31A     		subs	r3, r2, r3
 468 02b8 DBB2     		uxtb	r3, r3
 469 02ba 1033     		adds	r3, r3, #16
 470 02bc 87F8C630 		strb	r3, [r7, #198]
 191:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    pad_len = pad_len == 16 ? 0 : pad_len;
 471              		.loc 1 191 0
 472 02c0 97F8C630 		ldrb	r3, [r7, #198]	@ zero_extendqisi2
 473 02c4 102B     		cmp	r3, #16
 474 02c6 02D0     		beq	.L25
 475              		.loc 1 191 0 is_stmt 0 discriminator 1
 476 02c8 97F8C630 		ldrb	r3, [r7, #198]	@ zero_extendqisi2
 477 02cc 00E0     		b	.L26
 478              	.L25:
 479              		.loc 1 191 0 discriminator 2
 480 02ce 0023     		movs	r3, #0
 481              	.L26:
 482              		.loc 1 191 0 discriminator 4
 483 02d0 87F8C630 		strb	r3, [r7, #198]
 192:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memcpy(&buffer[len], a, len_a);
 484              		.loc 1 192 0 is_stmt 1 discriminator 4
 485 02d4 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 486 02d8 07F11402 		add	r2, r7, #20
 487 02dc 1344     		add	r3, r3, r2
 488 02de FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 489 02e0 F968     		ldr	r1, [r7, #12]
 490 02e2 1846     		mov	r0, r3
 491 02e4 FFF7FEFF 		bl	memcpy
 193:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    len += len_a;
 492              		.loc 1 193 0 discriminator 4
 493 02e8 97F8C720 		ldrb	r2, [r7, #199]
 494 02ec FB7A     		ldrb	r3, [r7, #11]
 495 02ee 1344     		add	r3, r3, r2
 496 02f0 87F8C730 		strb	r3, [r7, #199]
 194:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memset(&buffer[len], 0, pad_len);
 497              		.loc 1 194 0 discriminator 4
 498 02f4 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 499 02f8 07F11402 		add	r2, r7, #20
 500 02fc 1344     		add	r3, r3, r2
 501 02fe 97F8C620 		ldrb	r2, [r7, #198]	@ zero_extendqisi2
 502 0302 0021     		movs	r1, #0
 503 0304 1846     		mov	r0, r3
 504 0306 FFF7FEFF 		bl	memset
 195:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    len += pad_len;
 505              		.loc 1 195 0 discriminator 4
 506 030a 97F8C720 		ldrb	r2, [r7, #199]
 507 030e 97F8C630 		ldrb	r3, [r7, #198]
 508 0312 1344     		add	r3, r3, r2
 509 0314 87F8C730 		strb	r3, [r7, #199]
 196:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 197:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    // m + padding
 198:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    pad_len = (((len_m >> 4) + 1) << 4) - len_m;
 510              		.loc 1 198 0 discriminator 4
 511 0318 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 512 031a 1B09     		lsrs	r3, r3, #4
 513 031c DBB2     		uxtb	r3, r3
 514 031e 0133     		adds	r3, r3, #1
 515 0320 DBB2     		uxtb	r3, r3
 516 0322 1B01     		lsls	r3, r3, #4
 517 0324 DAB2     		uxtb	r2, r3
 518 0326 BB7A     		ldrb	r3, [r7, #10]
 519 0328 D31A     		subs	r3, r2, r3
 520 032a 87F8C630 		strb	r3, [r7, #198]
 199:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    pad_len = pad_len == 16 ? 0 : pad_len;
 521              		.loc 1 199 0 discriminator 4
 522 032e 97F8C630 		ldrb	r3, [r7, #198]	@ zero_extendqisi2
 523 0332 102B     		cmp	r3, #16
 524 0334 02D0     		beq	.L27
 525              		.loc 1 199 0 is_stmt 0 discriminator 1
 526 0336 97F8C630 		ldrb	r3, [r7, #198]	@ zero_extendqisi2
 527 033a 00E0     		b	.L28
 528              	.L27:
 529              		.loc 1 199 0 discriminator 2
 530 033c 0023     		movs	r3, #0
 531              	.L28:
 532              		.loc 1 199 0 discriminator 4
 533 033e 87F8C630 		strb	r3, [r7, #198]
 200:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memcpy(&buffer[len], m, len_m);
 534              		.loc 1 200 0 is_stmt 1 discriminator 4
 535 0342 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 536 0346 07F11402 		add	r2, r7, #20
 537 034a 1344     		add	r3, r3, r2
 538 034c BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 539 034e 7968     		ldr	r1, [r7, #4]
 540 0350 1846     		mov	r0, r3
 541 0352 FFF7FEFF 		bl	memcpy
 201:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    len += len_m;
 542              		.loc 1 201 0 discriminator 4
 543 0356 97F8C720 		ldrb	r2, [r7, #199]
 544 035a BB7A     		ldrb	r3, [r7, #10]
 545 035c 1344     		add	r3, r3, r2
 546 035e 87F8C730 		strb	r3, [r7, #199]
 202:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memset(&buffer[len], 0, pad_len);
 547              		.loc 1 202 0 discriminator 4
 548 0362 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 549 0366 07F11402 		add	r2, r7, #20
 550 036a 1344     		add	r3, r3, r2
 551 036c 97F8C620 		ldrb	r2, [r7, #198]	@ zero_extendqisi2
 552 0370 0021     		movs	r1, #0
 553 0372 1846     		mov	r0, r3
 554 0374 FFF7FEFF 		bl	memset
 203:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    len += pad_len;
 555              		.loc 1 203 0 discriminator 4
 556 0378 97F8C720 		ldrb	r2, [r7, #199]
 557 037c 97F8C630 		ldrb	r3, [r7, #198]
 558 0380 1344     		add	r3, r3, r2
 559 0382 87F8C730 		strb	r3, [r7, #199]
 204:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 205:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    aes_cbc_enc_raw(buffer, len, key, cbc_mac_iv);
 560              		.loc 1 205 0 discriminator 4
 561 0386 07F1B403 		add	r3, r7, #180
 562 038a 97F8C710 		ldrb	r1, [r7, #199]	@ zero_extendqisi2
 563 038e 07F11400 		add	r0, r7, #20
 564 0392 D7F8D420 		ldr	r2, [r7, #212]
 565 0396 FFF7FEFF 		bl	aes_cbc_enc_raw
 206:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 207:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    // copy MAC
 208:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memcpy(mac, &buffer[len - 16], len_mac);
 566              		.loc 1 208 0 discriminator 4
 567 039a 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 568 039e 103B     		subs	r3, r3, #16
 569 03a0 07F11402 		add	r2, r7, #20
 570 03a4 1344     		add	r3, r3, r2
 571 03a6 97F8DC20 		ldrb	r2, [r7, #220]	@ zero_extendqisi2
 572 03aa 1946     		mov	r1, r3
 573 03ac D7F8D800 		ldr	r0, [r7, #216]
 574 03b0 FFF7FEFF 		bl	memcpy
 209:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 210:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    return E_SUCCESS;
 575              		.loc 1 210 0 discriminator 4
 576 03b4 0023     		movs	r3, #0
 577              	.L29:
 211:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** }
 578              		.loc 1 211 0 discriminator 1
 579 03b6 1846     		mov	r0, r3
 580 03b8 C837     		adds	r7, r7, #200
 581              		.cfi_def_cfa_offset 8
 582 03ba BD46     		mov	sp, r7
 583              		.cfi_def_cfa_register 13
 584              		@ sp needed
 585 03bc 80BD     		pop	{r7, pc}
 586              		.cfi_endproc
 587              	.LFE2:
 589              		.align	1
 590              		.syntax unified
 591              		.thumb
 592              		.thumb_func
 593              		.fpu softvfp
 595              	aes_ctr_enc:
 596              	.LFB3:
 212:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 213:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** /**
 214:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \brief Counter (CTR) mode encryption specific to IEEE 802.15.4E.
 215:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in,out] m Pointer to the data that is both authenticated and encrypted. Data is
 216:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    overwritten by ciphertext (i.e. plaintext in case of inverse CCM*).
 217:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] len_m Length of data that is both authenticated and encrypted.
 218:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] nonce Buffer containing nonce (13 octets).
 219:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] key Buffer containing the secret key (16 octets).
 220:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in,out] mac Buffer containing the unencrypted or encrypted CBC-MAC tag, which depends
 221:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    on weather the function is called as part of CCM* forward or inverse transformation. It
 222:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    is overwrriten by the encrypted, i.e unencrypted, tag on return.
 223:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] len_mac Length of the CBC-MAC tag. Must be 4, 8 or 16 octets.
 224:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] l CCM parameter L that allows selection of different nonce length.
 225:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 226:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \returns E_SUCCESS when the encryption was successful, E_FAIL otherwise. 
 227:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** */
 228:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** static owerror_t aes_ctr_enc(uint8_t* m,
 229:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t len_m,
 230:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t* nonce,
 231:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t key[16],
 232:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t* mac,
 233:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t len_mac,
 234:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          uint8_t l) {
 597              		.loc 1 234 0
 598              		.cfi_startproc
 599              		@ args = 12, pretend = 0, frame = 184
 600              		@ frame_needed = 1, uses_anonymous_args = 0
 601 03be 80B5     		push	{r7, lr}
 602              		.cfi_def_cfa_offset 8
 603              		.cfi_offset 7, -8
 604              		.cfi_offset 14, -4
 605 03c0 AEB0     		sub	sp, sp, #184
 606              		.cfi_def_cfa_offset 192
 607 03c2 00AF     		add	r7, sp, #0
 608              		.cfi_def_cfa_register 7
 609 03c4 F860     		str	r0, [r7, #12]
 610 03c6 7A60     		str	r2, [r7, #4]
 611 03c8 3B60     		str	r3, [r7]
 612 03ca 0B46     		mov	r3, r1
 613 03cc FB72     		strb	r3, [r7, #11]
 235:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 236:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t pad_len;
 237:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t len;
 238:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t iv[16];
 239:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t buffer[128 + 16]; // max buffer plus mac
 240:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 241:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    // asserts here
 242:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    if (!((len_mac == 0) || (len_mac == 4) || (len_mac == 8) || (len_mac == 16))) {
 614              		.loc 1 242 0
 615 03ce 97F8C430 		ldrb	r3, [r7, #196]	@ zero_extendqisi2
 616 03d2 002B     		cmp	r3, #0
 617 03d4 0DD0     		beq	.L31
 618              		.loc 1 242 0 is_stmt 0 discriminator 1
 619 03d6 97F8C430 		ldrb	r3, [r7, #196]	@ zero_extendqisi2
 620 03da 042B     		cmp	r3, #4
 621 03dc 09D0     		beq	.L31
 622              		.loc 1 242 0 discriminator 2
 623 03de 97F8C430 		ldrb	r3, [r7, #196]	@ zero_extendqisi2
 624 03e2 082B     		cmp	r3, #8
 625 03e4 05D0     		beq	.L31
 626              		.loc 1 242 0 discriminator 3
 627 03e6 97F8C430 		ldrb	r3, [r7, #196]	@ zero_extendqisi2
 628 03ea 102B     		cmp	r3, #16
 629 03ec 01D0     		beq	.L31
 243:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       return E_FAIL;
 630              		.loc 1 243 0 is_stmt 1
 631 03ee 0123     		movs	r3, #1
 632 03f0 91E0     		b	.L36
 633              	.L31:
 244:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    }
 245:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 246:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    if (len_m > 127) {
 634              		.loc 1 246 0
 635 03f2 97F90B30 		ldrsb	r3, [r7, #11]
 636 03f6 002B     		cmp	r3, #0
 637 03f8 01DA     		bge	.L33
 247:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       return E_FAIL;
 638              		.loc 1 247 0
 639 03fa 0123     		movs	r3, #1
 640 03fc 8BE0     		b	.L36
 641              	.L33:
 248:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    }
 249:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 250:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    // iv (flag (1B) | source addr (8B) | ASN (5B) | cnt (2B)
 251:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    iv[0] = 0x00;
 642              		.loc 1 251 0
 643 03fe 0023     		movs	r3, #0
 644 0400 87F8A430 		strb	r3, [r7, #164]
 252:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    iv[0] |= 0x07 & (l-1); // field L
 645              		.loc 1 252 0
 646 0404 97F8A430 		ldrb	r3, [r7, #164]	@ zero_extendqisi2
 647 0408 5AB2     		sxtb	r2, r3
 648 040a 97F8C830 		ldrb	r3, [r7, #200]
 649 040e 013B     		subs	r3, r3, #1
 650 0410 DBB2     		uxtb	r3, r3
 651 0412 5BB2     		sxtb	r3, r3
 652 0414 03F00703 		and	r3, r3, #7
 653 0418 5BB2     		sxtb	r3, r3
 654 041a 1343     		orrs	r3, r3, r2
 655 041c 5BB2     		sxtb	r3, r3
 656 041e DBB2     		uxtb	r3, r3
 657 0420 87F8A430 		strb	r3, [r7, #164]
 253:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 254:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memcpy(&iv[1], nonce, 13);
 658              		.loc 1 254 0
 659 0424 07F1A403 		add	r3, r7, #164
 660 0428 0133     		adds	r3, r3, #1
 661 042a 0D22     		movs	r2, #13
 662 042c 7968     		ldr	r1, [r7, #4]
 663 042e 1846     		mov	r0, r3
 664 0430 FFF7FEFF 		bl	memcpy
 255:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    iv[14] = 0x00;
 665              		.loc 1 255 0
 666 0434 0023     		movs	r3, #0
 667 0436 87F8B230 		strb	r3, [r7, #178]
 256:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    iv[15] = 0x00;
 668              		.loc 1 256 0
 669 043a 0023     		movs	r3, #0
 670 043c 87F8B330 		strb	r3, [r7, #179]
 257:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 258:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    // first block is mac
 259:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memcpy(buffer, mac, len_mac);
 671              		.loc 1 259 0
 672 0440 97F8C420 		ldrb	r2, [r7, #196]	@ zero_extendqisi2
 673 0444 07F11403 		add	r3, r7, #20
 674 0448 D7F8C010 		ldr	r1, [r7, #192]
 675 044c 1846     		mov	r0, r3
 676 044e FFF7FEFF 		bl	memcpy
 260:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memset(&buffer[len_mac], 0, 16 - len_mac);
 677              		.loc 1 260 0
 678 0452 97F8C430 		ldrb	r3, [r7, #196]	@ zero_extendqisi2
 679 0456 07F11402 		add	r2, r7, #20
 680 045a D018     		adds	r0, r2, r3
 681 045c 97F8C430 		ldrb	r3, [r7, #196]	@ zero_extendqisi2
 682 0460 C3F11003 		rsb	r3, r3, #16
 683 0464 1A46     		mov	r2, r3
 684 0466 0021     		movs	r1, #0
 685 0468 FFF7FEFF 		bl	memset
 261:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    len = 16;
 686              		.loc 1 261 0
 687 046c 1023     		movs	r3, #16
 688 046e 87F8B730 		strb	r3, [r7, #183]
 262:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 263:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    //  (((x >> 4) + 1)<<4) - x   or    16 - (x % 16) ?
 264:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    // m + padding
 265:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    pad_len = (((len_m >> 4) + 1) << 4) - len_m;
 689              		.loc 1 265 0
 690 0472 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 691 0474 1B09     		lsrs	r3, r3, #4
 692 0476 DBB2     		uxtb	r3, r3
 693 0478 0133     		adds	r3, r3, #1
 694 047a DBB2     		uxtb	r3, r3
 695 047c 1B01     		lsls	r3, r3, #4
 696 047e DAB2     		uxtb	r2, r3
 697 0480 FB7A     		ldrb	r3, [r7, #11]
 698 0482 D31A     		subs	r3, r2, r3
 699 0484 87F8B630 		strb	r3, [r7, #182]
 266:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    pad_len = pad_len == 16 ? 0 : pad_len;
 700              		.loc 1 266 0
 701 0488 97F8B630 		ldrb	r3, [r7, #182]	@ zero_extendqisi2
 702 048c 102B     		cmp	r3, #16
 703 048e 02D0     		beq	.L34
 704              		.loc 1 266 0 is_stmt 0 discriminator 1
 705 0490 97F8B630 		ldrb	r3, [r7, #182]	@ zero_extendqisi2
 706 0494 00E0     		b	.L35
 707              	.L34:
 708              		.loc 1 266 0 discriminator 2
 709 0496 0023     		movs	r3, #0
 710              	.L35:
 711              		.loc 1 266 0 discriminator 4
 712 0498 87F8B630 		strb	r3, [r7, #182]
 267:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memcpy(&buffer[len], m, len_m);
 713              		.loc 1 267 0 is_stmt 1 discriminator 4
 714 049c 97F8B730 		ldrb	r3, [r7, #183]	@ zero_extendqisi2
 715 04a0 07F11402 		add	r2, r7, #20
 716 04a4 1344     		add	r3, r3, r2
 717 04a6 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 718 04a8 F968     		ldr	r1, [r7, #12]
 719 04aa 1846     		mov	r0, r3
 720 04ac FFF7FEFF 		bl	memcpy
 268:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    len += len_m;
 721              		.loc 1 268 0 discriminator 4
 722 04b0 97F8B720 		ldrb	r2, [r7, #183]
 723 04b4 FB7A     		ldrb	r3, [r7, #11]
 724 04b6 1344     		add	r3, r3, r2
 725 04b8 87F8B730 		strb	r3, [r7, #183]
 269:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memset(&buffer[len], 0, pad_len);
 726              		.loc 1 269 0 discriminator 4
 727 04bc 97F8B730 		ldrb	r3, [r7, #183]	@ zero_extendqisi2
 728 04c0 07F11402 		add	r2, r7, #20
 729 04c4 1344     		add	r3, r3, r2
 730 04c6 97F8B620 		ldrb	r2, [r7, #182]	@ zero_extendqisi2
 731 04ca 0021     		movs	r1, #0
 732 04cc 1846     		mov	r0, r3
 733 04ce FFF7FEFF 		bl	memset
 270:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    len += pad_len;
 734              		.loc 1 270 0 discriminator 4
 735 04d2 97F8B720 		ldrb	r2, [r7, #183]
 736 04d6 97F8B630 		ldrb	r3, [r7, #182]
 737 04da 1344     		add	r3, r3, r2
 738 04dc 87F8B730 		strb	r3, [r7, #183]
 271:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 272:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    aes_ctr_enc_raw(buffer, len, key, iv);
 739              		.loc 1 272 0 discriminator 4
 740 04e0 07F1A403 		add	r3, r7, #164
 741 04e4 97F8B710 		ldrb	r1, [r7, #183]	@ zero_extendqisi2
 742 04e8 07F11400 		add	r0, r7, #20
 743 04ec 3A68     		ldr	r2, [r7]
 744 04ee FFF7FEFF 		bl	aes_ctr_enc_raw
 273:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 274:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memcpy(m, &buffer[16], len_m);
 745              		.loc 1 274 0 discriminator 4
 746 04f2 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 747 04f4 07F11403 		add	r3, r7, #20
 748 04f8 1033     		adds	r3, r3, #16
 749 04fa 1946     		mov	r1, r3
 750 04fc F868     		ldr	r0, [r7, #12]
 751 04fe FFF7FEFF 		bl	memcpy
 275:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    memcpy(mac, buffer, len_mac);
 752              		.loc 1 275 0 discriminator 4
 753 0502 97F8C420 		ldrb	r2, [r7, #196]	@ zero_extendqisi2
 754 0506 07F11403 		add	r3, r7, #20
 755 050a 1946     		mov	r1, r3
 756 050c D7F8C000 		ldr	r0, [r7, #192]
 757 0510 FFF7FEFF 		bl	memcpy
 276:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 277:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    return E_SUCCESS;
 758              		.loc 1 277 0 discriminator 4
 759 0514 0023     		movs	r3, #0
 760              	.L36:
 278:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** }
 761              		.loc 1 278 0 discriminator 1
 762 0516 1846     		mov	r0, r3
 763 0518 B837     		adds	r7, r7, #184
 764              		.cfi_def_cfa_offset 8
 765 051a BD46     		mov	sp, r7
 766              		.cfi_def_cfa_register 13
 767              		@ sp needed
 768 051c 80BD     		pop	{r7, pc}
 769              		.cfi_endproc
 770              	.LFE3:
 772              		.align	1
 773              		.global	aes_cbc_enc_raw
 774              		.syntax unified
 775              		.thumb
 776              		.thumb_func
 777              		.fpu softvfp
 779              	aes_cbc_enc_raw:
 780              	.LFB4:
 279:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 280:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** /**
 281:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \brief Raw AES-CBC encryption.
 282:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in,out] buffer Message to be encrypted. Will be overwritten by ciphertext.
 283:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] len Message length. Must be multiple of 16 octets.
 284:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] key Buffer containing the secret key (16 octets).
 285:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] iv Buffer containing the Initialization Vector (16 octets).
 286:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 287:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \returns E_SUCCESS when the encryption was successful. 
 288:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** */
 289:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** owerror_t aes_cbc_enc_raw(uint8_t* buffer, uint8_t len, uint8_t key[16], uint8_t iv[16]) {
 781              		.loc 1 289 0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 32
 784              		@ frame_needed = 1, uses_anonymous_args = 0
 785 051e 80B5     		push	{r7, lr}
 786              		.cfi_def_cfa_offset 8
 787              		.cfi_offset 7, -8
 788              		.cfi_offset 14, -4
 789 0520 88B0     		sub	sp, sp, #32
 790              		.cfi_def_cfa_offset 40
 791 0522 00AF     		add	r7, sp, #0
 792              		.cfi_def_cfa_register 7
 793 0524 F860     		str	r0, [r7, #12]
 794 0526 7A60     		str	r2, [r7, #4]
 795 0528 3B60     		str	r3, [r7]
 796 052a 0B46     		mov	r3, r1
 797 052c FB72     		strb	r3, [r7, #11]
 290:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t  n;
 291:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t  k;
 292:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t  nb;
 293:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t* pbuf;
 294:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t* pxor;
 295:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 296:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    nb = len >> 4;
 798              		.loc 1 296 0
 799 052e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 800 0530 1B09     		lsrs	r3, r3, #4
 801 0532 FB75     		strb	r3, [r7, #23]
 297:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    pxor = iv;
 802              		.loc 1 297 0
 803 0534 3B68     		ldr	r3, [r7]
 804 0536 BB61     		str	r3, [r7, #24]
 298:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    for (n = 0; n < nb; n++) {
 805              		.loc 1 298 0
 806 0538 0023     		movs	r3, #0
 807 053a FB77     		strb	r3, [r7, #31]
 808 053c 25E0     		b	.L38
 809              	.L41:
 299:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       pbuf = &buffer[16 * n];
 810              		.loc 1 299 0
 811 053e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 812 0540 1B01     		lsls	r3, r3, #4
 813 0542 1A46     		mov	r2, r3
 814 0544 FB68     		ldr	r3, [r7, #12]
 815 0546 1344     		add	r3, r3, r2
 816 0548 3B61     		str	r3, [r7, #16]
 300:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       // may be faster if vector are aligned to 4 bytes (use long instead char in xor)
 301:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       for (k = 0; k < 16; k++) {
 817              		.loc 1 301 0
 818 054a 0023     		movs	r3, #0
 819 054c BB77     		strb	r3, [r7, #30]
 820 054e 10E0     		b	.L39
 821              	.L40:
 302:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****             pbuf[k] ^= pxor[k];
 822              		.loc 1 302 0 discriminator 3
 823 0550 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 824 0552 3A69     		ldr	r2, [r7, #16]
 825 0554 1344     		add	r3, r3, r2
 826 0556 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 827 0558 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 828 055a BA69     		ldr	r2, [r7, #24]
 829 055c 1344     		add	r3, r3, r2
 830 055e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 831 0560 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 832 0562 3869     		ldr	r0, [r7, #16]
 833 0564 0344     		add	r3, r3, r0
 834 0566 4A40     		eors	r2, r2, r1
 835 0568 D2B2     		uxtb	r2, r2
 836 056a 1A70     		strb	r2, [r3]
 301:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****             pbuf[k] ^= pxor[k];
 837              		.loc 1 301 0 discriminator 3
 838 056c BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 839 056e 0133     		adds	r3, r3, #1
 840 0570 BB77     		strb	r3, [r7, #30]
 841              	.L39:
 301:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****             pbuf[k] ^= pxor[k];
 842              		.loc 1 301 0 is_stmt 0 discriminator 1
 843 0572 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 844 0574 0F2B     		cmp	r3, #15
 845 0576 EBD9     		bls	.L40
 303:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       }
 304:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       openaes_enc(pbuf,key);
 846              		.loc 1 304 0 is_stmt 1 discriminator 2
 847 0578 7968     		ldr	r1, [r7, #4]
 848 057a 3869     		ldr	r0, [r7, #16]
 849 057c FFF7FEFF 		bl	openaes_enc
 305:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       pxor = pbuf;
 850              		.loc 1 305 0 discriminator 2
 851 0580 3B69     		ldr	r3, [r7, #16]
 852 0582 BB61     		str	r3, [r7, #24]
 298:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       pbuf = &buffer[16 * n];
 853              		.loc 1 298 0 discriminator 2
 854 0584 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 855 0586 0133     		adds	r3, r3, #1
 856 0588 FB77     		strb	r3, [r7, #31]
 857              	.L38:
 298:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       pbuf = &buffer[16 * n];
 858              		.loc 1 298 0 is_stmt 0 discriminator 1
 859 058a FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 860 058c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 861 058e 9A42     		cmp	r2, r3
 862 0590 D5D3     		bcc	.L41
 306:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    }
 307:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    return E_SUCCESS;
 863              		.loc 1 307 0 is_stmt 1
 864 0592 0023     		movs	r3, #0
 308:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** }
 865              		.loc 1 308 0
 866 0594 1846     		mov	r0, r3
 867 0596 2037     		adds	r7, r7, #32
 868              		.cfi_def_cfa_offset 8
 869 0598 BD46     		mov	sp, r7
 870              		.cfi_def_cfa_register 13
 871              		@ sp needed
 872 059a 80BD     		pop	{r7, pc}
 873              		.cfi_endproc
 874              	.LFE4:
 876              		.align	1
 877              		.global	aes_ctr_enc_raw
 878              		.syntax unified
 879              		.thumb
 880              		.thumb_func
 881              		.fpu softvfp
 883              	aes_ctr_enc_raw:
 884              	.LFB5:
 309:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 310:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** /**
 311:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \brief Raw AES-CTR encryption.
 312:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in,out] buffer Message to be encrypted. Will be overwritten by ciphertext.
 313:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] len Message length. Must be multiple of 16 octets.
 314:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] key Buffer containing the secret key (16 octets).
 315:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \param[in] iv Buffer containing the Initialization Vector (16 octets).
 316:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 317:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** \returns E_SUCCESS when the encryption was successful. 
 318:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** */
 319:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** owerror_t aes_ctr_enc_raw(uint8_t* buffer, uint8_t len, uint8_t key[16], uint8_t iv[16]) {
 885              		.loc 1 319 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 40
 888              		@ frame_needed = 1, uses_anonymous_args = 0
 889 059c 90B5     		push	{r4, r7, lr}
 890              		.cfi_def_cfa_offset 12
 891              		.cfi_offset 4, -12
 892              		.cfi_offset 7, -8
 893              		.cfi_offset 14, -4
 894 059e 8BB0     		sub	sp, sp, #44
 895              		.cfi_def_cfa_offset 56
 896 05a0 00AF     		add	r7, sp, #0
 897              		.cfi_def_cfa_register 7
 898 05a2 F860     		str	r0, [r7, #12]
 899 05a4 7A60     		str	r2, [r7, #4]
 900 05a6 3B60     		str	r3, [r7]
 901 05a8 0B46     		mov	r3, r1
 902 05aa FB72     		strb	r3, [r7, #11]
 320:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t n;
 321:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t k;
 322:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t nb;
 323:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t* pbuf;
 324:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t eiv[16];
 325:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 326:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    nb = len >> 4;
 903              		.loc 1 326 0
 904 05ac FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 905 05ae 1B09     		lsrs	r3, r3, #4
 906 05b0 87F82530 		strb	r3, [r7, #37]
 327:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    for (n = 0; n < nb; n++) {
 907              		.loc 1 327 0
 908 05b4 0023     		movs	r3, #0
 909 05b6 87F82730 		strb	r3, [r7, #39]
 910 05ba 3CE0     		b	.L44
 911              	.L47:
 328:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       pbuf = &buffer[16 * n];
 912              		.loc 1 328 0
 913 05bc 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 914 05c0 1B01     		lsls	r3, r3, #4
 915 05c2 1A46     		mov	r2, r3
 916 05c4 FB68     		ldr	r3, [r7, #12]
 917 05c6 1344     		add	r3, r3, r2
 918 05c8 3B62     		str	r3, [r7, #32]
 329:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       memcpy(eiv, iv, 16);
 919              		.loc 1 329 0
 920 05ca 3B68     		ldr	r3, [r7]
 921 05cc 07F11004 		add	r4, r7, #16
 922 05d0 1868     		ldr	r0, [r3]	@ unaligned
 923 05d2 5968     		ldr	r1, [r3, #4]	@ unaligned
 924 05d4 9A68     		ldr	r2, [r3, #8]	@ unaligned
 925 05d6 DB68     		ldr	r3, [r3, #12]	@ unaligned
 926 05d8 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 330:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       openaes_enc(eiv, key); 
 927              		.loc 1 330 0
 928 05da 07F11003 		add	r3, r7, #16
 929 05de 7968     		ldr	r1, [r7, #4]
 930 05e0 1846     		mov	r0, r3
 931 05e2 FFF7FEFF 		bl	openaes_enc
 331:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       // may be faster if vector are aligned to 4 bytes (use long instead char in xor)
 332:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       for (k = 0; k < 16; k++) {
 932              		.loc 1 332 0
 933 05e6 0023     		movs	r3, #0
 934 05e8 87F82630 		strb	r3, [r7, #38]
 935 05ec 17E0     		b	.L45
 936              	.L46:
 333:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          pbuf[k] ^= eiv[k];
 937              		.loc 1 333 0 discriminator 3
 938 05ee 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 939 05f2 3A6A     		ldr	r2, [r7, #32]
 940 05f4 1344     		add	r3, r3, r2
 941 05f6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 942 05f8 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 943 05fc 07F12802 		add	r2, r7, #40
 944 0600 1344     		add	r3, r3, r2
 945 0602 13F8182C 		ldrb	r2, [r3, #-24]	@ zero_extendqisi2
 946 0606 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 947 060a 386A     		ldr	r0, [r7, #32]
 948 060c 0344     		add	r3, r3, r0
 949 060e 4A40     		eors	r2, r2, r1
 950 0610 D2B2     		uxtb	r2, r2
 951 0612 1A70     		strb	r2, [r3]
 332:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          pbuf[k] ^= eiv[k];
 952              		.loc 1 332 0 discriminator 3
 953 0614 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 954 0618 0133     		adds	r3, r3, #1
 955 061a 87F82630 		strb	r3, [r7, #38]
 956              	.L45:
 332:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****          pbuf[k] ^= eiv[k];
 957              		.loc 1 332 0 is_stmt 0 discriminator 1
 958 061e 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 959 0622 0F2B     		cmp	r3, #15
 960 0624 E3D9     		bls	.L46
 334:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       }
 335:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       inc_counter(iv);
 961              		.loc 1 335 0 is_stmt 1 discriminator 2
 962 0626 3868     		ldr	r0, [r7]
 963 0628 00F010F8 		bl	inc_counter
 327:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       pbuf = &buffer[16 * n];
 964              		.loc 1 327 0 discriminator 2
 965 062c 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 966 0630 0133     		adds	r3, r3, #1
 967 0632 87F82730 		strb	r3, [r7, #39]
 968              	.L44:
 327:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       pbuf = &buffer[16 * n];
 969              		.loc 1 327 0 is_stmt 0 discriminator 1
 970 0636 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 971 063a 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 972 063e 9A42     		cmp	r2, r3
 973 0640 BCD3     		bcc	.L47
 336:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    }
 337:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 338:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    return E_SUCCESS;
 974              		.loc 1 338 0 is_stmt 1
 975 0642 0023     		movs	r3, #0
 339:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** }
 976              		.loc 1 339 0
 977 0644 1846     		mov	r0, r3
 978 0646 2C37     		adds	r7, r7, #44
 979              		.cfi_def_cfa_offset 12
 980 0648 BD46     		mov	sp, r7
 981              		.cfi_def_cfa_register 13
 982              		@ sp needed
 983 064a 90BD     		pop	{r4, r7, pc}
 984              		.cfi_endproc
 985              	.LFE5:
 987              		.align	1
 988              		.syntax unified
 989              		.thumb
 990              		.thumb_func
 991              		.fpu softvfp
 993              	inc_counter:
 994              	.LFB6:
 340:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** 
 341:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** static void inc_counter(uint8_t* counter) {
 995              		.loc 1 341 0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 16
 998              		@ frame_needed = 1, uses_anonymous_args = 0
 999              		@ link register save eliminated.
 1000 064c 80B4     		push	{r7}
 1001              		.cfi_def_cfa_offset 4
 1002              		.cfi_offset 7, -4
 1003 064e 85B0     		sub	sp, sp, #20
 1004              		.cfi_def_cfa_offset 24
 1005 0650 00AF     		add	r7, sp, #0
 1006              		.cfi_def_cfa_register 7
 1007 0652 7860     		str	r0, [r7, #4]
 342:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    // from openssl
 343:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint32_t n = 16;
 1008              		.loc 1 343 0
 1009 0654 1023     		movs	r3, #16
 1010 0656 FB60     		str	r3, [r7, #12]
 1011              	.L52:
 344:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    uint8_t  c;
 345:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    do {
 346:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       --n;
 1012              		.loc 1 346 0
 1013 0658 FB68     		ldr	r3, [r7, #12]
 1014 065a 013B     		subs	r3, r3, #1
 1015 065c FB60     		str	r3, [r7, #12]
 347:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       c = counter[n];
 1016              		.loc 1 347 0
 1017 065e 7A68     		ldr	r2, [r7, #4]
 1018 0660 FB68     		ldr	r3, [r7, #12]
 1019 0662 1344     		add	r3, r3, r2
 1020 0664 1B78     		ldrb	r3, [r3]
 1021 0666 FB72     		strb	r3, [r7, #11]
 348:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       ++c;
 1022              		.loc 1 348 0
 1023 0668 FB7A     		ldrb	r3, [r7, #11]
 1024 066a 0133     		adds	r3, r3, #1
 1025 066c FB72     		strb	r3, [r7, #11]
 349:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       counter[n] = c;
 1026              		.loc 1 349 0
 1027 066e 7A68     		ldr	r2, [r7, #4]
 1028 0670 FB68     		ldr	r3, [r7, #12]
 1029 0672 1344     		add	r3, r3, r2
 1030 0674 FA7A     		ldrb	r2, [r7, #11]
 1031 0676 1A70     		strb	r2, [r3]
 350:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       if (c) return;
 1032              		.loc 1 350 0
 1033 0678 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1034 067a 002B     		cmp	r3, #0
 1035 067c 03D1     		bne	.L53
 351:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****    } while (n);
 1036              		.loc 1 351 0
 1037 067e FB68     		ldr	r3, [r7, #12]
 1038 0680 002B     		cmp	r3, #0
 1039 0682 E9D1     		bne	.L52
 1040 0684 00E0     		b	.L49
 1041              	.L53:
 350:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c ****       if (c) return;
 1042              		.loc 1 350 0
 1043 0686 00BF     		nop
 1044              	.L49:
 352:build\openmote-cc2538_armgcc\bsp\boards\common/openccms.c **** }
 1045              		.loc 1 352 0
 1046 0688 1437     		adds	r7, r7, #20
 1047              		.cfi_def_cfa_offset 4
 1048 068a BD46     		mov	sp, r7
 1049              		.cfi_def_cfa_register 13
 1050              		@ sp needed
 1051 068c 80BC     		pop	{r7}
 1052              		.cfi_restore 7
 1053              		.cfi_def_cfa_offset 0
 1054 068e 7047     		bx	lr
 1055              		.cfi_endproc
 1056              	.LFE6:
 1058              	.Letext0:
 1059              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 1060              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 1061              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 1062              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eab
 1063              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 1064              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 1065              		.file 8 "bsp\\boards\\openmote-cc2538/board_info.h"
 1066              		.file 9 "inc/opendefs.h"
DEFINED SYMBOLS
                            *ABS*:00000000 openccms.c
C:\Users\Lee\AppData\Local\Temp\cceqD8kZ.s:16     .rodata:00000000 $d
C:\Users\Lee\AppData\Local\Temp\cceqD8kZ.s:19     .rodata:00000000 rreg_uriquery
C:\Users\Lee\AppData\Local\Temp\cceqD8kZ.s:24     .rodata:00000008 infoBoardname
C:\Users\Lee\AppData\Local\Temp\cceqD8kZ.s:29     .rodata:00000010 infouCName
C:\Users\Lee\AppData\Local\Temp\cceqD8kZ.s:34     .rodata:00000018 infoRadioName
C:\Users\Lee\AppData\Local\Temp\cceqD8kZ.s:39     .rodata:00000024 infoStackName
C:\Users\Lee\AppData\Local\Temp\cceqD8kZ.s:42     .text:00000000 $t
C:\Users\Lee\AppData\Local\Temp\cceqD8kZ.s:49     .text:00000000 openccms_enc
C:\Users\Lee\AppData\Local\Temp\cceqD8kZ.s:282    .text:00000178 aes_cbc_mac
C:\Users\Lee\AppData\Local\Temp\cceqD8kZ.s:595    .text:000003be aes_ctr_enc
C:\Users\Lee\AppData\Local\Temp\cceqD8kZ.s:162    .text:000000b0 openccms_dec
C:\Users\Lee\AppData\Local\Temp\cceqD8kZ.s:779    .text:0000051e aes_cbc_enc_raw
C:\Users\Lee\AppData\Local\Temp\cceqD8kZ.s:883    .text:0000059c aes_ctr_enc_raw
C:\Users\Lee\AppData\Local\Temp\cceqD8kZ.s:993    .text:0000064c inc_counter
                           .group:00000000 wm4.0.93d65e4ff05d5af51629690e5b534e57
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.newlib.h.18.5e5ca3429233af402d406a202f1fc1ac
                           .group:00000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:00000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:00000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:00000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:00000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.toolchain_defs.h.2.e5fd326231d01413e5361944b26cde07
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:00000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:00000000 wm4.board_info.h.22.34c159473b0affd9f1a6f5aa8cf576c9
                           .group:00000000 wm4.opendefs.h.23.3a22b672f37c862344b7aef3ebe35451
                           .group:00000000 wm4.cryptoengine.h.8.da068b9149b7576990bbc3b5f1e9b415

UNDEFINED SYMBOLS
memcpy
memcmp
memset
openaes_enc
