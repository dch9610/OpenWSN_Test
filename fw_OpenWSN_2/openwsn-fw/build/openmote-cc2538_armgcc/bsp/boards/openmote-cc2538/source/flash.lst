   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"flash.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.global	FlashMainPageErase
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	FlashMainPageErase:
  23              	.LFB0:
  24              		.file 1 "build\\openmote-cc2538_armgcc\\bsp\\boards\\openmote-cc2538\\source\\flash.c"
   1:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** /******************************************************************************
   2:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  Filename:       flash.c
   3:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  Revised:        $Date: 2013-03-24 14:46:31 +0100 (Sun, 24 Mar 2013) $
   4:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  Revision:       $Revision: 9524 $
   5:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *
   6:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  Description:    Driver for programming the on-chip flash.
   7:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *
   8:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *
  10:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *
  11:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  Redistribution and use in source and binary forms, with or without
  12:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  modification, are permitted provided that the following conditions
  13:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  are met:
  14:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *
  15:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *    Redistributions of source code must retain the above copyright
  16:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *    notice, this list of conditions and the following disclaimer.
  17:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *
  18:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *    documentation and/or other materials provided with the distribution.
  21:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *
  22:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *    its contributors may be used to endorse or promote products derived
  24:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *    from this software without specific prior written permission.
  25:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *
  26:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** *
  38:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** ******************************************************************************/
  39:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
  40:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
  41:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
  42:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \addtogroup flash_api
  43:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! @{
  44:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
  45:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
  46:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
  47:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** #include <headers/hw_flash_ctrl.h>
  48:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** #include <headers/hw_memmap.h>
  49:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** #include "debug.h"
  50:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** #include "flash.h"
  51:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** #include "rom.h"
  52:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
  53:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
  54:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
  55:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! Erases a flash main page with use of ROM function
  56:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
  57:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \param ui32Address is the start address of the flash main page to be erased.
  58:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
  59:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! This function erases one 2 kB main page of the on-chip flash. After
  60:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! erasing, the page is filled with 0xFF bytes. Locked pages cannot be
  61:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! erased. The flash main pages do not include the upper page.
  62:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
  63:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! This function does not return until the page is erased or an error
  64:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! encountered.
  65:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
  66:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \return Returns 0 on success, -1 if erasing error is encountered,
  67:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!         or -2 in case of illegal parameter use.
  68:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
  69:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
  70:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** int32_t
  71:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** FlashMainPageErase(uint32_t ui32Address)
  72:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** {
  25              		.loc 1 72 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 16
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29 0000 80B5     		push	{r7, lr}
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 84B0     		sub	sp, sp, #16
  34              		.cfi_def_cfa_offset 24
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 7860     		str	r0, [r7, #4]
  73:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     int32_t          i32Stat;               // 0 = pass, -1 = fail
  74:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     uint32_t ui32CurrentCacheMode;
  75:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
  76:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     i32Stat = 0;
  38              		.loc 1 76 0
  39 0008 0023     		movs	r3, #0
  40 000a FB60     		str	r3, [r7, #12]
  77:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
  78:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
  79:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Check the arguments.
  80:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
  81:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ASSERT(!(ui32Address < FLASH_BASE));
  82:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ASSERT(!(ui32Address >= (FLASH_BASE + (FlashSizeGet() * 1024) -
  83:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****                              FLASH_ERASE_SIZE)));
  84:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ASSERT(!(ui32Address & (FLASH_ERASE_SIZE - 1)));
  85:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
  86:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
  87:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Save current cache mode since the ROM function will change it.
  88:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
  89:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ui32CurrentCacheMode = FlashCacheModeGet();
  41              		.loc 1 89 0
  42 000c FFF7FEFF 		bl	FlashCacheModeGet
  43 0010 B860     		str	r0, [r7, #8]
  90:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
  91:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
  92:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Erase the specified flash main page by calling ROM function.
  93:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
  94:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     i32Stat = ROM_PageErase(ui32Address, FLASH_ERASE_SIZE);
  44              		.loc 1 94 0
  45 0012 4823     		movs	r3, #72
  46 0014 DB68     		ldr	r3, [r3, #12]
  47 0016 4FF40061 		mov	r1, #2048
  48 001a 7868     		ldr	r0, [r7, #4]
  49 001c 9847     		blx	r3
  50              	.LVL0:
  51 001e F860     		str	r0, [r7, #12]
  95:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
  96:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
  97:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Restore cache mode.
  98:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
  99:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     FlashCacheModeSet(ui32CurrentCacheMode);
  52              		.loc 1 99 0
  53 0020 B868     		ldr	r0, [r7, #8]
  54 0022 FFF7FEFF 		bl	FlashCacheModeSet
 100:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 101:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 102:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Return status pass or fail.
 103:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 104:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     return(i32Stat);
  55              		.loc 1 104 0
  56 0026 FB68     		ldr	r3, [r7, #12]
 105:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** }
  57              		.loc 1 105 0
  58 0028 1846     		mov	r0, r3
  59 002a 1037     		adds	r7, r7, #16
  60              		.cfi_def_cfa_offset 8
  61 002c BD46     		mov	sp, r7
  62              		.cfi_def_cfa_register 13
  63              		@ sp needed
  64 002e 80BD     		pop	{r7, pc}
  65              		.cfi_endproc
  66              	.LFE0:
  68              		.align	1
  69              		.global	FlashUpperPageErase
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  75              	FlashUpperPageErase:
  76              	.LFB1:
 106:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 107:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 108:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 109:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! Erases the upper flash page with use of ROM function
 110:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 111:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! This function erases the 2 kB upper page of the on-chip flash. After
 112:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! erasing, the page is filled with 0xFF bytes. A locked page cannot
 113:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! be erased.
 114:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 115:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! This function does not return until the flash page is erased or
 116:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! an error encountered.
 117:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 118:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \return Returns 0 on success, -1 if erasing error is encountered
 119:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!         or, -2 in case of illegal parameter use.
 120:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 121:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 122:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** int32_t
 123:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** FlashUpperPageErase(void)
 124:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** {
  77              		.loc 1 124 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 16
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81 0030 80B5     		push	{r7, lr}
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 7, -8
  84              		.cfi_offset 14, -4
  85 0032 84B0     		sub	sp, sp, #16
  86              		.cfi_def_cfa_offset 24
  87 0034 00AF     		add	r7, sp, #0
  88              		.cfi_def_cfa_register 7
 125:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     uint32_t ui32UpperPageAddr;
 126:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     uint32_t ui32CurrentCacheMode;
 127:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     int32_t  i32Stat;                  // 0 = pass, -1 = fail, -2 = wrong param
 128:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 129:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     i32Stat = 0;
  89              		.loc 1 129 0
  90 0036 0023     		movs	r3, #0
  91 0038 FB60     		str	r3, [r7, #12]
 130:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 131:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 132:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Find start address of upper flash page
 133:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 134:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ui32UpperPageAddr = FLASH_BASE + (FlashSizeGet() * 1024) - FLASH_ERASE_SIZE;
  92              		.loc 1 134 0
  93 003a FFF7FEFF 		bl	FlashSizeGet
  94 003e 0346     		mov	r3, r0
  95 0040 03F2FE73 		addw	r3, r3, #2046
  96 0044 9B02     		lsls	r3, r3, #10
  97 0046 BB60     		str	r3, [r7, #8]
 135:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 136:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 137:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Save current cache mode since the ROM function will change it.
 138:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 139:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ui32CurrentCacheMode = FlashCacheModeGet();
  98              		.loc 1 139 0
  99 0048 FFF7FEFF 		bl	FlashCacheModeGet
 100 004c 7860     		str	r0, [r7, #4]
 140:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 141:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 142:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Erase the upper flash page by calling ROM function.
 143:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 144:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     i32Stat = ROM_PageErase(ui32UpperPageAddr, FLASH_ERASE_SIZE);
 101              		.loc 1 144 0
 102 004e 4823     		movs	r3, #72
 103 0050 DB68     		ldr	r3, [r3, #12]
 104 0052 4FF40061 		mov	r1, #2048
 105 0056 B868     		ldr	r0, [r7, #8]
 106 0058 9847     		blx	r3
 107              	.LVL1:
 108 005a F860     		str	r0, [r7, #12]
 145:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 146:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 147:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Restore cache mode.
 148:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 149:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     FlashCacheModeSet(ui32CurrentCacheMode);
 109              		.loc 1 149 0
 110 005c 7868     		ldr	r0, [r7, #4]
 111 005e FFF7FEFF 		bl	FlashCacheModeSet
 150:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 151:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 152:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Return status pass or fail.
 153:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 154:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     return(i32Stat);
 112              		.loc 1 154 0
 113 0062 FB68     		ldr	r3, [r7, #12]
 155:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** }
 114              		.loc 1 155 0
 115 0064 1846     		mov	r0, r3
 116 0066 1037     		adds	r7, r7, #16
 117              		.cfi_def_cfa_offset 8
 118 0068 BD46     		mov	sp, r7
 119              		.cfi_def_cfa_register 13
 120              		@ sp needed
 121 006a 80BD     		pop	{r7, pc}
 122              		.cfi_endproc
 123              	.LFE1:
 125              		.align	1
 126              		.global	FlashMainPageProgram
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu softvfp
 132              	FlashMainPageProgram:
 133              	.LFB2:
 156:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 157:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 158:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 159:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! Programs the flash main pages by use of ROM function
 160:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 161:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \param pui32Data is a pointer to the data to be programmed.
 162:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \param ui32Address is the starting address in flash to be programmed. Must
 163:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! be a multiple of four and within the flash main pages.
 164:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \param ui32Count is the number of bytes to be programmed. Must be a multiple
 165:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! of four.
 166:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 167:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! This function programs a sequence of words into the on-chip flash.
 168:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! Programming each location consists of the result of an AND operation
 169:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! of the new data and the existing data; in other words, bits that contain
 170:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! 1 can remain 1 or be changed to 0, but bits that are 0 cannot be changed
 171:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! to 1. Therefore, a word can be programmed multiple times as long as these
 172:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! rules are followed; if a program operation attempts to change a 0 bit to
 173:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! a 1 bit, that bit will not have its value changed.
 174:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 175:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! Because the flash is programmed one word at a time, the starting address and
 176:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! byte count must both be multiples of four. The caller must
 177:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! verify the programmed contents, if verification is required.
 178:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 179:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! This function does not return until the data is programmed or an
 180:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! error encountered. Locked flash pages cannot be programmed.
 181:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 182:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \return Returns 0 on success, -1 if a programming error is encountered
 183:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!         or, -2 in case of illegal parameter use.
 184:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 185:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 186:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** int32_t
 187:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** FlashMainPageProgram(uint32_t *pui32Data, uint32_t ui32Address,
 188:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****                      uint32_t ui32Count)
 189:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** {
 134              		.loc 1 189 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 24
 137              		@ frame_needed = 1, uses_anonymous_args = 0
 138 006c 80B5     		push	{r7, lr}
 139              		.cfi_def_cfa_offset 8
 140              		.cfi_offset 7, -8
 141              		.cfi_offset 14, -4
 142 006e 86B0     		sub	sp, sp, #24
 143              		.cfi_def_cfa_offset 32
 144 0070 00AF     		add	r7, sp, #0
 145              		.cfi_def_cfa_register 7
 146 0072 F860     		str	r0, [r7, #12]
 147 0074 B960     		str	r1, [r7, #8]
 148 0076 7A60     		str	r2, [r7, #4]
 190:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     uint32_t ui32CurrentCacheMode;
 191:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     int32_t  i32Stat;     // 0 = pass, -1 = fail, -2 = wrong param
 192:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 193:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     i32Stat = 0;            // Start out passing
 149              		.loc 1 193 0
 150 0078 0023     		movs	r3, #0
 151 007a 7B61     		str	r3, [r7, #20]
 194:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 195:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 196:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Check the arguments.
 197:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 198:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ASSERT(!(ui32Address             < FLASH_BASE));
 199:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ASSERT(!((ui32Address + ui32Count) > (FLASH_BASE + (FlashSizeGet() * 1024) -
 200:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****                                           FLASH_ERASE_SIZE)));
 201:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ASSERT(!(ui32Address & 3));
 202:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ASSERT(!(ui32Count   & 3));
 203:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 204:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 205:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Save current cache mode since the ROM function will change it.
 206:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 207:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ui32CurrentCacheMode = FlashCacheModeGet();
 152              		.loc 1 207 0
 153 007c FFF7FEFF 		bl	FlashCacheModeGet
 154 0080 3861     		str	r0, [r7, #16]
 208:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 209:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 210:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Program flash by executing function in ROM.
 211:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 212:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     i32Stat = ROM_ProgramFlash(pui32Data, ui32Address, ui32Count);
 155              		.loc 1 212 0
 156 0082 4823     		movs	r3, #72
 157 0084 1B69     		ldr	r3, [r3, #16]
 158 0086 7A68     		ldr	r2, [r7, #4]
 159 0088 B968     		ldr	r1, [r7, #8]
 160 008a F868     		ldr	r0, [r7, #12]
 161 008c 9847     		blx	r3
 162              	.LVL2:
 163 008e 7861     		str	r0, [r7, #20]
 213:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 214:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 215:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Restore cache mode.
 216:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 217:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     FlashCacheModeSet(ui32CurrentCacheMode);
 164              		.loc 1 217 0
 165 0090 3869     		ldr	r0, [r7, #16]
 166 0092 FFF7FEFF 		bl	FlashCacheModeSet
 218:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 219:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 220:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Return status pass or fail.
 221:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 222:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     return(i32Stat);
 167              		.loc 1 222 0
 168 0096 7B69     		ldr	r3, [r7, #20]
 223:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** }
 169              		.loc 1 223 0
 170 0098 1846     		mov	r0, r3
 171 009a 1837     		adds	r7, r7, #24
 172              		.cfi_def_cfa_offset 8
 173 009c BD46     		mov	sp, r7
 174              		.cfi_def_cfa_register 13
 175              		@ sp needed
 176 009e 80BD     		pop	{r7, pc}
 177              		.cfi_endproc
 178              	.LFE2:
 180              		.align	1
 181              		.global	FlashUpperPageProgram
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu softvfp
 187              	FlashUpperPageProgram:
 188              	.LFB3:
 224:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 225:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 226:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 227:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! Programs the upper page of the flash by use of ROM function
 228:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 229:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \param pui32Data is a pointer to the data to be programmed.
 230:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \param ui32Address is the starting address within the flash upper page to be
 231:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! programmed. Must be a multiple of four and within the flash upper page.
 232:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \param ui32Count is the number of bytes to be programmed.  Must be a multiple
 233:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! of four.
 234:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 235:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! This function programs a sequence of words into the on-chip flash.
 236:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! Programming each location consists of the result of an AND operation
 237:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! of the new data and the existing data; in other words, bits that contain
 238:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! 1 can remain 1 or be changed to 0, but bits that are 0 cannot be changed
 239:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! to 1. Therefore, a word can be programmed multiple times as long as these
 240:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! rules are followed; if a program operation attempts to change a 0 bit to
 241:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! a 1 bit, that bit will not have its value changed.
 242:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 243:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! Because the flash is programmed one word at a time, the starting address and
 244:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! byte count must both be multiples of four. The caller must
 245:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! verify the programmed contents, if such verification is required.
 246:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 247:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! This function does not return until the data is programmed or an
 248:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! error encountered. A locked flash page cannot be programmed.
 249:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 250:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \return Returns 0 on success, -1 if a programming error is encountered
 251:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!         or, -2 in case of illegal parameter use.
 252:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 253:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 254:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** int32_t
 255:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** FlashUpperPageProgram(uint32_t *pui32Data, uint32_t ui32Address,
 256:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****                       uint32_t ui32Count)
 257:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** {
 189              		.loc 1 257 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 24
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193 00a0 80B5     		push	{r7, lr}
 194              		.cfi_def_cfa_offset 8
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197 00a2 86B0     		sub	sp, sp, #24
 198              		.cfi_def_cfa_offset 32
 199 00a4 00AF     		add	r7, sp, #0
 200              		.cfi_def_cfa_register 7
 201 00a6 F860     		str	r0, [r7, #12]
 202 00a8 B960     		str	r1, [r7, #8]
 203 00aa 7A60     		str	r2, [r7, #4]
 258:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     uint32_t ui32CurrentCacheMode;
 259:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     int32_t  i32Stat;                // 0 = pass, -1 = fail, -2 = wrong param
 260:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 261:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     i32Stat = 0;                     // Start out passing
 204              		.loc 1 261 0
 205 00ac 0023     		movs	r3, #0
 206 00ae 7B61     		str	r3, [r7, #20]
 262:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 263:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 264:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Check the arguments.
 265:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 266:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ASSERT(!(ui32Address < (FLASH_BASE + (FlashSizeGet() * 1024) -
 267:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****                             FLASH_ERASE_SIZE)));
 268:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ASSERT(!((ui32Address + ui32Count) > (FLASH_BASE +
 269:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****                                           (FlashSizeGet() * 1024))));
 270:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ASSERT(!(ui32Address & 3));
 271:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ASSERT(!(ui32Count   & 3));
 272:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 273:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 274:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Save current cache mode since the ROM function will change it.
 275:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 276:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ui32CurrentCacheMode = FlashCacheModeGet();
 207              		.loc 1 276 0
 208 00b0 FFF7FEFF 		bl	FlashCacheModeGet
 209 00b4 3861     		str	r0, [r7, #16]
 277:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 278:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 279:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Program flash by executing function in ROM.
 280:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 281:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     i32Stat = ROM_ProgramFlash(pui32Data, ui32Address, ui32Count);
 210              		.loc 1 281 0
 211 00b6 4823     		movs	r3, #72
 212 00b8 1B69     		ldr	r3, [r3, #16]
 213 00ba 7A68     		ldr	r2, [r7, #4]
 214 00bc B968     		ldr	r1, [r7, #8]
 215 00be F868     		ldr	r0, [r7, #12]
 216 00c0 9847     		blx	r3
 217              	.LVL3:
 218 00c2 7861     		str	r0, [r7, #20]
 282:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 283:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 284:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Clear flash controller register bit set by ROM function.
 285:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 286:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     HWREG(FLASH_CTRL_FCTL) &= (~FLASH_CTRL_FCTL_UPPER_PAGE_ACCESS);
 219              		.loc 1 286 0
 220 00c4 064B     		ldr	r3, .L9
 221 00c6 1B68     		ldr	r3, [r3]
 222 00c8 054A     		ldr	r2, .L9
 223 00ca 23F40073 		bic	r3, r3, #512
 224 00ce 1360     		str	r3, [r2]
 287:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 288:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 289:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Restore cache mode.
 290:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 291:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     FlashCacheModeSet(ui32CurrentCacheMode);
 225              		.loc 1 291 0
 226 00d0 3869     		ldr	r0, [r7, #16]
 227 00d2 FFF7FEFF 		bl	FlashCacheModeSet
 292:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 293:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 294:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Return status pass or fail.
 295:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 296:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     return(i32Stat);
 228              		.loc 1 296 0
 229 00d6 7B69     		ldr	r3, [r7, #20]
 297:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** }
 230              		.loc 1 297 0
 231 00d8 1846     		mov	r0, r3
 232 00da 1837     		adds	r7, r7, #24
 233              		.cfi_def_cfa_offset 8
 234 00dc BD46     		mov	sp, r7
 235              		.cfi_def_cfa_register 13
 236              		@ sp needed
 237 00de 80BD     		pop	{r7, pc}
 238              	.L10:
 239              		.align	2
 240              	.L9:
 241 00e0 08300D40 		.word	1074606088
 242              		.cfi_endproc
 243              	.LFE3:
 245              		.align	1
 246              		.global	FlashGet
 247              		.syntax unified
 248              		.thumb
 249              		.thumb_func
 250              		.fpu softvfp
 252              	FlashGet:
 253              	.LFB4:
 298:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 299:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 300:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 301:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! Gets the current contents of the flash at the designated address
 302:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 303:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \param ui32Addr is the desired address to be read within the flash.
 304:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 305:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! This function helps differentiate flash memory reads from flash
 306:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! register reads.
 307:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 308:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \return Returns the 32bit value as an uint32_t value.
 309:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 310:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 311:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** uint32_t
 312:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** FlashGet(uint32_t ui32Addr)
 313:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** {
 254              		.loc 1 313 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 8
 257              		@ frame_needed = 1, uses_anonymous_args = 0
 258              		@ link register save eliminated.
 259 00e4 80B4     		push	{r7}
 260              		.cfi_def_cfa_offset 4
 261              		.cfi_offset 7, -4
 262 00e6 83B0     		sub	sp, sp, #12
 263              		.cfi_def_cfa_offset 16
 264 00e8 00AF     		add	r7, sp, #0
 265              		.cfi_def_cfa_register 7
 266 00ea 7860     		str	r0, [r7, #4]
 314:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     return(HWREG(ui32Addr));
 267              		.loc 1 314 0
 268 00ec 7B68     		ldr	r3, [r7, #4]
 269 00ee 1B68     		ldr	r3, [r3]
 315:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** }
 270              		.loc 1 315 0
 271 00f0 1846     		mov	r0, r3
 272 00f2 0C37     		adds	r7, r7, #12
 273              		.cfi_def_cfa_offset 4
 274 00f4 BD46     		mov	sp, r7
 275              		.cfi_def_cfa_register 13
 276              		@ sp needed
 277 00f6 80BC     		pop	{r7}
 278              		.cfi_restore 7
 279              		.cfi_def_cfa_offset 0
 280 00f8 7047     		bx	lr
 281              		.cfi_endproc
 282              	.LFE4:
 284              		.align	1
 285              		.global	FlashCacheModeGet
 286              		.syntax unified
 287              		.thumb
 288              		.thumb_func
 289              		.fpu softvfp
 291              	FlashCacheModeGet:
 292              	.LFB5:
 316:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 317:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 318:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 319:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! Gets the current state of the flash Cache Mode
 320:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 321:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! This function gets the current setting for the Cache Mode.
 322:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 323:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \return Returns the CM bits. Return value should match one of the
 324:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! FLASH_CACHE_MODE_<> macros defined in flash.h.
 325:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 326:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 327:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** uint32_t
 328:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** FlashCacheModeGet(void)
 329:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** {
 293              		.loc 1 329 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297              		@ link register save eliminated.
 298 00fa 80B4     		push	{r7}
 299              		.cfi_def_cfa_offset 4
 300              		.cfi_offset 7, -4
 301 00fc 00AF     		add	r7, sp, #0
 302              		.cfi_def_cfa_register 7
 330:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 331:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Return a FLASH_CACHE_MODE_<> macro value.
 332:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 333:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     return(HWREG(FLASH_CTRL_FCTL) & FLASH_CTRL_FCTL_CM_M);
 303              		.loc 1 333 0
 304 00fe 044B     		ldr	r3, .L15
 305 0100 1B68     		ldr	r3, [r3]
 306 0102 03F00C03 		and	r3, r3, #12
 334:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** }
 307              		.loc 1 334 0
 308 0106 1846     		mov	r0, r3
 309 0108 BD46     		mov	sp, r7
 310              		.cfi_def_cfa_register 13
 311              		@ sp needed
 312 010a 80BC     		pop	{r7}
 313              		.cfi_restore 7
 314              		.cfi_def_cfa_offset 0
 315 010c 7047     		bx	lr
 316              	.L16:
 317 010e 00BF     		.align	2
 318              	.L15:
 319 0110 08300D40 		.word	1074606088
 320              		.cfi_endproc
 321              	.LFE5:
 323              		.align	1
 324              		.global	FlashCacheModeSet
 325              		.syntax unified
 326              		.thumb
 327              		.thumb_func
 328              		.fpu softvfp
 330              	FlashCacheModeSet:
 331              	.LFB6:
 335:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 336:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 337:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 338:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! Sets the flash Cache Mode state
 339:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 340:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \param ui32CacheMode is the desired cache mode.
 341:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 342:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! This function sets the flash Cache Mode to the desired state and accepts
 343:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! a right justified 2 bit setting for the Cachemode bits. The function waits
 344:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! for the flash to be idle, reads the FCTL register contents, masks in the
 345:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! requested setting, and writes it into the FCTL register.
 346:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 347:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! The parameter \e ui32CacheMode can have one of the following values:
 348:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 349:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! - \b FLASH_CTRL_CACHE_MODE_DISABLE
 350:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! - \b FLASH_CTRL_CACHE_MODE_ENABLE
 351:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! - \b FLASH_CTRL_CACHE_MODE_PREFETCH_ENABLE
 352:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! - \b FLASH_CTRL_CACHE_MODE_REALTIME
 353:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 354:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \return None
 355:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 356:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 357:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** void
 358:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** FlashCacheModeSet(uint32_t ui32CacheMode)
 359:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** {
 332              		.loc 1 359 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 16
 335              		@ frame_needed = 1, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 337 0114 80B4     		push	{r7}
 338              		.cfi_def_cfa_offset 4
 339              		.cfi_offset 7, -4
 340 0116 85B0     		sub	sp, sp, #20
 341              		.cfi_def_cfa_offset 24
 342 0118 00AF     		add	r7, sp, #0
 343              		.cfi_def_cfa_register 7
 344 011a 7860     		str	r0, [r7, #4]
 360:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     uint32_t ui32Busy;
 361:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     uint32_t ui32TempValue;
 362:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 363:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 364:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Check the arguments.
 365:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 366:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ASSERT((ui32CacheMode == FLASH_CTRL_CACHE_MODE_DISABLE) ||
 367:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****            (ui32CacheMode == FLASH_CTRL_CACHE_MODE_ENABLE) ||
 368:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****            (ui32CacheMode == FLASH_CTRL_CACHE_MODE_PREFETCH_ENABLE) ||
 369:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****            (ui32CacheMode == FLASH_CTRL_CACHE_MODE_REALTIME));
 370:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 371:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 372:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Wait until FLASH is not busy.
 373:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 374:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ui32Busy = 1;
 345              		.loc 1 374 0
 346 011c 0123     		movs	r3, #1
 347 011e FB60     		str	r3, [r7, #12]
 375:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     while(ui32Busy)
 348              		.loc 1 375 0
 349 0120 06E0     		b	.L18
 350              	.L19:
 376:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     {
 377:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         ui32TempValue = HWREG(FLASH_CTRL_FCTL);
 351              		.loc 1 377 0
 352 0122 0C4B     		ldr	r3, .L20
 353 0124 1B68     		ldr	r3, [r3]
 354 0126 BB60     		str	r3, [r7, #8]
 378:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         ui32Busy      = ui32TempValue & FLASH_CTRL_FCTL_BUSY;
 355              		.loc 1 378 0
 356 0128 BB68     		ldr	r3, [r7, #8]
 357 012a 03F08003 		and	r3, r3, #128
 358 012e FB60     		str	r3, [r7, #12]
 359              	.L18:
 375:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     while(ui32Busy)
 360              		.loc 1 375 0
 361 0130 FB68     		ldr	r3, [r7, #12]
 362 0132 002B     		cmp	r3, #0
 363 0134 F5D1     		bne	.L19
 379:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     }
 380:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 381:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 382:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     // Set desired cache mode.
 383:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     //
 384:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ui32TempValue           &= ~FLASH_CTRL_FCTL_CM_M;
 364              		.loc 1 384 0
 365 0136 BB68     		ldr	r3, [r7, #8]
 366 0138 23F00C03 		bic	r3, r3, #12
 367 013c BB60     		str	r3, [r7, #8]
 385:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     HWREG(FLASH_CTRL_FCTL) = ui32TempValue | ui32CacheMode;
 368              		.loc 1 385 0
 369 013e 0549     		ldr	r1, .L20
 370 0140 BA68     		ldr	r2, [r7, #8]
 371 0142 7B68     		ldr	r3, [r7, #4]
 372 0144 1343     		orrs	r3, r3, r2
 373 0146 0B60     		str	r3, [r1]
 386:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** }
 374              		.loc 1 386 0
 375 0148 00BF     		nop
 376 014a 1437     		adds	r7, r7, #20
 377              		.cfi_def_cfa_offset 4
 378 014c BD46     		mov	sp, r7
 379              		.cfi_def_cfa_register 13
 380              		@ sp needed
 381 014e 80BC     		pop	{r7}
 382              		.cfi_restore 7
 383              		.cfi_def_cfa_offset 0
 384 0150 7047     		bx	lr
 385              	.L21:
 386 0152 00BF     		.align	2
 387              	.L20:
 388 0154 08300D40 		.word	1074606088
 389              		.cfi_endproc
 390              	.LFE6:
 392              		.align	1
 393              		.global	FlashSizeGet
 394              		.syntax unified
 395              		.thumb
 396              		.thumb_func
 397              		.fpu softvfp
 399              	FlashSizeGet:
 400              	.LFB7:
 387:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 388:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 389:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 390:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! Returns the flash size in number of KBytes
 391:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 392:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! This function returns the size of the flash in KBytes as determined by
 393:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! examining the FLASH_DIECFG0 register settings.
 394:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 395:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \return Returns the flash size in KBytes
 396:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 397:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 398:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** uint32_t
 399:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** FlashSizeGet(void)
 400:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** {
 401              		.loc 1 400 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 8
 404              		@ frame_needed = 1, uses_anonymous_args = 0
 405              		@ link register save eliminated.
 406 0158 80B4     		push	{r7}
 407              		.cfi_def_cfa_offset 4
 408              		.cfi_offset 7, -4
 409 015a 83B0     		sub	sp, sp, #12
 410              		.cfi_def_cfa_offset 16
 411 015c 00AF     		add	r7, sp, #0
 412              		.cfi_def_cfa_register 7
 401:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     uint32_t ui32RegValue;
 402:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     uint32_t ui32Size;
 403:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 404:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ui32RegValue = HWREG(FLASH_CTRL_DIECFG0);
 413              		.loc 1 404 0
 414 015e 1A4B     		ldr	r3, .L32
 415 0160 1B68     		ldr	r3, [r3]
 416 0162 3B60     		str	r3, [r7]
 405:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ui32RegValue = (ui32RegValue & FLASH_CTRL_DIECFG0_FLASH_SIZE_M) >>
 417              		.loc 1 405 0
 418 0164 3B68     		ldr	r3, [r7]
 419 0166 1B09     		lsrs	r3, r3, #4
 420 0168 03F00703 		and	r3, r3, #7
 421 016c 3B60     		str	r3, [r7]
 406:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****                    FLASH_CTRL_DIECFG0_FLASH_SIZE_S;
 407:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 408:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     switch(ui32RegValue)
 422              		.loc 1 408 0
 423 016e 3B68     		ldr	r3, [r7]
 424 0170 042B     		cmp	r3, #4
 425 0172 1FD8     		bhi	.L23
 426 0174 01A2     		adr	r2, .L25
 427 0176 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 428 017a 00BF     		.p2align 2
 429              	.L25:
 430 017c AF010000 		.word	.L24+1
 431 0180 A9010000 		.word	.L26+1
 432 0184 A1010000 		.word	.L27+1
 433 0188 99010000 		.word	.L28+1
 434 018c 91010000 		.word	.L29+1
 435              		.p2align 1
 436              	.L29:
 409:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     {
 410:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     case 0x04:
 411:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         ui32Size = 512;
 437              		.loc 1 411 0
 438 0190 4FF40073 		mov	r3, #512
 439 0194 7B60     		str	r3, [r7, #4]
 412:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         break;
 440              		.loc 1 412 0
 441 0196 10E0     		b	.L30
 442              	.L28:
 413:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     case 0x03:
 414:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         ui32Size = 384;
 443              		.loc 1 414 0
 444 0198 4FF4C073 		mov	r3, #384
 445 019c 7B60     		str	r3, [r7, #4]
 415:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         break;
 446              		.loc 1 415 0
 447 019e 0CE0     		b	.L30
 448              	.L27:
 416:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     case 0x02:
 417:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         ui32Size = 256;
 449              		.loc 1 417 0
 450 01a0 4FF48073 		mov	r3, #256
 451 01a4 7B60     		str	r3, [r7, #4]
 418:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         break;
 452              		.loc 1 418 0
 453 01a6 08E0     		b	.L30
 454              	.L26:
 419:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     case 0x01:
 420:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         ui32Size = 128;
 455              		.loc 1 420 0
 456 01a8 8023     		movs	r3, #128
 457 01aa 7B60     		str	r3, [r7, #4]
 421:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         break;
 458              		.loc 1 421 0
 459 01ac 05E0     		b	.L30
 460              	.L24:
 422:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     case 0x00:
 423:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         ui32Size =  64;
 461              		.loc 1 423 0
 462 01ae 4023     		movs	r3, #64
 463 01b0 7B60     		str	r3, [r7, #4]
 424:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         break;
 464              		.loc 1 424 0
 465 01b2 02E0     		b	.L30
 466              	.L23:
 425:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     default:
 426:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         ui32Size =  64;
 467              		.loc 1 426 0
 468 01b4 4023     		movs	r3, #64
 469 01b6 7B60     		str	r3, [r7, #4]
 427:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         break;
 470              		.loc 1 427 0
 471 01b8 00BF     		nop
 472              	.L30:
 428:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     }
 429:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     return(ui32Size);
 473              		.loc 1 429 0
 474 01ba 7B68     		ldr	r3, [r7, #4]
 430:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** }
 475              		.loc 1 430 0
 476 01bc 1846     		mov	r0, r3
 477 01be 0C37     		adds	r7, r7, #12
 478              		.cfi_def_cfa_offset 4
 479 01c0 BD46     		mov	sp, r7
 480              		.cfi_def_cfa_register 13
 481              		@ sp needed
 482 01c2 80BC     		pop	{r7}
 483              		.cfi_restore 7
 484              		.cfi_def_cfa_offset 0
 485 01c4 7047     		bx	lr
 486              	.L33:
 487 01c6 00BF     		.align	2
 488              	.L32:
 489 01c8 14300D40 		.word	1074606100
 490              		.cfi_endproc
 491              	.LFE7:
 493              		.align	1
 494              		.global	FlashSramSizeGet
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 498              		.fpu softvfp
 500              	FlashSramSizeGet:
 501              	.LFB8:
 431:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 432:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 433:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 434:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! Returns the SRAM size in number of KBytes
 435:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 436:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! This function returns the size of the SRAM in KBytes as determined by
 437:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! examining the FLASH_DIECFG0 register settings.
 438:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //!
 439:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //! \return Returns the SRAM size in KBytes
 440:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //
 441:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** //*****************************************************************************
 442:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** uint32_t
 443:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** FlashSramSizeGet(void)
 444:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** {
 502              		.loc 1 444 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 8
 505              		@ frame_needed = 1, uses_anonymous_args = 0
 506              		@ link register save eliminated.
 507 01cc 80B4     		push	{r7}
 508              		.cfi_def_cfa_offset 4
 509              		.cfi_offset 7, -4
 510 01ce 83B0     		sub	sp, sp, #12
 511              		.cfi_def_cfa_offset 16
 512 01d0 00AF     		add	r7, sp, #0
 513              		.cfi_def_cfa_register 7
 445:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     uint32_t ui32RegValue;
 446:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     uint32_t ui32Size;
 447:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 448:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ui32RegValue = HWREG(FLASH_CTRL_DIECFG0);
 514              		.loc 1 448 0
 515 01d2 104B     		ldr	r3, .L42
 516 01d4 1B68     		ldr	r3, [r3]
 517 01d6 3B60     		str	r3, [r7]
 449:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     ui32RegValue = (ui32RegValue & FLASH_CTRL_DIECFG0_SRAM_SIZE_M) >>
 518              		.loc 1 449 0
 519 01d8 3B68     		ldr	r3, [r7]
 520 01da DB09     		lsrs	r3, r3, #7
 521 01dc 03F00703 		and	r3, r3, #7
 522 01e0 3B60     		str	r3, [r7]
 450:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****                    FLASH_CTRL_DIECFG0_SRAM_SIZE_S;
 451:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** 
 452:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     switch(ui32RegValue)
 523              		.loc 1 452 0
 524 01e2 3B68     		ldr	r3, [r7]
 525 01e4 012B     		cmp	r3, #1
 526 01e6 06D0     		beq	.L36
 527 01e8 012B     		cmp	r3, #1
 528 01ea 07D3     		bcc	.L37
 529 01ec 042B     		cmp	r3, #4
 530 01ee 08D1     		bne	.L41
 453:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     {
 454:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     case 0x04:
 455:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         ui32Size = 32;
 531              		.loc 1 455 0
 532 01f0 2023     		movs	r3, #32
 533 01f2 7B60     		str	r3, [r7, #4]
 456:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         break;
 534              		.loc 1 456 0
 535 01f4 08E0     		b	.L39
 536              	.L36:
 457:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     case 0x01:
 458:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         ui32Size =  8;
 537              		.loc 1 458 0
 538 01f6 0823     		movs	r3, #8
 539 01f8 7B60     		str	r3, [r7, #4]
 459:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         break;
 540              		.loc 1 459 0
 541 01fa 05E0     		b	.L39
 542              	.L37:
 460:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     case 0x00:
 461:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         ui32Size = 16;
 543              		.loc 1 461 0
 544 01fc 1023     		movs	r3, #16
 545 01fe 7B60     		str	r3, [r7, #4]
 462:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         break;
 546              		.loc 1 462 0
 547 0200 02E0     		b	.L39
 548              	.L41:
 463:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     default:
 464:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         ui32Size = 32;
 549              		.loc 1 464 0
 550 0202 2023     		movs	r3, #32
 551 0204 7B60     		str	r3, [r7, #4]
 465:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****         break;
 552              		.loc 1 465 0
 553 0206 00BF     		nop
 554              	.L39:
 466:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     }
 467:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c ****     return(ui32Size);
 555              		.loc 1 467 0
 556 0208 7B68     		ldr	r3, [r7, #4]
 468:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/flash.c **** }
 557              		.loc 1 468 0
 558 020a 1846     		mov	r0, r3
 559 020c 0C37     		adds	r7, r7, #12
 560              		.cfi_def_cfa_offset 4
 561 020e BD46     		mov	sp, r7
 562              		.cfi_def_cfa_register 13
 563              		@ sp needed
 564 0210 80BC     		pop	{r7}
 565              		.cfi_restore 7
 566              		.cfi_def_cfa_offset 0
 567 0212 7047     		bx	lr
 568              	.L43:
 569              		.align	2
 570              	.L42:
 571 0214 14300D40 		.word	1074606100
 572              		.cfi_endproc
 573              	.LFE8:
 575              	.Letext0:
 576              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 577              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 578              		.file 4 "build\\openmote-cc2538_armgcc\\bsp\\boards\\openmote-cc2538\\source\\rom.h"
DEFINED SYMBOLS
                            *ABS*:00000000 flash.c
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:15     .text:00000000 $t
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:22     .text:00000000 FlashMainPageErase
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:291    .text:000000fa FlashCacheModeGet
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:330    .text:00000114 FlashCacheModeSet
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:75     .text:00000030 FlashUpperPageErase
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:399    .text:00000158 FlashSizeGet
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:132    .text:0000006c FlashMainPageProgram
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:187    .text:000000a0 FlashUpperPageProgram
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:241    .text:000000e0 $d
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:245    .text:000000e4 $t
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:252    .text:000000e4 FlashGet
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:319    .text:00000110 $d
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:323    .text:00000114 $t
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:388    .text:00000154 $d
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:392    .text:00000158 $t
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:430    .text:0000017c $d
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:435    .text:00000190 $t
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:489    .text:000001c8 $d
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:493    .text:000001cc $t
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:500    .text:000001cc FlashSramSizeGet
C:\Users\Lee\AppData\Local\Temp\ccSNpbLj.s:571    .text:00000214 $d
                           .group:00000000 wm4.0.93d65e4ff05d5af51629690e5b534e57
                           .group:00000000 wm4.hw_flash_ctrl.h.39.9e1b51558015e13f8d9f8700e513c4a2
                           .group:00000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:00000000 wm4.flash.h.41.1b4c606036d8f71c3434e1ed199afc8d
                           .group:00000000 wm4.rom.h.41.9256dfbd546483c9c9bbf100fc16f7e4

NO UNDEFINED SYMBOLS
