   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"gpio.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.global	GPIOGetIntNumber
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	GPIOGetIntNumber:
  23              	.LFB0:
  24              		.file 1 "build\\openmote-cc2538_armgcc\\bsp\\boards\\openmote-cc2538\\source\\gpio.c"
   1:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** /******************************************************************************
   2:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  Filename:       gpio.c
   3:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  Revised:        $Date: 2013-04-29 09:36:44 +0200 (Mon, 29 Apr 2013) $
   4:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  Revision:       $Revision: 9922 $
   5:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *
   6:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  Description:    Driver for the GPIO controller.
   7:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *
   8:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *
  10:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *
  11:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  Redistribution and use in source and binary forms, with or without
  12:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  modification, are permitted provided that the following conditions
  13:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  are met:
  14:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *
  15:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *    Redistributions of source code must retain the above copyright
  16:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *    notice, this list of conditions and the following disclaimer.
  17:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *
  18:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *    documentation and/or other materials provided with the distribution.
  21:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *
  22:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *    its contributors may be used to endorse or promote products derived
  24:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *    from this software without specific prior written permission.
  25:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *
  26:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** *
  38:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** ******************************************************************************/
  39:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
  40:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
  41:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
  42:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \addtogroup gpio_api
  43:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! @{
  44:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
  45:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
  46:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
  47:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** #include <headers/hw_gpio.h>
  48:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** #include <headers/hw_ints.h>
  49:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** #include <headers/hw_memmap.h>
  50:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** #include <headers/hw_sys_ctrl.h>
  51:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** #include "debug.h"
  52:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** #include "gpio.h"
  53:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** #include "interrupt.h"
  54:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** #include "ioc.h"
  55:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
  56:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
  57:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
  58:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \internal
  59:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Checks a GPIO base address
  60:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
  61:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
  62:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
  63:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! This function determines if a GPIO port base address is valid.
  64:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
  65:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return Returns \b true if the base address is valid and \b false
  66:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! otherwise.
  67:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
  68:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
  69:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** #ifdef ENABLE_ASSERT
  70:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** static bool
  71:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOBaseValid(uint32_t ui32Port)
  72:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
  73:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     return((ui32Port == GPIO_A_BASE) || (ui32Port == GPIO_B_BASE) ||
  74:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****            (ui32Port == GPIO_C_BASE) || (ui32Port == GPIO_D_BASE));
  75:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
  76:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** #endif
  77:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
  78:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
  79:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
  80:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \internal
  81:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Gets the GPIO interrupt number
  82:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
  83:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
  84:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
  85:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Given a GPIO base address, returns the corresponding interrupt number.
  86:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
  87:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return Returns a GPIO interrupt number, or 0 if \e ui32Port is invalid.
  88:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
  89:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
  90:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** uint32_t
  91:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOGetIntNumber(uint32_t ui32Port)
  92:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
  25              		.loc 1 92 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 16
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 80B4     		push	{r7}
  31              		.cfi_def_cfa_offset 4
  32              		.cfi_offset 7, -4
  33 0002 85B0     		sub	sp, sp, #20
  34              		.cfi_def_cfa_offset 24
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 7860     		str	r0, [r7, #4]
  93:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32Int;
  94:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
  95:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
  96:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
  97:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
  98:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
  99:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 100:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 101:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Determine the GPIO interrupt number for the given module.
 102:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 103:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     switch(ui32Port)
  38              		.loc 1 103 0
  39 0008 7B68     		ldr	r3, [r7, #4]
  40 000a 124A     		ldr	r2, .L10
  41 000c 9342     		cmp	r3, r2
  42 000e 10D0     		beq	.L3
  43 0010 104A     		ldr	r2, .L10
  44 0012 9342     		cmp	r3, r2
  45 0014 03D8     		bhi	.L4
  46 0016 104A     		ldr	r2, .L10+4
  47 0018 9342     		cmp	r3, r2
  48 001a 07D0     		beq	.L5
  49 001c 12E0     		b	.L2
  50              	.L4:
  51 001e 0F4A     		ldr	r2, .L10+8
  52 0020 9342     		cmp	r3, r2
  53 0022 09D0     		beq	.L6
  54 0024 0E4A     		ldr	r2, .L10+12
  55 0026 9342     		cmp	r3, r2
  56 0028 09D0     		beq	.L7
  57 002a 0BE0     		b	.L2
  58              	.L5:
 104:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
 105:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     case GPIO_A_BASE:
 106:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
 107:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32Int = INT_GPIOA;
  59              		.loc 1 107 0
  60 002c 1023     		movs	r3, #16
  61 002e FB60     		str	r3, [r7, #12]
 108:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         break;
  62              		.loc 1 108 0
  63 0030 0AE0     		b	.L8
  64              	.L3:
 109:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 110:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 111:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     case GPIO_B_BASE:
 112:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
 113:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32Int = INT_GPIOB;
  65              		.loc 1 113 0
  66 0032 1123     		movs	r3, #17
  67 0034 FB60     		str	r3, [r7, #12]
 114:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         break;
  68              		.loc 1 114 0
  69 0036 07E0     		b	.L8
  70              	.L6:
 115:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 116:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 117:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     case GPIO_C_BASE:
 118:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
 119:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32Int = INT_GPIOC;
  71              		.loc 1 119 0
  72 0038 1223     		movs	r3, #18
  73 003a FB60     		str	r3, [r7, #12]
 120:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         break;
  74              		.loc 1 120 0
  75 003c 04E0     		b	.L8
  76              	.L7:
 121:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 122:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 123:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     case GPIO_D_BASE:
 124:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
 125:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32Int = INT_GPIOD;
  77              		.loc 1 125 0
  78 003e 1323     		movs	r3, #19
  79 0040 FB60     		str	r3, [r7, #12]
 126:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         break;
  80              		.loc 1 126 0
  81 0042 01E0     		b	.L8
  82              	.L2:
 127:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 128:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 129:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     default:
 130:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
 131:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         return(0);
  83              		.loc 1 131 0
  84 0044 0023     		movs	r3, #0
  85 0046 00E0     		b	.L9
  86              	.L8:
 132:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 133:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 134:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 135:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 136:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Return GPIO interrupt number.
 137:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 138:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     return(ui32Int);
  87              		.loc 1 138 0
  88 0048 FB68     		ldr	r3, [r7, #12]
  89              	.L9:
 139:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
  90              		.loc 1 139 0
  91 004a 1846     		mov	r0, r3
  92 004c 1437     		adds	r7, r7, #20
  93              		.cfi_def_cfa_offset 4
  94 004e BD46     		mov	sp, r7
  95              		.cfi_def_cfa_register 13
  96              		@ sp needed
  97 0050 80BC     		pop	{r7}
  98              		.cfi_restore 7
  99              		.cfi_def_cfa_offset 0
 100 0052 7047     		bx	lr
 101              	.L11:
 102              		.align	2
 103              	.L10:
 104 0054 00A00D40 		.word	1074634752
 105 0058 00900D40 		.word	1074630656
 106 005c 00B00D40 		.word	1074638848
 107 0060 00C00D40 		.word	1074642944
 108              		.cfi_endproc
 109              	.LFE0:
 111              		.align	1
 112              		.global	GPIODirModeSet
 113              		.syntax unified
 114              		.thumb
 115              		.thumb_func
 116              		.fpu softvfp
 118              	GPIODirModeSet:
 119              	.LFB1:
 140:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 141:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 142:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 143:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Sets the direction and mode of the specified pin(s)
 144:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 145:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 146:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 147:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32PinIO is the pin direction and/or mode.
 148:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 149:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! This function sets the specified pin(s) on the selected GPIO port
 150:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! as either an input or output under software control or sets the
 151:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! pin to be under hardware control.
 152:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 153:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The parameter \e ui32PinIO is an enumerated data type that can be one of
 154:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! the following values:
 155:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 156:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! - \b GPIO_DIR_MODE_IN
 157:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! - \b GPIO_DIR_MODE_OUT
 158:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! - \b GPIO_DIR_MODE_HW
 159:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 160:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! where \b GPIO_DIR_MODE_IN specifies that the pin will be programmed as
 161:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! a software controlled input, \b GPIO_DIR_MODE_OUT specifies that the pin
 162:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! will be programmed as a software controlled output, and
 163:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \b GPIO_DIR_MODE_HW specifies that the pin will be placed under
 164:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! hardware control.
 165:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 166:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 167:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 168:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 169:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 170:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 171:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 172:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 173:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 174:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIODirModeSet(uint32_t ui32Port, uint8_t ui8Pins,
 175:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                uint32_t ui32PinIO)
 176:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 120              		.loc 1 176 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 16
 123              		@ frame_needed = 1, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125 0064 80B4     		push	{r7}
 126              		.cfi_def_cfa_offset 4
 127              		.cfi_offset 7, -4
 128 0066 85B0     		sub	sp, sp, #20
 129              		.cfi_def_cfa_offset 24
 130 0068 00AF     		add	r7, sp, #0
 131              		.cfi_def_cfa_register 7
 132 006a F860     		str	r0, [r7, #12]
 133 006c 0B46     		mov	r3, r1
 134 006e 7A60     		str	r2, [r7, #4]
 135 0070 FB72     		strb	r3, [r7, #11]
 177:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 178:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 179:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 180:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 181:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 182:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT((ui32PinIO == GPIO_DIR_MODE_IN) || (ui32PinIO == GPIO_DIR_MODE_OUT) ||
 183:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****            (ui32PinIO == GPIO_DIR_MODE_HW));
 184:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 185:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 186:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Set the pin direction and mode.
 187:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 188:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + GPIO_O_DIR)   = ((ui32PinIO & GPIO_DIR_MODE_OUT) ?
 136              		.loc 1 188 0
 137 0072 7B68     		ldr	r3, [r7, #4]
 138 0074 03F00103 		and	r3, r3, #1
 189:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) | ui8Pins) :
 139              		.loc 1 189 0
 140 0078 002B     		cmp	r3, #0
 141 007a 06D0     		beq	.L13
 142              		.loc 1 189 0 is_stmt 0 discriminator 1
 143 007c FB68     		ldr	r3, [r7, #12]
 144 007e 03F58063 		add	r3, r3, #1024
 145 0082 1A68     		ldr	r2, [r3]
 146 0084 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 147 0086 1343     		orrs	r3, r3, r2
 148 0088 06E0     		b	.L14
 149              	.L13:
 190:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) & ~(ui8Pins)));
 150              		.loc 1 190 0 is_stmt 1 discriminator 2
 151 008a FB68     		ldr	r3, [r7, #12]
 152 008c 03F58063 		add	r3, r3, #1024
 153 0090 1B68     		ldr	r3, [r3]
 154 0092 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 155 0094 D243     		mvns	r2, r2
 189:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) | ui8Pins) :
 156              		.loc 1 189 0 discriminator 2
 157 0096 1340     		ands	r3, r3, r2
 158              	.L14:
 188:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) | ui8Pins) :
 159              		.loc 1 188 0
 160 0098 FA68     		ldr	r2, [r7, #12]
 161 009a 02F58062 		add	r2, r2, #1024
 162 009e 1360     		str	r3, [r2]
 191:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + GPIO_O_AFSEL) = ((ui32PinIO & GPIO_DIR_MODE_HW) ?
 163              		.loc 1 191 0
 164 00a0 7B68     		ldr	r3, [r7, #4]
 165 00a2 03F00203 		and	r3, r3, #2
 192:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_AFSEL) | ui8Pins) :
 166              		.loc 1 192 0
 167 00a6 002B     		cmp	r3, #0
 168 00a8 06D0     		beq	.L15
 169              		.loc 1 192 0 is_stmt 0 discriminator 1
 170 00aa FB68     		ldr	r3, [r7, #12]
 171 00ac 03F58463 		add	r3, r3, #1056
 172 00b0 1A68     		ldr	r2, [r3]
 173 00b2 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 174 00b4 1343     		orrs	r3, r3, r2
 175 00b6 06E0     		b	.L16
 176              	.L15:
 193:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_AFSEL) & ~(ui8Pins)));
 177              		.loc 1 193 0 is_stmt 1 discriminator 2
 178 00b8 FB68     		ldr	r3, [r7, #12]
 179 00ba 03F58463 		add	r3, r3, #1056
 180 00be 1B68     		ldr	r3, [r3]
 181 00c0 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 182 00c2 D243     		mvns	r2, r2
 192:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_AFSEL) | ui8Pins) :
 183              		.loc 1 192 0 discriminator 2
 184 00c4 1340     		ands	r3, r3, r2
 185              	.L16:
 191:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + GPIO_O_AFSEL) = ((ui32PinIO & GPIO_DIR_MODE_HW) ?
 186              		.loc 1 191 0
 187 00c6 FA68     		ldr	r2, [r7, #12]
 188 00c8 02F58462 		add	r2, r2, #1056
 189 00cc 1360     		str	r3, [r2]
 194:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 190              		.loc 1 194 0
 191 00ce 00BF     		nop
 192 00d0 1437     		adds	r7, r7, #20
 193              		.cfi_def_cfa_offset 4
 194 00d2 BD46     		mov	sp, r7
 195              		.cfi_def_cfa_register 13
 196              		@ sp needed
 197 00d4 80BC     		pop	{r7}
 198              		.cfi_restore 7
 199              		.cfi_def_cfa_offset 0
 200 00d6 7047     		bx	lr
 201              		.cfi_endproc
 202              	.LFE1:
 204              		.align	1
 205              		.global	GPIODirModeGet
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 209              		.fpu softvfp
 211              	GPIODirModeGet:
 212              	.LFB2:
 195:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 196:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 197:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 198:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Gets the direction and mode of a pin
 199:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 200:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 201:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pin is the pin number.
 202:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 203:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! This function gets the direction and control mode for a specified pin on
 204:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! the selected GPIO port.  The pin can be configured as either an input or
 205:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! output under software control, or it can be under hardware control.  The
 206:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! type of control and direction are returned as an enumerated data type.
 207:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 208:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return Returns one of the enumerated data types described for
 209:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! GPIODirModeSet().
 210:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 211:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 212:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** uint32_t
 213:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIODirModeGet(uint32_t ui32Port, uint8_t ui8Pin)
 214:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 213              		.loc 1 214 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 16
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 218 00d8 80B4     		push	{r7}
 219              		.cfi_def_cfa_offset 4
 220              		.cfi_offset 7, -4
 221 00da 85B0     		sub	sp, sp, #20
 222              		.cfi_def_cfa_offset 24
 223 00dc 00AF     		add	r7, sp, #0
 224              		.cfi_def_cfa_register 7
 225 00de 7860     		str	r0, [r7, #4]
 226 00e0 0B46     		mov	r3, r1
 227 00e2 FB70     		strb	r3, [r7, #3]
 215:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32Dir;
 216:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32AFSEL;
 217:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 218:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 219:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 220:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 221:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 222:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(ui8Pin < 8);
 223:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 224:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 225:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Convert from a pin number to a bit position.
 226:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 227:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui8Pin = 1 << ui8Pin;
 228              		.loc 1 227 0
 229 00e4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 230 00e6 0122     		movs	r2, #1
 231 00e8 02FA03F3 		lsl	r3, r2, r3
 232 00ec FB70     		strb	r3, [r7, #3]
 228:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 229:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 230:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Return the pin direction and mode.
 231:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 232:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32Dir   = HWREG(ui32Port + GPIO_O_DIR);
 233              		.loc 1 232 0
 234 00ee 7B68     		ldr	r3, [r7, #4]
 235 00f0 03F58063 		add	r3, r3, #1024
 236 00f4 1B68     		ldr	r3, [r3]
 237 00f6 FB60     		str	r3, [r7, #12]
 233:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32AFSEL = HWREG(ui32Port + GPIO_O_AFSEL);
 238              		.loc 1 233 0
 239 00f8 7B68     		ldr	r3, [r7, #4]
 240 00fa 03F58463 		add	r3, r3, #1056
 241 00fe 1B68     		ldr	r3, [r3]
 242 0100 BB60     		str	r3, [r7, #8]
 234:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     return(((ui32Dir & ui8Pin) ? GPIO_DIR_MODE_OUT : GPIO_DIR_MODE_IN) |
 243              		.loc 1 234 0
 244 0102 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 245 0104 FB68     		ldr	r3, [r7, #12]
 246 0106 1340     		ands	r3, r3, r2
 247 0108 002B     		cmp	r3, #0
 248 010a 14BF     		ite	ne
 249 010c 0123     		movne	r3, #1
 250 010e 0023     		moveq	r3, #0
 251 0110 DBB2     		uxtb	r3, r3
 252 0112 1946     		mov	r1, r3
 235:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****            ((ui32AFSEL & ui8Pin) ? GPIO_DIR_MODE_HW : GPIO_DIR_MODE_IN));
 253              		.loc 1 235 0
 254 0114 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 255 0116 BB68     		ldr	r3, [r7, #8]
 256 0118 1340     		ands	r3, r3, r2
 257 011a 002B     		cmp	r3, #0
 258 011c 01D0     		beq	.L18
 259              		.loc 1 235 0 is_stmt 0 discriminator 1
 260 011e 0223     		movs	r3, #2
 261 0120 00E0     		b	.L19
 262              	.L18:
 263              		.loc 1 235 0 discriminator 2
 264 0122 0023     		movs	r3, #0
 265              	.L19:
 234:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     return(((ui32Dir & ui8Pin) ? GPIO_DIR_MODE_OUT : GPIO_DIR_MODE_IN) |
 266              		.loc 1 234 0 is_stmt 1
 267 0124 0B43     		orrs	r3, r3, r1
 236:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 268              		.loc 1 236 0
 269 0126 1846     		mov	r0, r3
 270 0128 1437     		adds	r7, r7, #20
 271              		.cfi_def_cfa_offset 4
 272 012a BD46     		mov	sp, r7
 273              		.cfi_def_cfa_register 13
 274              		@ sp needed
 275 012c 80BC     		pop	{r7}
 276              		.cfi_restore 7
 277              		.cfi_def_cfa_offset 0
 278 012e 7047     		bx	lr
 279              		.cfi_endproc
 280              	.LFE2:
 282              		.align	1
 283              		.global	GPIOIntTypeSet
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 287              		.fpu softvfp
 289              	GPIOIntTypeSet:
 290              	.LFB3:
 237:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 238:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 239:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 240:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Sets the interrupt type for the specified pin(s)
 241:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 242:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 243:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 244:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32IntType specifies the type of interrupt trigger mechanism.
 245:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 246:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! This function sets up the various interrupt trigger mechanisms for the
 247:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! specified pin(s) on the selected GPIO port.
 248:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 249:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The parameter \e ui32IntType is an enumerated data type that can be one of
 250:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! the following values:
 251:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 252:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! - \b GPIO_FALLING_EDGE
 253:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! - \b GPIO_RISING_EDGE
 254:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! - \b GPIO_BOTH_EDGES
 255:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! - \b GPIO_LOW_LEVEL
 256:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! - \b GPIO_HIGH_LEVEL
 257:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 258:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! where the different values describe the interrupt detection mechanism
 259:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! (edge or level) and the particular triggering event (falling, rising,
 260:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! or both edges for edge detect, low or high for level detect).
 261:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 262:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 263:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 264:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 265:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 266:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \note To avoid any spurious interrupts, the user must
 267:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! ensure that the GPIO inputs remain stable for the duration of
 268:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! this function.
 269:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 270:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 271:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 272:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 273:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 274:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOIntTypeSet(uint32_t ui32Port, uint8_t ui8Pins,
 275:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                uint32_t ui32IntType)
 276:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 291              		.loc 1 276 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 16
 294              		@ frame_needed = 1, uses_anonymous_args = 0
 295              		@ link register save eliminated.
 296 0130 80B4     		push	{r7}
 297              		.cfi_def_cfa_offset 4
 298              		.cfi_offset 7, -4
 299 0132 85B0     		sub	sp, sp, #20
 300              		.cfi_def_cfa_offset 24
 301 0134 00AF     		add	r7, sp, #0
 302              		.cfi_def_cfa_register 7
 303 0136 F860     		str	r0, [r7, #12]
 304 0138 0B46     		mov	r3, r1
 305 013a 7A60     		str	r2, [r7, #4]
 306 013c FB72     		strb	r3, [r7, #11]
 277:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 278:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 279:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 280:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 281:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 282:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT((ui32IntType == GPIO_FALLING_EDGE) ||
 283:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****            (ui32IntType == GPIO_RISING_EDGE) || (ui32IntType == GPIO_BOTH_EDGES) ||
 284:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****            (ui32IntType == GPIO_LOW_LEVEL)  || (ui32IntType == GPIO_HIGH_LEVEL));
 285:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 286:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 287:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Set the pin interrupt type.
 288:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 289:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + GPIO_O_IBE) = ((ui32IntType & 1) ?
 307              		.loc 1 289 0
 308 013e 7B68     		ldr	r3, [r7, #4]
 309 0140 03F00103 		and	r3, r3, #1
 290:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) | ui8Pins) :
 310              		.loc 1 290 0
 311 0144 002B     		cmp	r3, #0
 312 0146 06D0     		beq	.L22
 313              		.loc 1 290 0 is_stmt 0 discriminator 1
 314 0148 FB68     		ldr	r3, [r7, #12]
 315 014a 03F58163 		add	r3, r3, #1032
 316 014e 1A68     		ldr	r2, [r3]
 317 0150 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 318 0152 1343     		orrs	r3, r3, r2
 319 0154 06E0     		b	.L23
 320              	.L22:
 291:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) & ~(ui8Pins)));
 321              		.loc 1 291 0 is_stmt 1 discriminator 2
 322 0156 FB68     		ldr	r3, [r7, #12]
 323 0158 03F58163 		add	r3, r3, #1032
 324 015c 1B68     		ldr	r3, [r3]
 325 015e FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 326 0160 D243     		mvns	r2, r2
 290:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) | ui8Pins) :
 327              		.loc 1 290 0 discriminator 2
 328 0162 1340     		ands	r3, r3, r2
 329              	.L23:
 289:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) | ui8Pins) :
 330              		.loc 1 289 0
 331 0164 FA68     		ldr	r2, [r7, #12]
 332 0166 02F58162 		add	r2, r2, #1032
 333 016a 1360     		str	r3, [r2]
 292:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + GPIO_O_IS) = ((ui32IntType & 2) ?
 334              		.loc 1 292 0
 335 016c 7B68     		ldr	r3, [r7, #4]
 336 016e 03F00203 		and	r3, r3, #2
 293:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                    (HWREG(ui32Port + GPIO_O_IS) | ui8Pins) :
 337              		.loc 1 293 0
 338 0172 002B     		cmp	r3, #0
 339 0174 06D0     		beq	.L24
 340              		.loc 1 293 0 is_stmt 0 discriminator 1
 341 0176 FB68     		ldr	r3, [r7, #12]
 342 0178 03F20443 		addw	r3, r3, #1028
 343 017c 1A68     		ldr	r2, [r3]
 344 017e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 345 0180 1343     		orrs	r3, r3, r2
 346 0182 06E0     		b	.L25
 347              	.L24:
 294:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                    (HWREG(ui32Port + GPIO_O_IS) & ~(ui8Pins)));
 348              		.loc 1 294 0 is_stmt 1 discriminator 2
 349 0184 FB68     		ldr	r3, [r7, #12]
 350 0186 03F20443 		addw	r3, r3, #1028
 351 018a 1B68     		ldr	r3, [r3]
 352 018c FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 353 018e D243     		mvns	r2, r2
 293:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                    (HWREG(ui32Port + GPIO_O_IS) | ui8Pins) :
 354              		.loc 1 293 0 discriminator 2
 355 0190 1340     		ands	r3, r3, r2
 356              	.L25:
 292:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + GPIO_O_IS) = ((ui32IntType & 2) ?
 357              		.loc 1 292 0
 358 0192 FA68     		ldr	r2, [r7, #12]
 359 0194 02F20442 		addw	r2, r2, #1028
 360 0198 1360     		str	r3, [r2]
 295:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + GPIO_O_IEV) = ((ui32IntType & 4) ?
 361              		.loc 1 295 0
 362 019a 7B68     		ldr	r3, [r7, #4]
 363 019c 03F00403 		and	r3, r3, #4
 296:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IEV) | ui8Pins) :
 364              		.loc 1 296 0
 365 01a0 002B     		cmp	r3, #0
 366 01a2 06D0     		beq	.L26
 367              		.loc 1 296 0 is_stmt 0 discriminator 1
 368 01a4 FB68     		ldr	r3, [r7, #12]
 369 01a6 03F20C43 		addw	r3, r3, #1036
 370 01aa 1A68     		ldr	r2, [r3]
 371 01ac FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 372 01ae 1343     		orrs	r3, r3, r2
 373 01b0 06E0     		b	.L27
 374              	.L26:
 297:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IEV) & ~(ui8Pins)));
 375              		.loc 1 297 0 is_stmt 1 discriminator 2
 376 01b2 FB68     		ldr	r3, [r7, #12]
 377 01b4 03F20C43 		addw	r3, r3, #1036
 378 01b8 1B68     		ldr	r3, [r3]
 379 01ba FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 380 01bc D243     		mvns	r2, r2
 296:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IEV) | ui8Pins) :
 381              		.loc 1 296 0 discriminator 2
 382 01be 1340     		ands	r3, r3, r2
 383              	.L27:
 295:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + GPIO_O_IEV) = ((ui32IntType & 4) ?
 384              		.loc 1 295 0
 385 01c0 FA68     		ldr	r2, [r7, #12]
 386 01c2 02F20C42 		addw	r2, r2, #1036
 387 01c6 1360     		str	r3, [r2]
 298:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 388              		.loc 1 298 0
 389 01c8 00BF     		nop
 390 01ca 1437     		adds	r7, r7, #20
 391              		.cfi_def_cfa_offset 4
 392 01cc BD46     		mov	sp, r7
 393              		.cfi_def_cfa_register 13
 394              		@ sp needed
 395 01ce 80BC     		pop	{r7}
 396              		.cfi_restore 7
 397              		.cfi_def_cfa_offset 0
 398 01d0 7047     		bx	lr
 399              		.cfi_endproc
 400              	.LFE3:
 402              		.align	1
 403              		.global	GPIOIntTypeGet
 404              		.syntax unified
 405              		.thumb
 406              		.thumb_func
 407              		.fpu softvfp
 409              	GPIOIntTypeGet:
 410              	.LFB4:
 299:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 300:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 301:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 302:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Gets the interrupt type for a pin
 303:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 304:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 305:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pin is the pin number.
 306:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 307:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! This function gets the interrupt type for a specified pin on the selected
 308:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! GPIO port.  The pin can be configured as a falling edge, rising edge, or
 309:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! both edge detected interrupt, or can be configured as a low level or
 310:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! high level detected interrupt.  The type of interrupt detection mechanism
 311:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! is returned as an enumerated data type.
 312:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 313:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return Returns one of the enumerated data types described for
 314:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! GPIOIntTypeSet().
 315:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 316:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 317:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** uint32_t
 318:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOIntTypeGet(uint32_t ui32Port, uint8_t ui8Pin)
 319:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 411              		.loc 1 319 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 24
 414              		@ frame_needed = 1, uses_anonymous_args = 0
 415              		@ link register save eliminated.
 416 01d2 80B4     		push	{r7}
 417              		.cfi_def_cfa_offset 4
 418              		.cfi_offset 7, -4
 419 01d4 87B0     		sub	sp, sp, #28
 420              		.cfi_def_cfa_offset 32
 421 01d6 00AF     		add	r7, sp, #0
 422              		.cfi_def_cfa_register 7
 423 01d8 7860     		str	r0, [r7, #4]
 424 01da 0B46     		mov	r3, r1
 425 01dc FB70     		strb	r3, [r7, #3]
 320:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32IBE, ui32IS, ui32IEV;
 321:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 322:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 323:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 324:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 325:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 326:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(ui8Pin < 8);
 327:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 328:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 329:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Convert from a pin number to a bit position.
 330:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 331:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui8Pin = 1 << ui8Pin;
 426              		.loc 1 331 0
 427 01de FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 428 01e0 0122     		movs	r2, #1
 429 01e2 02FA03F3 		lsl	r3, r2, r3
 430 01e6 FB70     		strb	r3, [r7, #3]
 332:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 333:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 334:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Return the pin interrupt type.
 335:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 336:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32IBE = HWREG(ui32Port + GPIO_O_IBE);
 431              		.loc 1 336 0
 432 01e8 7B68     		ldr	r3, [r7, #4]
 433 01ea 03F58163 		add	r3, r3, #1032
 434 01ee 1B68     		ldr	r3, [r3]
 435 01f0 7B61     		str	r3, [r7, #20]
 337:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32IS  = HWREG(ui32Port + GPIO_O_IS);
 436              		.loc 1 337 0
 437 01f2 7B68     		ldr	r3, [r7, #4]
 438 01f4 03F20443 		addw	r3, r3, #1028
 439 01f8 1B68     		ldr	r3, [r3]
 440 01fa 3B61     		str	r3, [r7, #16]
 338:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32IEV = HWREG(ui32Port + GPIO_O_IEV);
 441              		.loc 1 338 0
 442 01fc 7B68     		ldr	r3, [r7, #4]
 443 01fe 03F20C43 		addw	r3, r3, #1036
 444 0202 1B68     		ldr	r3, [r3]
 445 0204 FB60     		str	r3, [r7, #12]
 339:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     return(((ui32IBE & ui8Pin) ? 1 : 0) | ((ui32IS & ui8Pin) ? 2 : 0) |
 446              		.loc 1 339 0
 447 0206 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 448 0208 7B69     		ldr	r3, [r7, #20]
 449 020a 1340     		ands	r3, r3, r2
 450 020c 002B     		cmp	r3, #0
 451 020e 14BF     		ite	ne
 452 0210 0123     		movne	r3, #1
 453 0212 0023     		moveq	r3, #0
 454 0214 DBB2     		uxtb	r3, r3
 455 0216 1946     		mov	r1, r3
 456 0218 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 457 021a 3B69     		ldr	r3, [r7, #16]
 458 021c 1340     		ands	r3, r3, r2
 459 021e 002B     		cmp	r3, #0
 460 0220 01D0     		beq	.L29
 461              		.loc 1 339 0 is_stmt 0 discriminator 1
 462 0222 0223     		movs	r3, #2
 463 0224 00E0     		b	.L30
 464              	.L29:
 465              		.loc 1 339 0 discriminator 2
 466 0226 0023     		movs	r3, #0
 467              	.L30:
 468              		.loc 1 339 0 discriminator 4
 469 0228 0B43     		orrs	r3, r3, r1
 340:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****            ((ui32IEV & ui8Pin) ? 4 : 0));
 470              		.loc 1 340 0 is_stmt 1 discriminator 4
 471 022a F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 472 022c FA68     		ldr	r2, [r7, #12]
 473 022e 0A40     		ands	r2, r2, r1
 474 0230 002A     		cmp	r2, #0
 475 0232 01D0     		beq	.L31
 476              		.loc 1 340 0 is_stmt 0 discriminator 1
 477 0234 0422     		movs	r2, #4
 478 0236 00E0     		b	.L32
 479              	.L31:
 480              		.loc 1 340 0 discriminator 2
 481 0238 0022     		movs	r2, #0
 482              	.L32:
 339:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     return(((ui32IBE & ui8Pin) ? 1 : 0) | ((ui32IS & ui8Pin) ? 2 : 0) |
 483              		.loc 1 339 0 is_stmt 1
 484 023a 1343     		orrs	r3, r3, r2
 341:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 485              		.loc 1 341 0
 486 023c 1846     		mov	r0, r3
 487 023e 1C37     		adds	r7, r7, #28
 488              		.cfi_def_cfa_offset 4
 489 0240 BD46     		mov	sp, r7
 490              		.cfi_def_cfa_register 13
 491              		@ sp needed
 492 0242 80BC     		pop	{r7}
 493              		.cfi_restore 7
 494              		.cfi_def_cfa_offset 0
 495 0244 7047     		bx	lr
 496              		.cfi_endproc
 497              	.LFE4:
 499              		.align	1
 500              		.global	GPIOPinIntEnable
 501              		.syntax unified
 502              		.thumb
 503              		.thumb_func
 504              		.fpu softvfp
 506              	GPIOPinIntEnable:
 507              	.LFB5:
 342:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 343:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 344:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 345:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Enables interrupts for the specified pin(s)
 346:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 347:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 348:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 349:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 350:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Unmasks the interrupt for the specified pin(s).
 351:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 352:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 353:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 354:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 355:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 356:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 357:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 358:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 359:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 360:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPinIntEnable(uint32_t ui32Port, uint8_t ui8Pins)
 361:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 508              		.loc 1 361 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 8
 511              		@ frame_needed = 1, uses_anonymous_args = 0
 512              		@ link register save eliminated.
 513 0246 80B4     		push	{r7}
 514              		.cfi_def_cfa_offset 4
 515              		.cfi_offset 7, -4
 516 0248 83B0     		sub	sp, sp, #12
 517              		.cfi_def_cfa_offset 16
 518 024a 00AF     		add	r7, sp, #0
 519              		.cfi_def_cfa_register 7
 520 024c 7860     		str	r0, [r7, #4]
 521 024e 0B46     		mov	r3, r1
 522 0250 FB70     		strb	r3, [r7, #3]
 362:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 363:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 364:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 365:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 366:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 367:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 368:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Enable the interrupts.
 369:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 370:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + GPIO_O_IE) |= ui8Pins;
 523              		.loc 1 370 0
 524 0252 7B68     		ldr	r3, [r7, #4]
 525 0254 03F58263 		add	r3, r3, #1040
 526 0258 1A68     		ldr	r2, [r3]
 527 025a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 528 025c 7968     		ldr	r1, [r7, #4]
 529 025e 01F58261 		add	r1, r1, #1040
 530 0262 1343     		orrs	r3, r3, r2
 531 0264 0B60     		str	r3, [r1]
 371:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 532              		.loc 1 371 0
 533 0266 00BF     		nop
 534 0268 0C37     		adds	r7, r7, #12
 535              		.cfi_def_cfa_offset 4
 536 026a BD46     		mov	sp, r7
 537              		.cfi_def_cfa_register 13
 538              		@ sp needed
 539 026c 80BC     		pop	{r7}
 540              		.cfi_restore 7
 541              		.cfi_def_cfa_offset 0
 542 026e 7047     		bx	lr
 543              		.cfi_endproc
 544              	.LFE5:
 546              		.align	1
 547              		.global	GPIOPinIntDisable
 548              		.syntax unified
 549              		.thumb
 550              		.thumb_func
 551              		.fpu softvfp
 553              	GPIOPinIntDisable:
 554              	.LFB6:
 372:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 373:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 374:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 375:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Disables interrupts for the specified pin(s)
 376:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 377:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 378:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 379:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 380:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Masks the interrupt for the specified pin(s)
 381:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 382:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 383:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 384:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 385:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 386:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 387:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 388:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 389:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 390:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPinIntDisable(uint32_t ui32Port, uint8_t ui8Pins)
 391:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 555              		.loc 1 391 0
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 8
 558              		@ frame_needed = 1, uses_anonymous_args = 0
 559              		@ link register save eliminated.
 560 0270 80B4     		push	{r7}
 561              		.cfi_def_cfa_offset 4
 562              		.cfi_offset 7, -4
 563 0272 83B0     		sub	sp, sp, #12
 564              		.cfi_def_cfa_offset 16
 565 0274 00AF     		add	r7, sp, #0
 566              		.cfi_def_cfa_register 7
 567 0276 7860     		str	r0, [r7, #4]
 568 0278 0B46     		mov	r3, r1
 569 027a FB70     		strb	r3, [r7, #3]
 392:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 393:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 394:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 395:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 396:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 397:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 398:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Disable the interrupts.
 399:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 400:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + GPIO_O_IE) &= ~(ui8Pins);
 570              		.loc 1 400 0
 571 027c 7B68     		ldr	r3, [r7, #4]
 572 027e 03F58263 		add	r3, r3, #1040
 573 0282 1B68     		ldr	r3, [r3]
 574 0284 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 575 0286 D243     		mvns	r2, r2
 576 0288 1146     		mov	r1, r2
 577 028a 7A68     		ldr	r2, [r7, #4]
 578 028c 02F58262 		add	r2, r2, #1040
 579 0290 0B40     		ands	r3, r3, r1
 580 0292 1360     		str	r3, [r2]
 401:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 581              		.loc 1 401 0
 582 0294 00BF     		nop
 583 0296 0C37     		adds	r7, r7, #12
 584              		.cfi_def_cfa_offset 4
 585 0298 BD46     		mov	sp, r7
 586              		.cfi_def_cfa_register 13
 587              		@ sp needed
 588 029a 80BC     		pop	{r7}
 589              		.cfi_restore 7
 590              		.cfi_def_cfa_offset 0
 591 029c 7047     		bx	lr
 592              		.cfi_endproc
 593              	.LFE6:
 595              		.align	1
 596              		.global	GPIOPinIntStatus
 597              		.syntax unified
 598              		.thumb
 599              		.thumb_func
 600              		.fpu softvfp
 602              	GPIOPinIntStatus:
 603              	.LFB7:
 402:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 403:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 404:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 405:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Gets interrupt status for the specified GPIO port
 406:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 407:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 408:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param bMasked specifies whether masked or raw interrupt status is
 409:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! returned.
 410:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 411:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! If \e bMasked is set as \b true, then the masked interrupt status is
 412:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! returned; otherwise, the raw interrupt status is returned.
 413:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 414:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return Returns a bit-packed byte, where each bit that is set identifies
 415:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! an active masked or raw interrupt, and where bit 0 of the byte
 416:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 417:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Bits 31:8 should be ignored.
 418:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 419:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 420:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** uint32_t
 421:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPinIntStatus(uint32_t ui32Port, bool bMasked)
 422:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 604              		.loc 1 422 0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 8
 607              		@ frame_needed = 1, uses_anonymous_args = 0
 608              		@ link register save eliminated.
 609 029e 80B4     		push	{r7}
 610              		.cfi_def_cfa_offset 4
 611              		.cfi_offset 7, -4
 612 02a0 83B0     		sub	sp, sp, #12
 613              		.cfi_def_cfa_offset 16
 614 02a2 00AF     		add	r7, sp, #0
 615              		.cfi_def_cfa_register 7
 616 02a4 7860     		str	r0, [r7, #4]
 617 02a6 0B46     		mov	r3, r1
 618 02a8 FB70     		strb	r3, [r7, #3]
 423:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 424:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 425:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 426:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 427:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 428:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 429:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Return the interrupt status.
 430:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 431:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(bMasked)
 619              		.loc 1 431 0
 620 02aa FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 621 02ac 002B     		cmp	r3, #0
 622 02ae 04D0     		beq	.L37
 432:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
 433:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         return(HWREG(ui32Port + GPIO_O_MIS));
 623              		.loc 1 433 0
 624 02b0 7B68     		ldr	r3, [r7, #4]
 625 02b2 03F58363 		add	r3, r3, #1048
 626 02b6 1B68     		ldr	r3, [r3]
 627 02b8 03E0     		b	.L38
 628              	.L37:
 434:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 435:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     else
 436:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
 437:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         return(HWREG(ui32Port + GPIO_O_RIS));
 629              		.loc 1 437 0
 630 02ba 7B68     		ldr	r3, [r7, #4]
 631 02bc 03F21443 		addw	r3, r3, #1044
 632 02c0 1B68     		ldr	r3, [r3]
 633              	.L38:
 438:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 439:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 634              		.loc 1 439 0
 635 02c2 1846     		mov	r0, r3
 636 02c4 0C37     		adds	r7, r7, #12
 637              		.cfi_def_cfa_offset 4
 638 02c6 BD46     		mov	sp, r7
 639              		.cfi_def_cfa_register 13
 640              		@ sp needed
 641 02c8 80BC     		pop	{r7}
 642              		.cfi_restore 7
 643              		.cfi_def_cfa_offset 0
 644 02ca 7047     		bx	lr
 645              		.cfi_endproc
 646              	.LFE7:
 648              		.align	1
 649              		.global	GPIOPinIntClear
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
 653              		.fpu softvfp
 655              	GPIOPinIntClear:
 656              	.LFB8:
 440:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 441:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 442:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 443:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Clears the interrupt for the specified pin(s)
 444:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 445:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 446:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 447:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 448:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Clears the interrupt for the specified pin(s).
 449:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 450:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 451:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 452:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 453:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 454:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \note The write buffer in the Cortex-M3 processor can cause the interrupt 
 455:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! source to take several clock cycles before clearing.
 456:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Therefore, TI recommends clearing the interrupt source early in the 
 457:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! interrupt handler (as opposed to the very last action) to avoid
 458:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! returning from the interrupt handler before the interrupt source is
 459:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! actually cleared.  Failure to clear the interrupt source early can result in
 460:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! the interrupt handler being immediately reentered (because NVIC still sees
 461:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! the interrupt source asserted).
 462:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 463:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 464:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 465:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 466:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 467:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPinIntClear(uint32_t ui32Port, uint8_t ui8Pins)
 468:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 657              		.loc 1 468 0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 8
 660              		@ frame_needed = 1, uses_anonymous_args = 0
 661              		@ link register save eliminated.
 662 02cc 80B4     		push	{r7}
 663              		.cfi_def_cfa_offset 4
 664              		.cfi_offset 7, -4
 665 02ce 83B0     		sub	sp, sp, #12
 666              		.cfi_def_cfa_offset 16
 667 02d0 00AF     		add	r7, sp, #0
 668              		.cfi_def_cfa_register 7
 669 02d2 7860     		str	r0, [r7, #4]
 670 02d4 0B46     		mov	r3, r1
 671 02d6 FB70     		strb	r3, [r7, #3]
 469:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 470:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 471:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 472:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 473:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 474:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 475:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Clear the interrupts.
 476:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 477:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + GPIO_O_IC) = ui8Pins;
 672              		.loc 1 477 0
 673 02d8 7B68     		ldr	r3, [r7, #4]
 674 02da 03F21C43 		addw	r3, r3, #1052
 675 02de 1A46     		mov	r2, r3
 676 02e0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 677 02e2 1360     		str	r3, [r2]
 478:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 678              		.loc 1 478 0
 679 02e4 00BF     		nop
 680 02e6 0C37     		adds	r7, r7, #12
 681              		.cfi_def_cfa_offset 4
 682 02e8 BD46     		mov	sp, r7
 683              		.cfi_def_cfa_register 13
 684              		@ sp needed
 685 02ea 80BC     		pop	{r7}
 686              		.cfi_restore 7
 687              		.cfi_def_cfa_offset 0
 688 02ec 7047     		bx	lr
 689              		.cfi_endproc
 690              	.LFE8:
 692              		.align	1
 693              		.global	GPIOPortIntRegister
 694              		.syntax unified
 695              		.thumb
 696              		.thumb_func
 697              		.fpu softvfp
 699              	GPIOPortIntRegister:
 700              	.LFB9:
 479:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 480:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 481:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 482:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Registers an interrupt handler for a GPIO port
 483:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 484:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 485:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param pfnHandler is a pointer to the GPIO port interrupt handling
 486:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! function.
 487:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 488:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! This function ensures that the interrupt handler specified by
 489:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \e pfnHandler is called when an interrupt is detected from the selected
 490:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! GPIO port.  This function also enables the corresponding GPIO interrupt
 491:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! in the interrupt controller; individual pin interrupts and interrupt
 492:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! sources must be enabled with GPIOPinIntEnable().
 493:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 494:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \sa IntRegister() for important information about registering interrupt
 495:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! handlers.
 496:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 497:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 498:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 499:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 500:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 501:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPortIntRegister(uint32_t ui32Port, void (*pfnHandler)(void))
 502:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 701              		.loc 1 502 0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 8
 704              		@ frame_needed = 1, uses_anonymous_args = 0
 705 02ee 80B5     		push	{r7, lr}
 706              		.cfi_def_cfa_offset 8
 707              		.cfi_offset 7, -8
 708              		.cfi_offset 14, -4
 709 02f0 82B0     		sub	sp, sp, #8
 710              		.cfi_def_cfa_offset 16
 711 02f2 00AF     		add	r7, sp, #0
 712              		.cfi_def_cfa_register 7
 713 02f4 7860     		str	r0, [r7, #4]
 714 02f6 3960     		str	r1, [r7]
 503:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 504:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 505:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 506:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 507:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 508:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 509:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Get the interrupt number associated with the specified GPIO.
 510:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 511:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32Port = GPIOGetIntNumber(ui32Port);
 715              		.loc 1 511 0
 716 02f8 7868     		ldr	r0, [r7, #4]
 717 02fa FFF7FEFF 		bl	GPIOGetIntNumber
 718 02fe 7860     		str	r0, [r7, #4]
 512:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 513:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 514:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Register the interrupt handler.
 515:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 516:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     IntRegister(ui32Port, pfnHandler);
 719              		.loc 1 516 0
 720 0300 3968     		ldr	r1, [r7]
 721 0302 7868     		ldr	r0, [r7, #4]
 722 0304 FFF7FEFF 		bl	IntRegister
 517:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 518:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 519:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Enable the GPIO interrupt.
 520:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 521:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     IntEnable(ui32Port);
 723              		.loc 1 521 0
 724 0308 7868     		ldr	r0, [r7, #4]
 725 030a FFF7FEFF 		bl	IntEnable
 522:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 726              		.loc 1 522 0
 727 030e 00BF     		nop
 728 0310 0837     		adds	r7, r7, #8
 729              		.cfi_def_cfa_offset 8
 730 0312 BD46     		mov	sp, r7
 731              		.cfi_def_cfa_register 13
 732              		@ sp needed
 733 0314 80BD     		pop	{r7, pc}
 734              		.cfi_endproc
 735              	.LFE9:
 737              		.align	1
 738              		.global	GPIOPortIntUnregister
 739              		.syntax unified
 740              		.thumb
 741              		.thumb_func
 742              		.fpu softvfp
 744              	GPIOPortIntUnregister:
 745              	.LFB10:
 523:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 524:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 525:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 526:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Removes an interrupt handler for a GPIO port
 527:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 528:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 529:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 530:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! This function unregisters the interrupt handler for the specified
 531:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! GPIO port.  This function also disables the corresponding
 532:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! GPIO port interrupt in the interrupt controller; individual GPIO interrupts
 533:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! and interrupt sources must be disabled with GPIOPinIntDisable().
 534:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 535:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \sa IntRegister() for important information about registering interrupt
 536:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! handlers.
 537:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 538:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 539:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 540:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 541:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 542:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPortIntUnregister(uint32_t ui32Port)
 543:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 746              		.loc 1 543 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 8
 749              		@ frame_needed = 1, uses_anonymous_args = 0
 750 0316 80B5     		push	{r7, lr}
 751              		.cfi_def_cfa_offset 8
 752              		.cfi_offset 7, -8
 753              		.cfi_offset 14, -4
 754 0318 82B0     		sub	sp, sp, #8
 755              		.cfi_def_cfa_offset 16
 756 031a 00AF     		add	r7, sp, #0
 757              		.cfi_def_cfa_register 7
 758 031c 7860     		str	r0, [r7, #4]
 544:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 545:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 546:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 547:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 548:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 549:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 550:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Get the interrupt number associated with the specified GPIO.
 551:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 552:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32Port = GPIOGetIntNumber(ui32Port);
 759              		.loc 1 552 0
 760 031e 7868     		ldr	r0, [r7, #4]
 761 0320 FFF7FEFF 		bl	GPIOGetIntNumber
 762 0324 7860     		str	r0, [r7, #4]
 553:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 554:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 555:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Disable the GPIO interrupt.
 556:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 557:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     IntDisable(ui32Port);
 763              		.loc 1 557 0
 764 0326 7868     		ldr	r0, [r7, #4]
 765 0328 FFF7FEFF 		bl	IntDisable
 558:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 559:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 560:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Unregister the interrupt handler.
 561:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 562:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     IntUnregister(ui32Port);
 766              		.loc 1 562 0
 767 032c 7868     		ldr	r0, [r7, #4]
 768 032e FFF7FEFF 		bl	IntUnregister
 563:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 769              		.loc 1 563 0
 770 0332 00BF     		nop
 771 0334 0837     		adds	r7, r7, #8
 772              		.cfi_def_cfa_offset 8
 773 0336 BD46     		mov	sp, r7
 774              		.cfi_def_cfa_register 13
 775              		@ sp needed
 776 0338 80BD     		pop	{r7, pc}
 777              		.cfi_endproc
 778              	.LFE10:
 780              		.align	1
 781              		.global	GPIOPinRead
 782              		.syntax unified
 783              		.thumb
 784              		.thumb_func
 785              		.fpu softvfp
 787              	GPIOPinRead:
 788              	.LFB11:
 564:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 565:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 566:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 567:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Reads the values present of the specified pin(s)
 568:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 569:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 570:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 571:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 572:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The values at the specified pin(s) are read, as specified by \e ui8Pins.
 573:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Values are returned for both input and output pin(s), and the value
 574:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! for pin(s) that are not specified by \e ui8Pins are set to 0.
 575:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 576:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 577:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 578:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 579:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 580:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return Returns a bit-packed byte providing the state of the specified
 581:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! pin, where bit 0 of the byte represents GPIO port pin 0, bit 1 represents
 582:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! GPIO port pin 1, and so on.  Any bit that is not specified by \e ui8Pins
 583:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! is returned as a 0.  Bits 31:8 should be ignored.
 584:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 585:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 586:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** uint32_t
 587:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPinRead(uint32_t ui32Port, uint8_t ui8Pins)
 588:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 789              		.loc 1 588 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 8
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793              		@ link register save eliminated.
 794 033a 80B4     		push	{r7}
 795              		.cfi_def_cfa_offset 4
 796              		.cfi_offset 7, -4
 797 033c 83B0     		sub	sp, sp, #12
 798              		.cfi_def_cfa_offset 16
 799 033e 00AF     		add	r7, sp, #0
 800              		.cfi_def_cfa_register 7
 801 0340 7860     		str	r0, [r7, #4]
 802 0342 0B46     		mov	r3, r1
 803 0344 FB70     		strb	r3, [r7, #3]
 589:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 590:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 591:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 592:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 593:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 594:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 595:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Return the pin value(s).
 596:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 597:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     return(HWREG(ui32Port + (GPIO_O_DATA + (ui8Pins << 2))));
 804              		.loc 1 597 0
 805 0346 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 806 0348 9B00     		lsls	r3, r3, #2
 807 034a 1A46     		mov	r2, r3
 808 034c 7B68     		ldr	r3, [r7, #4]
 809 034e 1344     		add	r3, r3, r2
 810 0350 1B68     		ldr	r3, [r3]
 598:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 811              		.loc 1 598 0
 812 0352 1846     		mov	r0, r3
 813 0354 0C37     		adds	r7, r7, #12
 814              		.cfi_def_cfa_offset 4
 815 0356 BD46     		mov	sp, r7
 816              		.cfi_def_cfa_register 13
 817              		@ sp needed
 818 0358 80BC     		pop	{r7}
 819              		.cfi_restore 7
 820              		.cfi_def_cfa_offset 0
 821 035a 7047     		bx	lr
 822              		.cfi_endproc
 823              	.LFE11:
 825              		.align	1
 826              		.global	GPIOPinWrite
 827              		.syntax unified
 828              		.thumb
 829              		.thumb_func
 830              		.fpu softvfp
 832              	GPIOPinWrite:
 833              	.LFB12:
 599:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 600:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 601:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 602:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Writes a value to the specified pin(s)
 603:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 604:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 605:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 606:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Val is the value to write to the pin(s).
 607:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 608:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Writes the corresponding bit values to the output pin(s) specified by
 609:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \e ui8Pins.  Writing to a pin configured as an input pin has no effect.
 610:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 611:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 612:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 613:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 614:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 615:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 616:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 617:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 618:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 619:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPinWrite(uint32_t ui32Port, uint8_t ui8Pins, uint8_t ui8Val)
 620:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 834              		.loc 1 620 0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 8
 837              		@ frame_needed = 1, uses_anonymous_args = 0
 838              		@ link register save eliminated.
 839 035c 80B4     		push	{r7}
 840              		.cfi_def_cfa_offset 4
 841              		.cfi_offset 7, -4
 842 035e 83B0     		sub	sp, sp, #12
 843              		.cfi_def_cfa_offset 16
 844 0360 00AF     		add	r7, sp, #0
 845              		.cfi_def_cfa_register 7
 846 0362 7860     		str	r0, [r7, #4]
 847 0364 0B46     		mov	r3, r1
 848 0366 FB70     		strb	r3, [r7, #3]
 849 0368 1346     		mov	r3, r2
 850 036a BB70     		strb	r3, [r7, #2]
 621:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 622:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 623:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 624:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 625:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 626:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 627:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Write the pins.
 628:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 629:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + (GPIO_O_DATA + (ui8Pins << 2))) = ui8Val;
 851              		.loc 1 629 0
 852 036c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 853 036e 9B00     		lsls	r3, r3, #2
 854 0370 1A46     		mov	r2, r3
 855 0372 7B68     		ldr	r3, [r7, #4]
 856 0374 1344     		add	r3, r3, r2
 857 0376 1A46     		mov	r2, r3
 858 0378 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 859 037a 1360     		str	r3, [r2]
 630:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 860              		.loc 1 630 0
 861 037c 00BF     		nop
 862 037e 0C37     		adds	r7, r7, #12
 863              		.cfi_def_cfa_offset 4
 864 0380 BD46     		mov	sp, r7
 865              		.cfi_def_cfa_register 13
 866              		@ sp needed
 867 0382 80BC     		pop	{r7}
 868              		.cfi_restore 7
 869              		.cfi_def_cfa_offset 0
 870 0384 7047     		bx	lr
 871              		.cfi_endproc
 872              	.LFE12:
 874              		.align	1
 875              		.global	GPIOPinTypeGPIOInput
 876              		.syntax unified
 877              		.thumb
 878              		.thumb_func
 879              		.fpu softvfp
 881              	GPIOPinTypeGPIOInput:
 882              	.LFB13:
 631:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 632:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 633:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 634:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Configures pin(s) for use as GPIO inputs
 635:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 636:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 637:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 638:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 639:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The GPIO pins must be properly configured in order to function correctly as
 640:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! GPIO inputs.  This function provides the proper configuration for those
 641:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! pin(s).
 642:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 643:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 644:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 645:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 646:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 647:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 648:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 649:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 650:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 651:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPinTypeGPIOInput(uint32_t ui32Port, uint8_t ui8Pins)
 652:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 883              		.loc 1 652 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 8
 886              		@ frame_needed = 1, uses_anonymous_args = 0
 887 0386 80B5     		push	{r7, lr}
 888              		.cfi_def_cfa_offset 8
 889              		.cfi_offset 7, -8
 890              		.cfi_offset 14, -4
 891 0388 82B0     		sub	sp, sp, #8
 892              		.cfi_def_cfa_offset 16
 893 038a 00AF     		add	r7, sp, #0
 894              		.cfi_def_cfa_register 7
 895 038c 7860     		str	r0, [r7, #4]
 896 038e 0B46     		mov	r3, r1
 897 0390 FB70     		strb	r3, [r7, #3]
 653:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 654:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 655:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 656:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 657:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 658:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 659:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Make the pin(s) be inputs.
 660:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 661:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_IN);
 898              		.loc 1 661 0
 899 0392 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 900 0394 0022     		movs	r2, #0
 901 0396 1946     		mov	r1, r3
 902 0398 7868     		ldr	r0, [r7, #4]
 903 039a FFF7FEFF 		bl	GPIODirModeSet
 662:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 663:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 664:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Set the pad(s) to no override of the drive type.
 665:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 666:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 904              		.loc 1 666 0
 905 039e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 906 03a0 0022     		movs	r2, #0
 907 03a2 1946     		mov	r1, r3
 908 03a4 7868     		ldr	r0, [r7, #4]
 909 03a6 FFF7FEFF 		bl	IOCPadConfigSet
 667:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 910              		.loc 1 667 0
 911 03aa 00BF     		nop
 912 03ac 0837     		adds	r7, r7, #8
 913              		.cfi_def_cfa_offset 8
 914 03ae BD46     		mov	sp, r7
 915              		.cfi_def_cfa_register 13
 916              		@ sp needed
 917 03b0 80BD     		pop	{r7, pc}
 918              		.cfi_endproc
 919              	.LFE13:
 921              		.align	1
 922              		.global	GPIOPinTypeGPIOOutput
 923              		.syntax unified
 924              		.thumb
 925              		.thumb_func
 926              		.fpu softvfp
 928              	GPIOPinTypeGPIOOutput:
 929              	.LFB14:
 668:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 669:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 670:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 671:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Configures pin(s) for use as GPIO outputs
 672:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 673:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 674:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 675:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 676:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The GPIO pins must be properly configured to function correctly as
 677:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! GPIO outputs.  This function provides the proper configuration for those
 678:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! pin(s).
 679:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 680:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 681:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 682:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 683:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 684:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 685:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 686:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 687:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 688:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPinTypeGPIOOutput(uint32_t ui32Port, uint8_t ui8Pins)
 689:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 930              		.loc 1 689 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 8
 933              		@ frame_needed = 1, uses_anonymous_args = 0
 934 03b2 80B5     		push	{r7, lr}
 935              		.cfi_def_cfa_offset 8
 936              		.cfi_offset 7, -8
 937              		.cfi_offset 14, -4
 938 03b4 82B0     		sub	sp, sp, #8
 939              		.cfi_def_cfa_offset 16
 940 03b6 00AF     		add	r7, sp, #0
 941              		.cfi_def_cfa_register 7
 942 03b8 7860     		str	r0, [r7, #4]
 943 03ba 0B46     		mov	r3, r1
 944 03bc FB70     		strb	r3, [r7, #3]
 690:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 691:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 692:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 693:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 694:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 695:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 696:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Make the pin(s) be outputs.
 697:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 698:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_OUT);
 945              		.loc 1 698 0
 946 03be FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 947 03c0 0122     		movs	r2, #1
 948 03c2 1946     		mov	r1, r3
 949 03c4 7868     		ldr	r0, [r7, #4]
 950 03c6 FFF7FEFF 		bl	GPIODirModeSet
 699:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 700:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 701:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Set the pad(s) no override of the drive type.
 702:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 703:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 951              		.loc 1 703 0
 952 03ca FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 953 03cc 0022     		movs	r2, #0
 954 03ce 1946     		mov	r1, r3
 955 03d0 7868     		ldr	r0, [r7, #4]
 956 03d2 FFF7FEFF 		bl	IOCPadConfigSet
 704:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 957              		.loc 1 704 0
 958 03d6 00BF     		nop
 959 03d8 0837     		adds	r7, r7, #8
 960              		.cfi_def_cfa_offset 8
 961 03da BD46     		mov	sp, r7
 962              		.cfi_def_cfa_register 13
 963              		@ sp needed
 964 03dc 80BD     		pop	{r7, pc}
 965              		.cfi_endproc
 966              	.LFE14:
 968              		.align	1
 969              		.global	GPIOPinTypeI2C
 970              		.syntax unified
 971              		.thumb
 972              		.thumb_func
 973              		.fpu softvfp
 975              	GPIOPinTypeI2C:
 976              	.LFB15:
 705:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 706:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 707:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 708:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Configures pin(s) for use by the I2C peripheral
 709:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 710:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 711:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 712:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 713:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The I2C pins must be properly configured for the I2C peripheral to function
 714:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! correctly.  This function provides the proper configuration for those
 715:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! pin(s).
 716:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 717:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 718:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 719:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 720:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 721:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \note This function cannot be used to turn any pin into an I2C pin; it only
 722:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! configures an I2C pin for proper operation.
 723:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 724:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 725:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 726:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 727:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 728:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPinTypeI2C(uint32_t ui32Port, uint8_t ui8Pins)
 729:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 977              		.loc 1 729 0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 8
 980              		@ frame_needed = 1, uses_anonymous_args = 0
 981 03de 80B5     		push	{r7, lr}
 982              		.cfi_def_cfa_offset 8
 983              		.cfi_offset 7, -8
 984              		.cfi_offset 14, -4
 985 03e0 82B0     		sub	sp, sp, #8
 986              		.cfi_def_cfa_offset 16
 987 03e2 00AF     		add	r7, sp, #0
 988              		.cfi_def_cfa_register 7
 989 03e4 7860     		str	r0, [r7, #4]
 990 03e6 0B46     		mov	r3, r1
 991 03e8 FB70     		strb	r3, [r7, #3]
 730:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 731:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 732:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 733:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 734:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 735:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 736:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 737:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 738:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 992              		.loc 1 738 0
 993 03ea FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 994 03ec 0222     		movs	r2, #2
 995 03ee 1946     		mov	r1, r3
 996 03f0 7868     		ldr	r0, [r7, #4]
 997 03f2 FFF7FEFF 		bl	GPIODirModeSet
 739:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 740:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 741:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Set the pad(s) to no drive type.
 742:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 743:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 998              		.loc 1 743 0
 999 03f6 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1000 03f8 0022     		movs	r2, #0
 1001 03fa 1946     		mov	r1, r3
 1002 03fc 7868     		ldr	r0, [r7, #4]
 1003 03fe FFF7FEFF 		bl	IOCPadConfigSet
 744:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 1004              		.loc 1 744 0
 1005 0402 00BF     		nop
 1006 0404 0837     		adds	r7, r7, #8
 1007              		.cfi_def_cfa_offset 8
 1008 0406 BD46     		mov	sp, r7
 1009              		.cfi_def_cfa_register 13
 1010              		@ sp needed
 1011 0408 80BD     		pop	{r7, pc}
 1012              		.cfi_endproc
 1013              	.LFE15:
 1015              		.align	1
 1016              		.global	GPIOPinTypeSSI
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu softvfp
 1022              	GPIOPinTypeSSI:
 1023              	.LFB16:
 745:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 746:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 747:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 748:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Configures pin(s) for use by the SSI peripheral
 749:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 750:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 751:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 752:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 753:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The SSI pins must be properly configured for the SSI peripheral to function
 754:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! correctly.  This function provides a typical configuration for those
 755:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! pin(s); other configurations might work as well depending upon the board
 756:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! setup (for example, using the on-chip pull-ups).
 757:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 758:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 759:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 760:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 761:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 762:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \note This function cannot be used to turn any pin into a SSI pin; but only
 763:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! configures an SSI pin for proper operation.
 764:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 765:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 766:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 767:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 768:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 769:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPinTypeSSI(uint32_t ui32Port, uint8_t ui8Pins)
 770:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 1024              		.loc 1 770 0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 8
 1027              		@ frame_needed = 1, uses_anonymous_args = 0
 1028 040a 80B5     		push	{r7, lr}
 1029              		.cfi_def_cfa_offset 8
 1030              		.cfi_offset 7, -8
 1031              		.cfi_offset 14, -4
 1032 040c 82B0     		sub	sp, sp, #8
 1033              		.cfi_def_cfa_offset 16
 1034 040e 00AF     		add	r7, sp, #0
 1035              		.cfi_def_cfa_register 7
 1036 0410 7860     		str	r0, [r7, #4]
 1037 0412 0B46     		mov	r3, r1
 1038 0414 FB70     		strb	r3, [r7, #3]
 771:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 772:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 773:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 774:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 775:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 776:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 777:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 778:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 779:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 1039              		.loc 1 779 0
 1040 0416 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1041 0418 0222     		movs	r2, #2
 1042 041a 1946     		mov	r1, r3
 1043 041c 7868     		ldr	r0, [r7, #4]
 1044 041e FFF7FEFF 		bl	GPIODirModeSet
 780:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 781:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 782:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Set the pad(s) to no drive type.
 783:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 784:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 1045              		.loc 1 784 0
 1046 0422 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1047 0424 0022     		movs	r2, #0
 1048 0426 1946     		mov	r1, r3
 1049 0428 7868     		ldr	r0, [r7, #4]
 1050 042a FFF7FEFF 		bl	IOCPadConfigSet
 785:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 1051              		.loc 1 785 0
 1052 042e 00BF     		nop
 1053 0430 0837     		adds	r7, r7, #8
 1054              		.cfi_def_cfa_offset 8
 1055 0432 BD46     		mov	sp, r7
 1056              		.cfi_def_cfa_register 13
 1057              		@ sp needed
 1058 0434 80BD     		pop	{r7, pc}
 1059              		.cfi_endproc
 1060              	.LFE16:
 1062              		.align	1
 1063              		.global	GPIOPinTypeTimer
 1064              		.syntax unified
 1065              		.thumb
 1066              		.thumb_func
 1067              		.fpu softvfp
 1069              	GPIOPinTypeTimer:
 1070              	.LFB17:
 786:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 787:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 788:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 789:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Configures pin(s) for use by the Timer peripheral
 790:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 791:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 792:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 793:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 794:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The CCP pins must be properly configured for the timer peripheral to
 795:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! function correctly.  This function provides a typical configuration for
 796:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! those pin(s); other configurations might work as well depending upon the
 797:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! board setup (for example, using the on-chip pull-ups).
 798:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 799:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 800:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 801:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 802:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 803:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \note This function cannot be used to turn any pin into a timer pin but only
 804:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! configures a timer pin for proper operation.
 805:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 806:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 807:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 808:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 809:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 810:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPinTypeTimer(uint32_t ui32Port, uint8_t ui8Pins)
 811:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 1071              		.loc 1 811 0
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 8
 1074              		@ frame_needed = 1, uses_anonymous_args = 0
 1075 0436 80B5     		push	{r7, lr}
 1076              		.cfi_def_cfa_offset 8
 1077              		.cfi_offset 7, -8
 1078              		.cfi_offset 14, -4
 1079 0438 82B0     		sub	sp, sp, #8
 1080              		.cfi_def_cfa_offset 16
 1081 043a 00AF     		add	r7, sp, #0
 1082              		.cfi_def_cfa_register 7
 1083 043c 7860     		str	r0, [r7, #4]
 1084 043e 0B46     		mov	r3, r1
 1085 0440 FB70     		strb	r3, [r7, #3]
 812:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 813:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 814:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 815:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 816:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 817:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 818:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 819:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 820:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 1086              		.loc 1 820 0
 1087 0442 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1088 0444 0222     		movs	r2, #2
 1089 0446 1946     		mov	r1, r3
 1090 0448 7868     		ldr	r0, [r7, #4]
 1091 044a FFF7FEFF 		bl	GPIODirModeSet
 821:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 822:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 823:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Set the pad(s) to no drive type.
 824:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 825:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 1092              		.loc 1 825 0
 1093 044e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1094 0450 0022     		movs	r2, #0
 1095 0452 1946     		mov	r1, r3
 1096 0454 7868     		ldr	r0, [r7, #4]
 1097 0456 FFF7FEFF 		bl	IOCPadConfigSet
 826:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 1098              		.loc 1 826 0
 1099 045a 00BF     		nop
 1100 045c 0837     		adds	r7, r7, #8
 1101              		.cfi_def_cfa_offset 8
 1102 045e BD46     		mov	sp, r7
 1103              		.cfi_def_cfa_register 13
 1104              		@ sp needed
 1105 0460 80BD     		pop	{r7, pc}
 1106              		.cfi_endproc
 1107              	.LFE17:
 1109              		.align	1
 1110              		.global	GPIOPinTypeUARTInput
 1111              		.syntax unified
 1112              		.thumb
 1113              		.thumb_func
 1114              		.fpu softvfp
 1116              	GPIOPinTypeUARTInput:
 1117              	.LFB18:
 827:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 828:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 829:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 830:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Configures input pin(s) for use by the UART peripheral
 831:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 832:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 833:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 834:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 835:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The UART input pins must be properly configured for the UART peripheral to
 836:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! function correctly.  This function provides a typical configuration for
 837:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! those pin(s); other configurations might work as well depending upon the
 838:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! board setup (for example, using the on-chip pull-ups).
 839:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 840:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \note For PC0 through PC3 the function GPIOPinTypeUARTHiDrive() should
 841:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! be used to configure these high drive pins.
 842:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 843:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 844:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 845:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 846:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 847:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \note This function cannot be used to turn any pin into a UART pin; but only
 848:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! configures a UART pin for proper operation.
 849:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 850:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 851:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 852:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 853:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 854:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPinTypeUARTInput(uint32_t ui32Port, uint8_t ui8Pins)
 855:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 1118              		.loc 1 855 0
 1119              		.cfi_startproc
 1120              		@ args = 0, pretend = 0, frame = 8
 1121              		@ frame_needed = 1, uses_anonymous_args = 0
 1122 0462 80B5     		push	{r7, lr}
 1123              		.cfi_def_cfa_offset 8
 1124              		.cfi_offset 7, -8
 1125              		.cfi_offset 14, -4
 1126 0464 82B0     		sub	sp, sp, #8
 1127              		.cfi_def_cfa_offset 16
 1128 0466 00AF     		add	r7, sp, #0
 1129              		.cfi_def_cfa_register 7
 1130 0468 7860     		str	r0, [r7, #4]
 1131 046a 0B46     		mov	r3, r1
 1132 046c FB70     		strb	r3, [r7, #3]
 856:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 857:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 858:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 859:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 860:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(!((ui32Port == GPIO_C_BASE) && ((ui8Pins & 0xf) > 0)));
 861:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 862:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 863:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 864:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 865:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 1133              		.loc 1 865 0
 1134 046e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1135 0470 0222     		movs	r2, #2
 1136 0472 1946     		mov	r1, r3
 1137 0474 7868     		ldr	r0, [r7, #4]
 1138 0476 FFF7FEFF 		bl	GPIODirModeSet
 866:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 867:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 868:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Set the pad(s) to override disable.
 869:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 870:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 1139              		.loc 1 870 0
 1140 047a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1141 047c 0022     		movs	r2, #0
 1142 047e 1946     		mov	r1, r3
 1143 0480 7868     		ldr	r0, [r7, #4]
 1144 0482 FFF7FEFF 		bl	IOCPadConfigSet
 871:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 1145              		.loc 1 871 0
 1146 0486 00BF     		nop
 1147 0488 0837     		adds	r7, r7, #8
 1148              		.cfi_def_cfa_offset 8
 1149 048a BD46     		mov	sp, r7
 1150              		.cfi_def_cfa_register 13
 1151              		@ sp needed
 1152 048c 80BD     		pop	{r7, pc}
 1153              		.cfi_endproc
 1154              	.LFE18:
 1156              		.align	1
 1157              		.global	GPIOPinTypeUARTOutput
 1158              		.syntax unified
 1159              		.thumb
 1160              		.thumb_func
 1161              		.fpu softvfp
 1163              	GPIOPinTypeUARTOutput:
 1164              	.LFB19:
 872:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 873:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 874:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 875:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Configures output pin(s) for use by the UART peripheral
 876:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 877:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 878:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 879:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 880:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The UART output pins must be properly configured for the UART peripheral to
 881:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! function correctly.  This function provides a typical configuration for
 882:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! those pin(s); other configurations might work as well depending upon the
 883:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! board setup (for example, using the on-chip pull-ups).
 884:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 885:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 886:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 887:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 888:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 889:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \note This function cannot be used to turn any pin into a UART pin; but only
 890:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! configures a UART pin for proper operation.
 891:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 892:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 893:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 894:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 895:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 896:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPinTypeUARTOutput(uint32_t ui32Port, uint8_t ui8Pins)
 897:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 1165              		.loc 1 897 0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 8
 1168              		@ frame_needed = 1, uses_anonymous_args = 0
 1169 048e 80B5     		push	{r7, lr}
 1170              		.cfi_def_cfa_offset 8
 1171              		.cfi_offset 7, -8
 1172              		.cfi_offset 14, -4
 1173 0490 82B0     		sub	sp, sp, #8
 1174              		.cfi_def_cfa_offset 16
 1175 0492 00AF     		add	r7, sp, #0
 1176              		.cfi_def_cfa_register 7
 1177 0494 7860     		str	r0, [r7, #4]
 1178 0496 0B46     		mov	r3, r1
 1179 0498 FB70     		strb	r3, [r7, #3]
 898:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 899:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 900:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 901:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 902:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(!((ui32Port == GPIO_C_BASE) && ((ui8Pins & 0xf) > 0)));
 903:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 904:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 905:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 906:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 907:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 1180              		.loc 1 907 0
 1181 049a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1182 049c 0222     		movs	r2, #2
 1183 049e 1946     		mov	r1, r3
 1184 04a0 7868     		ldr	r0, [r7, #4]
 1185 04a2 FFF7FEFF 		bl	GPIODirModeSet
 908:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 909:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 910:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Set the pad(s) to output enable.
 911:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 912:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_OE);
 1186              		.loc 1 912 0
 1187 04a6 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1188 04a8 0822     		movs	r2, #8
 1189 04aa 1946     		mov	r1, r3
 1190 04ac 7868     		ldr	r0, [r7, #4]
 1191 04ae FFF7FEFF 		bl	IOCPadConfigSet
 913:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 1192              		.loc 1 913 0
 1193 04b2 00BF     		nop
 1194 04b4 0837     		adds	r7, r7, #8
 1195              		.cfi_def_cfa_offset 8
 1196 04b6 BD46     		mov	sp, r7
 1197              		.cfi_def_cfa_register 13
 1198              		@ sp needed
 1199 04b8 80BD     		pop	{r7, pc}
 1200              		.cfi_endproc
 1201              	.LFE19:
 1203              		.align	1
 1204              		.global	GPIOPowIntTypeSet
 1205              		.syntax unified
 1206              		.thumb
 1207              		.thumb_func
 1208              		.fpu softvfp
 1210              	GPIOPowIntTypeSet:
 1211              	.LFB20:
 914:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 915:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 916:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 917:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Sets the power-up interrupt type for the specified pin(s)
 918:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 919:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 920:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 921:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32IntType specifies type of power-up interrupt trigger mechanism.
 922:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 923:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! This function sets up the various interrupt trigger mechanisms for the
 924:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! specified pin(s) on the selected GPIO port.
 925:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 926:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The parameter \e ui32IntType is an enumerated data type that can be one of
 927:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! the following values:
 928:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 929:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! - \b GPIO_POW_FALLING_EDGE
 930:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! - \b GPIO_POW_RISING_EDGE
 931:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 932:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 933:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 934:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 935:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 936:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \note To avoid any spurious interrupts, the user must
 937:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! ensure that the GPIO inputs remain stable for the duration of
 938:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! this function.
 939:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
 940:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
 941:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 942:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 943:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
 944:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPowIntTypeSet(uint32_t ui32Port, uint8_t ui8Pins,
 945:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                   uint32_t ui32IntType)
 946:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 1212              		.loc 1 946 0
 1213              		.cfi_startproc
 1214              		@ args = 0, pretend = 0, frame = 24
 1215              		@ frame_needed = 1, uses_anonymous_args = 0
 1216              		@ link register save eliminated.
 1217 04ba 80B4     		push	{r7}
 1218              		.cfi_def_cfa_offset 4
 1219              		.cfi_offset 7, -4
 1220 04bc 87B0     		sub	sp, sp, #28
 1221              		.cfi_def_cfa_offset 32
 1222 04be 00AF     		add	r7, sp, #0
 1223              		.cfi_def_cfa_register 7
 1224 04c0 F860     		str	r0, [r7, #12]
 1225 04c2 0B46     		mov	r3, r1
 1226 04c4 7A60     		str	r2, [r7, #4]
 1227 04c6 FB72     		strb	r3, [r7, #11]
 947:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32PortOffset;
 948:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32IntPins;
 949:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 950:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 951:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Initialize value
 952:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 953:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32PortOffset = 0;
 1228              		.loc 1 953 0
 1229 04c8 0023     		movs	r3, #0
 1230 04ca 7B61     		str	r3, [r7, #20]
 954:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 955:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 956:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
 957:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 958:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 959:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT((ui32IntType == GPIO_POW_FALLING_EDGE) ||
 960:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****            (ui32IntType == GPIO_POW_RISING_EDGE));
 961:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 962:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 963:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Find bit mask for wanted pin(s)
 964:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 965:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1231              		.loc 1 965 0
 1232 04cc FB68     		ldr	r3, [r7, #12]
 1233 04ce 1D4A     		ldr	r2, .L60
 1234 04d0 9342     		cmp	r3, r2
 1235 04d2 01D1     		bne	.L53
 966:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
 967:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 0;
 1236              		.loc 1 967 0
 1237 04d4 0023     		movs	r3, #0
 1238 04d6 7B61     		str	r3, [r7, #20]
 1239              	.L53:
 968:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 969:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1240              		.loc 1 969 0
 1241 04d8 FB68     		ldr	r3, [r7, #12]
 1242 04da 1B4A     		ldr	r2, .L60+4
 1243 04dc 9342     		cmp	r3, r2
 1244 04de 01D1     		bne	.L54
 970:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
 971:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 8;
 1245              		.loc 1 971 0
 1246 04e0 0823     		movs	r3, #8
 1247 04e2 7B61     		str	r3, [r7, #20]
 1248              	.L54:
 972:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 973:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1249              		.loc 1 973 0
 1250 04e4 FB68     		ldr	r3, [r7, #12]
 1251 04e6 194A     		ldr	r2, .L60+8
 1252 04e8 9342     		cmp	r3, r2
 1253 04ea 01D1     		bne	.L55
 974:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
 975:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 16;
 1254              		.loc 1 975 0
 1255 04ec 1023     		movs	r3, #16
 1256 04ee 7B61     		str	r3, [r7, #20]
 1257              	.L55:
 976:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 977:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1258              		.loc 1 977 0
 1259 04f0 FB68     		ldr	r3, [r7, #12]
 1260 04f2 174A     		ldr	r2, .L60+12
 1261 04f4 9342     		cmp	r3, r2
 1262 04f6 01D1     		bne	.L56
 978:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
 979:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 24;
 1263              		.loc 1 979 0
 1264 04f8 1823     		movs	r3, #24
 1265 04fa 7B61     		str	r3, [r7, #20]
 1266              	.L56:
 980:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 981:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1267              		.loc 1 981 0
 1268 04fc FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1269 04fe 7B69     		ldr	r3, [r7, #20]
 1270 0500 02FA03F3 		lsl	r3, r2, r3
 1271 0504 3B61     		str	r3, [r7, #16]
 982:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 983:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 984:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Set the pin interrupt type.
 985:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
 986:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32IntType == GPIO_POW_FALLING_EDGE)
 1272              		.loc 1 986 0
 1273 0506 7B68     		ldr	r3, [r7, #4]
 1274 0508 012B     		cmp	r3, #1
 1275 050a 0BD1     		bne	.L57
 987:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
 988:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         HWREG(ui32Port + GPIO_O_P_EDGE_CTRL) |= ui32IntPins;
 1276              		.loc 1 988 0
 1277 050c FB68     		ldr	r3, [r7, #12]
 1278 050e 03F20473 		addw	r3, r3, #1796
 1279 0512 1A68     		ldr	r2, [r3]
 1280 0514 FB68     		ldr	r3, [r7, #12]
 1281 0516 03F20473 		addw	r3, r3, #1796
 1282 051a 1946     		mov	r1, r3
 1283 051c 3B69     		ldr	r3, [r7, #16]
 1284 051e 1343     		orrs	r3, r3, r2
 1285 0520 0B60     		str	r3, [r1]
 989:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 990:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     else  // GPIO_POW_RAISING_EDGE
 991:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
 992:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         HWREG(ui32Port + GPIO_O_P_EDGE_CTRL) &= ~(ui32IntPins);
 993:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 994:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 1286              		.loc 1 994 0
 1287 0522 0AE0     		b	.L59
 1288              	.L57:
 992:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
 1289              		.loc 1 992 0
 1290 0524 FB68     		ldr	r3, [r7, #12]
 1291 0526 03F20473 		addw	r3, r3, #1796
 1292 052a 1A68     		ldr	r2, [r3]
 1293 052c 3B69     		ldr	r3, [r7, #16]
 1294 052e DB43     		mvns	r3, r3
 1295 0530 F968     		ldr	r1, [r7, #12]
 1296 0532 01F20471 		addw	r1, r1, #1796
 1297 0536 1340     		ands	r3, r3, r2
 1298 0538 0B60     		str	r3, [r1]
 1299              	.L59:
 1300              		.loc 1 994 0
 1301 053a 00BF     		nop
 1302 053c 1C37     		adds	r7, r7, #28
 1303              		.cfi_def_cfa_offset 4
 1304 053e BD46     		mov	sp, r7
 1305              		.cfi_def_cfa_register 13
 1306              		@ sp needed
 1307 0540 80BC     		pop	{r7}
 1308              		.cfi_restore 7
 1309              		.cfi_def_cfa_offset 0
 1310 0542 7047     		bx	lr
 1311              	.L61:
 1312              		.align	2
 1313              	.L60:
 1314 0544 00900D40 		.word	1074630656
 1315 0548 00A00D40 		.word	1074634752
 1316 054c 00B00D40 		.word	1074638848
 1317 0550 00C00D40 		.word	1074642944
 1318              		.cfi_endproc
 1319              	.LFE20:
 1321              		.align	1
 1322              		.global	GPIOPowIntTypeGet
 1323              		.syntax unified
 1324              		.thumb
 1325              		.thumb_func
 1326              		.fpu softvfp
 1328              	GPIOPowIntTypeGet:
 1329              	.LFB21:
 995:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
 996:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
 997:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
 998:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Gets the power-up interrupt type for a pin
 999:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1000:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1001:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pin is the pin number.
1002:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1003:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! This function gets the interrupt type for a specified pin on the selected
1004:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! GPIO port.  The pin can be configured as a falling edge, rising edge, or
1005:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! both edge detected interrupt, or it can be configured as a low level or
1006:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! high level detected interrupt.  The type of interrupt detection mechanism
1007:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! is returned as an enumerated data type.
1008:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1009:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return Returns one of the enumerated data types described for
1010:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! GPIOIntTypeSet().
1011:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
1012:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
1013:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** uint32_t
1014:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPowIntTypeGet(uint32_t ui32Port, uint8_t ui8Pin)
1015:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 1330              		.loc 1 1015 0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 16
 1333              		@ frame_needed = 1, uses_anonymous_args = 0
 1334              		@ link register save eliminated.
 1335 0554 80B4     		push	{r7}
 1336              		.cfi_def_cfa_offset 4
 1337              		.cfi_offset 7, -4
 1338 0556 85B0     		sub	sp, sp, #20
 1339              		.cfi_def_cfa_offset 24
 1340 0558 00AF     		add	r7, sp, #0
 1341              		.cfi_def_cfa_register 7
 1342 055a 7860     		str	r0, [r7, #4]
 1343 055c 0B46     		mov	r3, r1
 1344 055e FB70     		strb	r3, [r7, #3]
1016:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32PortOffset;
1017:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32IntPin;
1018:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1019:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1020:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Initialize value
1021:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1022:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32PortOffset = 0;
 1345              		.loc 1 1022 0
 1346 0560 0023     		movs	r3, #0
 1347 0562 FB60     		str	r3, [r7, #12]
1023:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1024:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1025:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
1026:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1027:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1028:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(ui8Pin < 8);
1029:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1030:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1031:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Convert from a port- pin number to a bit position.
1032:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1033:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1348              		.loc 1 1033 0
 1349 0564 7B68     		ldr	r3, [r7, #4]
 1350 0566 174A     		ldr	r2, .L69
 1351 0568 9342     		cmp	r3, r2
 1352 056a 01D1     		bne	.L63
1034:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1035:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 0;
 1353              		.loc 1 1035 0
 1354 056c 0023     		movs	r3, #0
 1355 056e FB60     		str	r3, [r7, #12]
 1356              	.L63:
1036:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1037:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1357              		.loc 1 1037 0
 1358 0570 7B68     		ldr	r3, [r7, #4]
 1359 0572 154A     		ldr	r2, .L69+4
 1360 0574 9342     		cmp	r3, r2
 1361 0576 01D1     		bne	.L64
1038:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1039:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 8;
 1362              		.loc 1 1039 0
 1363 0578 0823     		movs	r3, #8
 1364 057a FB60     		str	r3, [r7, #12]
 1365              	.L64:
1040:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1041:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1366              		.loc 1 1041 0
 1367 057c 7B68     		ldr	r3, [r7, #4]
 1368 057e 134A     		ldr	r2, .L69+8
 1369 0580 9342     		cmp	r3, r2
 1370 0582 01D1     		bne	.L65
1042:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1043:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 16;
 1371              		.loc 1 1043 0
 1372 0584 1023     		movs	r3, #16
 1373 0586 FB60     		str	r3, [r7, #12]
 1374              	.L65:
1044:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1045:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1375              		.loc 1 1045 0
 1376 0588 7B68     		ldr	r3, [r7, #4]
 1377 058a 114A     		ldr	r2, .L69+12
 1378 058c 9342     		cmp	r3, r2
 1379 058e 01D1     		bne	.L66
1046:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1047:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 24;
 1380              		.loc 1 1047 0
 1381 0590 1823     		movs	r3, #24
 1382 0592 FB60     		str	r3, [r7, #12]
 1383              	.L66:
1048:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1049:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32IntPin = 1 << (ui8Pin + ui32PortOffset);
 1384              		.loc 1 1049 0
 1385 0594 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1386 0596 FB68     		ldr	r3, [r7, #12]
 1387 0598 1344     		add	r3, r3, r2
 1388 059a 0122     		movs	r2, #1
 1389 059c 02FA03F3 		lsl	r3, r2, r3
 1390 05a0 BB60     		str	r3, [r7, #8]
1050:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1051:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1052:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Return the pin interrupt type.
1053:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1054:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(HWREG(ui32Port + GPIO_O_P_EDGE_CTRL) & ui32IntPin)
 1391              		.loc 1 1054 0
 1392 05a2 7B68     		ldr	r3, [r7, #4]
 1393 05a4 03F20473 		addw	r3, r3, #1796
 1394 05a8 1A68     		ldr	r2, [r3]
 1395 05aa BB68     		ldr	r3, [r7, #8]
 1396 05ac 1340     		ands	r3, r3, r2
 1397 05ae 002B     		cmp	r3, #0
 1398 05b0 01D0     		beq	.L67
1055:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1056:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         return(GPIO_POW_FALLING_EDGE);
 1399              		.loc 1 1056 0
 1400 05b2 0123     		movs	r3, #1
 1401 05b4 00E0     		b	.L68
 1402              	.L67:
1057:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1058:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     else
1059:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1060:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         return(GPIO_POW_RISING_EDGE);
 1403              		.loc 1 1060 0
 1404 05b6 0023     		movs	r3, #0
 1405              	.L68:
1061:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1062:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 1406              		.loc 1 1062 0
 1407 05b8 1846     		mov	r0, r3
 1408 05ba 1437     		adds	r7, r7, #20
 1409              		.cfi_def_cfa_offset 4
 1410 05bc BD46     		mov	sp, r7
 1411              		.cfi_def_cfa_register 13
 1412              		@ sp needed
 1413 05be 80BC     		pop	{r7}
 1414              		.cfi_restore 7
 1415              		.cfi_def_cfa_offset 0
 1416 05c0 7047     		bx	lr
 1417              	.L70:
 1418 05c2 00BF     		.align	2
 1419              	.L69:
 1420 05c4 00900D40 		.word	1074630656
 1421 05c8 00A00D40 		.word	1074634752
 1422 05cc 00B00D40 		.word	1074638848
 1423 05d0 00C00D40 		.word	1074642944
 1424              		.cfi_endproc
 1425              	.LFE21:
 1427              		.align	1
 1428              		.global	GPIOPowIntEnable
 1429              		.syntax unified
 1430              		.thumb
 1431              		.thumb_func
 1432              		.fpu softvfp
 1434              	GPIOPowIntEnable:
 1435              	.LFB22:
1063:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1064:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
1065:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
1066:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Enables power-up interrupts for the specified pin(s)
1067:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1068:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1069:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
1070:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1071:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Unmasks the interrupt for the specified pin(s).
1072:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1073:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
1074:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
1075:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1076:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1077:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
1078:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
1079:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
1080:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
1081:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPowIntEnable(uint32_t ui32Port, uint8_t ui8Pins)
1082:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 1436              		.loc 1 1082 0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 16
 1439              		@ frame_needed = 1, uses_anonymous_args = 0
 1440              		@ link register save eliminated.
 1441 05d4 80B4     		push	{r7}
 1442              		.cfi_def_cfa_offset 4
 1443              		.cfi_offset 7, -4
 1444 05d6 85B0     		sub	sp, sp, #20
 1445              		.cfi_def_cfa_offset 24
 1446 05d8 00AF     		add	r7, sp, #0
 1447              		.cfi_def_cfa_register 7
 1448 05da 7860     		str	r0, [r7, #4]
 1449 05dc 0B46     		mov	r3, r1
 1450 05de FB70     		strb	r3, [r7, #3]
1083:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32PortOffset;
1084:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32IntPins;
1085:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1086:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1087:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Initialize value
1088:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1089:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32PortOffset = 0;
 1451              		.loc 1 1089 0
 1452 05e0 0023     		movs	r3, #0
 1453 05e2 FB60     		str	r3, [r7, #12]
1090:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1091:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1092:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
1093:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1094:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1095:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1096:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1097:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Find bit mask for wanted pin(s)
1098:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1099:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1454              		.loc 1 1099 0
 1455 05e4 7B68     		ldr	r3, [r7, #4]
 1456 05e6 164A     		ldr	r2, .L76
 1457 05e8 9342     		cmp	r3, r2
 1458 05ea 01D1     		bne	.L72
1100:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1101:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 0;
 1459              		.loc 1 1101 0
 1460 05ec 0023     		movs	r3, #0
 1461 05ee FB60     		str	r3, [r7, #12]
 1462              	.L72:
1102:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1103:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1463              		.loc 1 1103 0
 1464 05f0 7B68     		ldr	r3, [r7, #4]
 1465 05f2 144A     		ldr	r2, .L76+4
 1466 05f4 9342     		cmp	r3, r2
 1467 05f6 01D1     		bne	.L73
1104:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1105:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 8;
 1468              		.loc 1 1105 0
 1469 05f8 0823     		movs	r3, #8
 1470 05fa FB60     		str	r3, [r7, #12]
 1471              	.L73:
1106:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1107:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1472              		.loc 1 1107 0
 1473 05fc 7B68     		ldr	r3, [r7, #4]
 1474 05fe 124A     		ldr	r2, .L76+8
 1475 0600 9342     		cmp	r3, r2
 1476 0602 01D1     		bne	.L74
1108:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1109:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 16;
 1477              		.loc 1 1109 0
 1478 0604 1023     		movs	r3, #16
 1479 0606 FB60     		str	r3, [r7, #12]
 1480              	.L74:
1110:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1111:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1481              		.loc 1 1111 0
 1482 0608 7B68     		ldr	r3, [r7, #4]
 1483 060a 104A     		ldr	r2, .L76+12
 1484 060c 9342     		cmp	r3, r2
 1485 060e 01D1     		bne	.L75
1112:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1113:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 24;
 1486              		.loc 1 1113 0
 1487 0610 1823     		movs	r3, #24
 1488 0612 FB60     		str	r3, [r7, #12]
 1489              	.L75:
1114:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1115:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1490              		.loc 1 1115 0
 1491 0614 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1492 0616 FB68     		ldr	r3, [r7, #12]
 1493 0618 02FA03F3 		lsl	r3, r2, r3
 1494 061c BB60     		str	r3, [r7, #8]
1116:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1117:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1118:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Enable the interrupts.
1119:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1120:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + GPIO_O_PI_IEN) |= ui32IntPins;
 1495              		.loc 1 1120 0
 1496 061e 7B68     		ldr	r3, [r7, #4]
 1497 0620 03F5E263 		add	r3, r3, #1808
 1498 0624 1A68     		ldr	r2, [r3]
 1499 0626 7B68     		ldr	r3, [r7, #4]
 1500 0628 03F5E263 		add	r3, r3, #1808
 1501 062c 1946     		mov	r1, r3
 1502 062e BB68     		ldr	r3, [r7, #8]
 1503 0630 1343     		orrs	r3, r3, r2
 1504 0632 0B60     		str	r3, [r1]
1121:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 1505              		.loc 1 1121 0
 1506 0634 00BF     		nop
 1507 0636 1437     		adds	r7, r7, #20
 1508              		.cfi_def_cfa_offset 4
 1509 0638 BD46     		mov	sp, r7
 1510              		.cfi_def_cfa_register 13
 1511              		@ sp needed
 1512 063a 80BC     		pop	{r7}
 1513              		.cfi_restore 7
 1514              		.cfi_def_cfa_offset 0
 1515 063c 7047     		bx	lr
 1516              	.L77:
 1517 063e 00BF     		.align	2
 1518              	.L76:
 1519 0640 00900D40 		.word	1074630656
 1520 0644 00A00D40 		.word	1074634752
 1521 0648 00B00D40 		.word	1074638848
 1522 064c 00C00D40 		.word	1074642944
 1523              		.cfi_endproc
 1524              	.LFE22:
 1526              		.align	1
 1527              		.global	GPIOPowIntDisable
 1528              		.syntax unified
 1529              		.thumb
 1530              		.thumb_func
 1531              		.fpu softvfp
 1533              	GPIOPowIntDisable:
 1534              	.LFB23:
1122:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1123:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
1124:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
1125:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Disables power-up interrupts for the specified pin(s)
1126:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1127:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1128:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
1129:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1130:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Masks the interrupt for the specified pin(s).
1131:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1132:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
1133:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
1134:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1135:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1136:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
1137:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
1138:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
1139:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
1140:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPowIntDisable(uint32_t ui32Port, uint8_t ui8Pins)
1141:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 1535              		.loc 1 1141 0
 1536              		.cfi_startproc
 1537              		@ args = 0, pretend = 0, frame = 16
 1538              		@ frame_needed = 1, uses_anonymous_args = 0
 1539              		@ link register save eliminated.
 1540 0650 80B4     		push	{r7}
 1541              		.cfi_def_cfa_offset 4
 1542              		.cfi_offset 7, -4
 1543 0652 85B0     		sub	sp, sp, #20
 1544              		.cfi_def_cfa_offset 24
 1545 0654 00AF     		add	r7, sp, #0
 1546              		.cfi_def_cfa_register 7
 1547 0656 7860     		str	r0, [r7, #4]
 1548 0658 0B46     		mov	r3, r1
 1549 065a FB70     		strb	r3, [r7, #3]
1142:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32PortOffset;
1143:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32IntPins;
1144:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1145:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1146:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Initialize value
1147:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1148:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32PortOffset = 0;
 1550              		.loc 1 1148 0
 1551 065c 0023     		movs	r3, #0
 1552 065e FB60     		str	r3, [r7, #12]
1149:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1150:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1151:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
1152:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1153:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1154:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1155:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1156:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Find bit mask for wanted pin(s)
1157:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1158:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1553              		.loc 1 1158 0
 1554 0660 7B68     		ldr	r3, [r7, #4]
 1555 0662 164A     		ldr	r2, .L83
 1556 0664 9342     		cmp	r3, r2
 1557 0666 01D1     		bne	.L79
1159:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1160:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 0;
 1558              		.loc 1 1160 0
 1559 0668 0023     		movs	r3, #0
 1560 066a FB60     		str	r3, [r7, #12]
 1561              	.L79:
1161:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1162:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1562              		.loc 1 1162 0
 1563 066c 7B68     		ldr	r3, [r7, #4]
 1564 066e 144A     		ldr	r2, .L83+4
 1565 0670 9342     		cmp	r3, r2
 1566 0672 01D1     		bne	.L80
1163:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1164:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 8;
 1567              		.loc 1 1164 0
 1568 0674 0823     		movs	r3, #8
 1569 0676 FB60     		str	r3, [r7, #12]
 1570              	.L80:
1165:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1166:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1571              		.loc 1 1166 0
 1572 0678 7B68     		ldr	r3, [r7, #4]
 1573 067a 124A     		ldr	r2, .L83+8
 1574 067c 9342     		cmp	r3, r2
 1575 067e 01D1     		bne	.L81
1167:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1168:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 16;
 1576              		.loc 1 1168 0
 1577 0680 1023     		movs	r3, #16
 1578 0682 FB60     		str	r3, [r7, #12]
 1579              	.L81:
1169:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1170:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1580              		.loc 1 1170 0
 1581 0684 7B68     		ldr	r3, [r7, #4]
 1582 0686 104A     		ldr	r2, .L83+12
 1583 0688 9342     		cmp	r3, r2
 1584 068a 01D1     		bne	.L82
1171:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1172:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 24;
 1585              		.loc 1 1172 0
 1586 068c 1823     		movs	r3, #24
 1587 068e FB60     		str	r3, [r7, #12]
 1588              	.L82:
1173:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1174:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1589              		.loc 1 1174 0
 1590 0690 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1591 0692 FB68     		ldr	r3, [r7, #12]
 1592 0694 02FA03F3 		lsl	r3, r2, r3
 1593 0698 BB60     		str	r3, [r7, #8]
1175:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1176:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1177:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Disable the interrupts.
1178:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1179:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + GPIO_O_PI_IEN) &= ~(ui32IntPins);
 1594              		.loc 1 1179 0
 1595 069a 7B68     		ldr	r3, [r7, #4]
 1596 069c 03F5E263 		add	r3, r3, #1808
 1597 06a0 1A68     		ldr	r2, [r3]
 1598 06a2 BB68     		ldr	r3, [r7, #8]
 1599 06a4 DB43     		mvns	r3, r3
 1600 06a6 7968     		ldr	r1, [r7, #4]
 1601 06a8 01F5E261 		add	r1, r1, #1808
 1602 06ac 1340     		ands	r3, r3, r2
 1603 06ae 0B60     		str	r3, [r1]
1180:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 1604              		.loc 1 1180 0
 1605 06b0 00BF     		nop
 1606 06b2 1437     		adds	r7, r7, #20
 1607              		.cfi_def_cfa_offset 4
 1608 06b4 BD46     		mov	sp, r7
 1609              		.cfi_def_cfa_register 13
 1610              		@ sp needed
 1611 06b6 80BC     		pop	{r7}
 1612              		.cfi_restore 7
 1613              		.cfi_def_cfa_offset 0
 1614 06b8 7047     		bx	lr
 1615              	.L84:
 1616 06ba 00BF     		.align	2
 1617              	.L83:
 1618 06bc 00900D40 		.word	1074630656
 1619 06c0 00A00D40 		.word	1074634752
 1620 06c4 00B00D40 		.word	1074638848
 1621 06c8 00C00D40 		.word	1074642944
 1622              		.cfi_endproc
 1623              	.LFE23:
 1625              		.align	1
 1626              		.global	GPIOPowIntStatus
 1627              		.syntax unified
 1628              		.thumb
 1629              		.thumb_func
 1630              		.fpu softvfp
 1632              	GPIOPowIntStatus:
 1633              	.LFB24:
1181:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1182:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
1183:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
1184:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Gets power-up interrupt status for the specified GPIO port
1185:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1186:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1187:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param bMasked specifies whether masked or raw interrupt status is
1188:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! returned.
1189:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1190:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! If \e bMasked is set as \b true, then the masked interrupt status is
1191:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! returned; otherwise, the raw interrupt status is returned.
1192:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1193:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return Returns a bit-packed byte, where each bit that is set identifies
1194:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! an active masked or raw interrupt, and where bit 0 of the byte
1195:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1196:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Bits 31:8 should be ignored.
1197:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
1198:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
1199:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** uint32_t
1200:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPowIntStatus(uint32_t ui32Port, bool bMasked)
1201:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 1634              		.loc 1 1201 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 16
 1637              		@ frame_needed = 1, uses_anonymous_args = 0
 1638              		@ link register save eliminated.
 1639 06cc 80B4     		push	{r7}
 1640              		.cfi_def_cfa_offset 4
 1641              		.cfi_offset 7, -4
 1642 06ce 85B0     		sub	sp, sp, #20
 1643              		.cfi_def_cfa_offset 24
 1644 06d0 00AF     		add	r7, sp, #0
 1645              		.cfi_def_cfa_register 7
 1646 06d2 7860     		str	r0, [r7, #4]
 1647 06d4 0B46     		mov	r3, r1
 1648 06d6 FB70     		strb	r3, [r7, #3]
1202:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32PortOffset;
1203:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1204:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1205:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Initialize value
1206:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1207:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32PortOffset = 0;
 1649              		.loc 1 1207 0
 1650 06d8 0023     		movs	r3, #0
 1651 06da FB60     		str	r3, [r7, #12]
1208:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1209:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
1210:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1211:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1212:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1213:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Find bit mask for wanted pin(s)
1214:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1215:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1652              		.loc 1 1215 0
 1653 06dc 7B68     		ldr	r3, [r7, #4]
 1654 06de 184A     		ldr	r2, .L92
 1655 06e0 9342     		cmp	r3, r2
 1656 06e2 01D1     		bne	.L86
1216:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1217:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 0;
 1657              		.loc 1 1217 0
 1658 06e4 0023     		movs	r3, #0
 1659 06e6 FB60     		str	r3, [r7, #12]
 1660              	.L86:
1218:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1219:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1661              		.loc 1 1219 0
 1662 06e8 7B68     		ldr	r3, [r7, #4]
 1663 06ea 164A     		ldr	r2, .L92+4
 1664 06ec 9342     		cmp	r3, r2
 1665 06ee 01D1     		bne	.L87
1220:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1221:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 8;
 1666              		.loc 1 1221 0
 1667 06f0 0823     		movs	r3, #8
 1668 06f2 FB60     		str	r3, [r7, #12]
 1669              	.L87:
1222:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1223:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1670              		.loc 1 1223 0
 1671 06f4 7B68     		ldr	r3, [r7, #4]
 1672 06f6 144A     		ldr	r2, .L92+8
 1673 06f8 9342     		cmp	r3, r2
 1674 06fa 01D1     		bne	.L88
1224:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1225:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 16;
 1675              		.loc 1 1225 0
 1676 06fc 1023     		movs	r3, #16
 1677 06fe FB60     		str	r3, [r7, #12]
 1678              	.L88:
1226:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1227:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1679              		.loc 1 1227 0
 1680 0700 7B68     		ldr	r3, [r7, #4]
 1681 0702 124A     		ldr	r2, .L92+12
 1682 0704 9342     		cmp	r3, r2
 1683 0706 01D1     		bne	.L89
1228:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1229:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 24;
 1684              		.loc 1 1229 0
 1685 0708 1823     		movs	r3, #24
 1686 070a FB60     		str	r3, [r7, #12]
 1687              	.L89:
1230:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1231:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1232:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Return the interrupt status.
1233:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(bMasked)
 1688              		.loc 1 1233 0
 1689 070c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1690 070e 002B     		cmp	r3, #0
 1691 0710 08D0     		beq	.L90
1234:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1235:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         return((HWREG(ui32Port + GPIO_O_IRQ_DETECT_ACK) >> ui32PortOffset) &
 1692              		.loc 1 1235 0
 1693 0712 7B68     		ldr	r3, [r7, #4]
 1694 0714 03F5E363 		add	r3, r3, #1816
 1695 0718 1A68     		ldr	r2, [r3]
 1696 071a FB68     		ldr	r3, [r7, #12]
 1697 071c 22FA03F3 		lsr	r3, r2, r3
 1698 0720 DBB2     		uxtb	r3, r3
 1699 0722 07E0     		b	.L91
 1700              	.L90:
1236:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                0xFF);
1237:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1238:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     else
1239:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1240:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         return((HWREG(ui32Port + GPIO_O_IRQ_DETECT_UNMASK) >> ui32PortOffset) &
 1701              		.loc 1 1240 0
 1702 0724 7B68     		ldr	r3, [r7, #4]
 1703 0726 03F5E463 		add	r3, r3, #1824
 1704 072a 1A68     		ldr	r2, [r3]
 1705 072c FB68     		ldr	r3, [r7, #12]
 1706 072e 22FA03F3 		lsr	r3, r2, r3
 1707 0732 DBB2     		uxtb	r3, r3
 1708              	.L91:
1241:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****                0xFF);
1242:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1243:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 1709              		.loc 1 1243 0
 1710 0734 1846     		mov	r0, r3
 1711 0736 1437     		adds	r7, r7, #20
 1712              		.cfi_def_cfa_offset 4
 1713 0738 BD46     		mov	sp, r7
 1714              		.cfi_def_cfa_register 13
 1715              		@ sp needed
 1716 073a 80BC     		pop	{r7}
 1717              		.cfi_restore 7
 1718              		.cfi_def_cfa_offset 0
 1719 073c 7047     		bx	lr
 1720              	.L93:
 1721 073e 00BF     		.align	2
 1722              	.L92:
 1723 0740 00900D40 		.word	1074630656
 1724 0744 00A00D40 		.word	1074634752
 1725 0748 00B00D40 		.word	1074638848
 1726 074c 00C00D40 		.word	1074642944
 1727              		.cfi_endproc
 1728              	.LFE24:
 1730              		.align	1
 1731              		.global	GPIOPowIntClear
 1732              		.syntax unified
 1733              		.thumb
 1734              		.thumb_func
 1735              		.fpu softvfp
 1737              	GPIOPowIntClear:
 1738              	.LFB25:
1244:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1245:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
1246:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
1247:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Clears the power-up interrupt for the specified pin(s)
1248:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1249:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1250:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
1251:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1252:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Clears the interrupt for the specified pin(s).
1253:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1254:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
1255:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
1256:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1257:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1258:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
1259:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
1260:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
1261:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
1262:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOPowIntClear(uint32_t ui32Port, uint8_t ui8Pins)
1263:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 1739              		.loc 1 1263 0
 1740              		.cfi_startproc
 1741              		@ args = 0, pretend = 0, frame = 16
 1742              		@ frame_needed = 1, uses_anonymous_args = 0
 1743              		@ link register save eliminated.
 1744 0750 80B4     		push	{r7}
 1745              		.cfi_def_cfa_offset 4
 1746              		.cfi_offset 7, -4
 1747 0752 85B0     		sub	sp, sp, #20
 1748              		.cfi_def_cfa_offset 24
 1749 0754 00AF     		add	r7, sp, #0
 1750              		.cfi_def_cfa_register 7
 1751 0756 7860     		str	r0, [r7, #4]
 1752 0758 0B46     		mov	r3, r1
 1753 075a FB70     		strb	r3, [r7, #3]
1264:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32PortOffset;
1265:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     uint32_t ui32IntPins;
1266:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1267:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1268:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Initialize value
1269:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1270:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32PortOffset = 0;
 1754              		.loc 1 1270 0
 1755 075c 0023     		movs	r3, #0
 1756 075e FB60     		str	r3, [r7, #12]
1271:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1272:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1273:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Check the arguments.
1274:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1275:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1276:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1277:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1278:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Find bit mask for wanted pin(s)
1279:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1280:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1757              		.loc 1 1280 0
 1758 0760 7B68     		ldr	r3, [r7, #4]
 1759 0762 164A     		ldr	r2, .L99
 1760 0764 9342     		cmp	r3, r2
 1761 0766 01D1     		bne	.L95
1281:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1282:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 0;
 1762              		.loc 1 1282 0
 1763 0768 0023     		movs	r3, #0
 1764 076a FB60     		str	r3, [r7, #12]
 1765              	.L95:
1283:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1284:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1766              		.loc 1 1284 0
 1767 076c 7B68     		ldr	r3, [r7, #4]
 1768 076e 144A     		ldr	r2, .L99+4
 1769 0770 9342     		cmp	r3, r2
 1770 0772 01D1     		bne	.L96
1285:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1286:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 8;
 1771              		.loc 1 1286 0
 1772 0774 0823     		movs	r3, #8
 1773 0776 FB60     		str	r3, [r7, #12]
 1774              	.L96:
1287:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1288:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1775              		.loc 1 1288 0
 1776 0778 7B68     		ldr	r3, [r7, #4]
 1777 077a 124A     		ldr	r2, .L99+8
 1778 077c 9342     		cmp	r3, r2
 1779 077e 01D1     		bne	.L97
1289:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1290:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 16;
 1780              		.loc 1 1290 0
 1781 0780 1023     		movs	r3, #16
 1782 0782 FB60     		str	r3, [r7, #12]
 1783              	.L97:
1291:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1292:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1784              		.loc 1 1292 0
 1785 0784 7B68     		ldr	r3, [r7, #4]
 1786 0786 104A     		ldr	r2, .L99+12
 1787 0788 9342     		cmp	r3, r2
 1788 078a 01D1     		bne	.L98
1293:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     {
1294:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****         ui32PortOffset = 24;
 1789              		.loc 1 1294 0
 1790 078c 1823     		movs	r3, #24
 1791 078e FB60     		str	r3, [r7, #12]
 1792              	.L98:
1295:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     }
1296:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1793              		.loc 1 1296 0
 1794 0790 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1795 0792 FB68     		ldr	r3, [r7, #12]
 1796 0794 02FA03F3 		lsl	r3, r2, r3
 1797 0798 BB60     		str	r3, [r7, #8]
1297:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1298:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1299:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Clear the interrupts.
1300:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1301:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(ui32Port + GPIO_O_IRQ_DETECT_ACK) |= ui32IntPins;
 1798              		.loc 1 1301 0
 1799 079a 7B68     		ldr	r3, [r7, #4]
 1800 079c 03F5E363 		add	r3, r3, #1816
 1801 07a0 1A68     		ldr	r2, [r3]
 1802 07a2 7B68     		ldr	r3, [r7, #4]
 1803 07a4 03F5E363 		add	r3, r3, #1816
 1804 07a8 1946     		mov	r1, r3
 1805 07aa BB68     		ldr	r3, [r7, #8]
 1806 07ac 1343     		orrs	r3, r3, r2
 1807 07ae 0B60     		str	r3, [r1]
1302:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 1808              		.loc 1 1302 0
 1809 07b0 00BF     		nop
 1810 07b2 1437     		adds	r7, r7, #20
 1811              		.cfi_def_cfa_offset 4
 1812 07b4 BD46     		mov	sp, r7
 1813              		.cfi_def_cfa_register 13
 1814              		@ sp needed
 1815 07b6 80BC     		pop	{r7}
 1816              		.cfi_restore 7
 1817              		.cfi_def_cfa_offset 0
 1818 07b8 7047     		bx	lr
 1819              	.L100:
 1820 07ba 00BF     		.align	2
 1821              	.L99:
 1822 07bc 00900D40 		.word	1074630656
 1823 07c0 00A00D40 		.word	1074634752
 1824 07c4 00B00D40 		.word	1074638848
 1825 07c8 00C00D40 		.word	1074642944
 1826              		.cfi_endproc
 1827              	.LFE25:
 1829              		.align	1
 1830              		.global	GPIOIntWakeupEnable
 1831              		.syntax unified
 1832              		.thumb
 1833              		.thumb_func
 1834              		.fpu softvfp
 1836              	GPIOIntWakeupEnable:
 1837              	.LFB26:
1303:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1304:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
1305:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
1306:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Enable Wake Up Interrupt
1307:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1308:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Config is the source to enable wake up on interrupt.
1309:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1310:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! This function enables wake up on interrupt from the selected sources.
1311:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1312:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The \e ui32Config argument must be one or the logical or of several of
1313:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! the following values:
1314:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1315:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \b GPIO_IWE_PORT_A, \b GPIO_IWE_PORT_B, \b GPIO_IWE_PORT_C,
1316:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \b GPIO_IWE_PORT_D, \b GPIO_IWE_USB,
1317:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \b GPIO_IWE_SM_TIMER.
1318:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1319:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
1320:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
1321:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
1322:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
1323:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOIntWakeupEnable(uint32_t ui32Config)
1324:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 1838              		.loc 1 1324 0
 1839              		.cfi_startproc
 1840              		@ args = 0, pretend = 0, frame = 8
 1841              		@ frame_needed = 1, uses_anonymous_args = 0
 1842              		@ link register save eliminated.
 1843 07cc 80B4     		push	{r7}
 1844              		.cfi_def_cfa_offset 4
 1845              		.cfi_offset 7, -4
 1846 07ce 83B0     		sub	sp, sp, #12
 1847              		.cfi_def_cfa_offset 16
 1848 07d0 00AF     		add	r7, sp, #0
 1849              		.cfi_def_cfa_register 7
 1850 07d2 7860     		str	r0, [r7, #4]
1325:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT((ui32Config &
1326:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****             (GPIO_IWE_PORT_A |
1327:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****              GPIO_IWE_PORT_B |
1328:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****              GPIO_IWE_PORT_C |
1329:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****              GPIO_IWE_PORT_D |
1330:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****              GPIO_IWE_USB |
1331:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****              GPIO_IWE_SM_TIMER)) != 0);
1332:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1333:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1334:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Enable Wakeup from selected Interrupt sources
1335:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1336:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(SYS_CTRL_IWE) |= ui32Config;
 1851              		.loc 1 1336 0
 1852 07d4 054B     		ldr	r3, .L102
 1853 07d6 1A68     		ldr	r2, [r3]
 1854 07d8 0449     		ldr	r1, .L102
 1855 07da 7B68     		ldr	r3, [r7, #4]
 1856 07dc 1343     		orrs	r3, r3, r2
 1857 07de 0B60     		str	r3, [r1]
1337:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 1858              		.loc 1 1337 0
 1859 07e0 00BF     		nop
 1860 07e2 0C37     		adds	r7, r7, #12
 1861              		.cfi_def_cfa_offset 4
 1862 07e4 BD46     		mov	sp, r7
 1863              		.cfi_def_cfa_register 13
 1864              		@ sp needed
 1865 07e6 80BC     		pop	{r7}
 1866              		.cfi_restore 7
 1867              		.cfi_def_cfa_offset 0
 1868 07e8 7047     		bx	lr
 1869              	.L103:
 1870 07ea 00BF     		.align	2
 1871              	.L102:
 1872 07ec 94200D40 		.word	1074602132
 1873              		.cfi_endproc
 1874              	.LFE26:
 1876              		.align	1
 1877              		.global	GPIOIntWakeupDisable
 1878              		.syntax unified
 1879              		.thumb
 1880              		.thumb_func
 1881              		.fpu softvfp
 1883              	GPIOIntWakeupDisable:
 1884              	.LFB27:
1338:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1339:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
1340:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
1341:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! Disable Wake Up Interrupt
1342:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1343:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \param ui32Config is the source to disable wake on interrupt from.
1344:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1345:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! This function disables Wake up on interrupt from the selected sources.
1346:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1347:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! The \e ui32Config argument must be one or the logical or of several of
1348:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! the following values:
1349:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1350:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \b GPIO_IWE_PORT_A, \b GPIO_IWE_PORT_B, \b GPIO_IWE_PORT_C,
1351:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \b GPIO_IWE_PORT_D, \b GPIO_IWE_USB,
1352:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \b GPIO_IWE_SM_TIMER,
1353:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //!
1354:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //! \return None
1355:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //
1356:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** //*****************************************************************************
1357:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** void
1358:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** GPIOIntWakeupDisable(uint32_t ui32Config)
1359:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** {
 1885              		.loc 1 1359 0
 1886              		.cfi_startproc
 1887              		@ args = 0, pretend = 0, frame = 8
 1888              		@ frame_needed = 1, uses_anonymous_args = 0
 1889              		@ link register save eliminated.
 1890 07f0 80B4     		push	{r7}
 1891              		.cfi_def_cfa_offset 4
 1892              		.cfi_offset 7, -4
 1893 07f2 83B0     		sub	sp, sp, #12
 1894              		.cfi_def_cfa_offset 16
 1895 07f4 00AF     		add	r7, sp, #0
 1896              		.cfi_def_cfa_register 7
 1897 07f6 7860     		str	r0, [r7, #4]
1360:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     ASSERT((ui32Config &
1361:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****             (GPIO_IWE_PORT_A |
1362:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****              GPIO_IWE_PORT_B |
1363:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****              GPIO_IWE_PORT_C |
1364:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****              GPIO_IWE_PORT_D |
1365:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****              GPIO_IWE_USB |
1366:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****              GPIO_IWE_SM_TIMER)) != 0);
1367:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** 
1368:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1369:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     // Disable Wakeup from selected Interrupt sources
1370:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     //
1371:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c ****     HWREG(SYS_CTRL_IWE) &= ~ui32Config;
 1898              		.loc 1 1371 0
 1899 07f8 054B     		ldr	r3, .L105
 1900 07fa 1A68     		ldr	r2, [r3]
 1901 07fc 7B68     		ldr	r3, [r7, #4]
 1902 07fe DB43     		mvns	r3, r3
 1903 0800 0349     		ldr	r1, .L105
 1904 0802 1340     		ands	r3, r3, r2
 1905 0804 0B60     		str	r3, [r1]
1372:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/gpio.c **** }
 1906              		.loc 1 1372 0
 1907 0806 00BF     		nop
 1908 0808 0C37     		adds	r7, r7, #12
 1909              		.cfi_def_cfa_offset 4
 1910 080a BD46     		mov	sp, r7
 1911              		.cfi_def_cfa_register 13
 1912              		@ sp needed
 1913 080c 80BC     		pop	{r7}
 1914              		.cfi_restore 7
 1915              		.cfi_def_cfa_offset 0
 1916 080e 7047     		bx	lr
 1917              	.L106:
 1918              		.align	2
 1919              	.L105:
 1920 0810 94200D40 		.word	1074602132
 1921              		.cfi_endproc
 1922              	.LFE27:
 1924              	.Letext0:
 1925              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 1926              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
DEFINED SYMBOLS
                            *ABS*:00000000 gpio.c
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:15     .text:00000000 $t
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:22     .text:00000000 GPIOGetIntNumber
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:104    .text:00000054 $d
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:111    .text:00000064 $t
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:118    .text:00000064 GPIODirModeSet
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:211    .text:000000d8 GPIODirModeGet
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:289    .text:00000130 GPIOIntTypeSet
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:409    .text:000001d2 GPIOIntTypeGet
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:506    .text:00000246 GPIOPinIntEnable
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:553    .text:00000270 GPIOPinIntDisable
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:602    .text:0000029e GPIOPinIntStatus
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:655    .text:000002cc GPIOPinIntClear
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:699    .text:000002ee GPIOPortIntRegister
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:744    .text:00000316 GPIOPortIntUnregister
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:787    .text:0000033a GPIOPinRead
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:832    .text:0000035c GPIOPinWrite
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:881    .text:00000386 GPIOPinTypeGPIOInput
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:928    .text:000003b2 GPIOPinTypeGPIOOutput
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:975    .text:000003de GPIOPinTypeI2C
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1022   .text:0000040a GPIOPinTypeSSI
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1069   .text:00000436 GPIOPinTypeTimer
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1116   .text:00000462 GPIOPinTypeUARTInput
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1163   .text:0000048e GPIOPinTypeUARTOutput
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1210   .text:000004ba GPIOPowIntTypeSet
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1314   .text:00000544 $d
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1321   .text:00000554 $t
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1328   .text:00000554 GPIOPowIntTypeGet
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1420   .text:000005c4 $d
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1427   .text:000005d4 $t
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1434   .text:000005d4 GPIOPowIntEnable
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1519   .text:00000640 $d
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1526   .text:00000650 $t
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1533   .text:00000650 GPIOPowIntDisable
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1618   .text:000006bc $d
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1625   .text:000006cc $t
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1632   .text:000006cc GPIOPowIntStatus
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1723   .text:00000740 $d
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1730   .text:00000750 $t
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1737   .text:00000750 GPIOPowIntClear
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1822   .text:000007bc $d
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1829   .text:000007cc $t
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1836   .text:000007cc GPIOIntWakeupEnable
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1872   .text:000007ec $d
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1876   .text:000007f0 $t
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1883   .text:000007f0 GPIOIntWakeupDisable
C:\Users\Lee\AppData\Local\Temp\cce3S9bx.s:1920   .text:00000810 $d
                           .group:00000000 wm4.0.93d65e4ff05d5af51629690e5b534e57
                           .group:00000000 wm4.hw_gpio.h.39.abbe53cff9a4c1fb5f1c34960fe1e7aa
                           .group:00000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:00000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:00000000 wm4.hw_sys_ctrl.h.39.50b4d7775c38e82076d0eb3bdc2daf82
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:00000000 wm4.gpio.h.41.604fa3d9f70fb140a75ada50bffeaeff
                           .group:00000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:00000000 wm4.ioc.h.41.7444fe7016a1d045dd9fea497d615b28

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
IOCPadConfigSet
