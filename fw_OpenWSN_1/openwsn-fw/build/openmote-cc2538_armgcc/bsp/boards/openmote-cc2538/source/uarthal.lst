   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"uarthal.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.global	UARTParityModeSet
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	UARTParityModeSet:
  23              	.LFB0:
  24              		.file 1 "build\\openmote-cc2538_armgcc\\bsp\\boards\\openmote-cc2538\\source\\uarthal.c"
   1:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** /******************************************************************************
   2:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  Filename:       uart.c
   3:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  Revised:        $Date: 2013-04-16 12:01:40 +0200 (Tue, 16 Apr 2013) $
   4:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  Revision:       $Revision: 9777 $
   5:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *
   6:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  Description:    Driver for the UART.
   7:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *
   8:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *
  10:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *
  11:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  Redistribution and use in source and binary forms, with or without
  12:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  modification, are permitted provided that the following conditions
  13:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  are met:
  14:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *
  15:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *    Redistributions of source code must retain the above copyright
  16:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *    notice, this list of conditions and the following disclaimer.
  17:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *
  18:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *    documentation and/or other materials provided with the distribution.
  21:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *
  22:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *    its contributors may be used to endorse or promote products derived
  24:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *    from this software without specific prior written permission.
  25:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *
  26:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** *
  38:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** ******************************************************************************/
  39:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
  40:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
  41:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
  42:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \addtogroup uart_api
  43:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! @{
  44:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
  45:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
  46:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
  47:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** #include <headers/hw_ints.h>
  48:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** #include <headers/hw_memmap.h>
  49:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** #include <headers/hw_sys_ctrl.h>
  50:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** #include <headers/hw_uart.h>
  51:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** #include "debug.h"
  52:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** #include "interrupt.h"
  53:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** #include "uarthal.h"
  54:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
  55:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
  56:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
  57:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \internal
  58:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Checks a UART base address
  59:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
  60:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
  61:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
  62:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function determines if a UART port base address is valid.
  63:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
  64:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return Returns \b true if the base address is valid and \b false
  65:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! otherwise.
  66:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
  67:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
  68:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** #ifdef ENABLE_ASSERT
  69:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** static bool
  70:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTBaseValid(uint32_t ui32Base)
  71:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
  72:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     return((ui32Base == UART0_BASE) || (ui32Base == UART1_BASE));
  73:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
  74:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** #endif
  75:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
  76:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
  77:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
  78:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Sets the type of parity
  79:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
  80:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
  81:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Parity specifies the type of parity to use.
  82:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
  83:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function sets the type of parity to use for transmitting and expect
  84:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! when receiving.  The \e ui32Parity parameter must be one of
  85:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_CONFIG_PAR_NONE, \b UART_CONFIG_PAR_EVEN, \b UART_CONFIG_PAR_ODD,
  86:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_CONFIG_PAR_ONE, or \b UART_CONFIG_PAR_ZERO.  The last two allow
  87:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! direct control of the parity bit; it is always either one or zero based on
  88:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the mode.
  89:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
  90:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
  91:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
  92:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
  93:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
  94:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTParityModeSet(uint32_t ui32Base, uint32_t ui32Parity)
  95:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
  25              		.loc 1 95 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 80B4     		push	{r7}
  31              		.cfi_def_cfa_offset 4
  32              		.cfi_offset 7, -4
  33 0002 83B0     		sub	sp, sp, #12
  34              		.cfi_def_cfa_offset 16
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 7860     		str	r0, [r7, #4]
  38 0008 3960     		str	r1, [r7]
  96:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
  97:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
  98:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
  99:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 100:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT((ui32Parity == UART_CONFIG_PAR_NONE) ||
 101:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_EVEN) ||
 102:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_ODD) ||
 103:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_ONE) ||
 104:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_ZERO));
 105:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 106:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 107:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Set the parity mode.
 108:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 109:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ((HWREG(ui32Base + UART_O_LCRH) &
  39              		.loc 1 109 0
  40 000a 7B68     		ldr	r3, [r7, #4]
  41 000c 2C33     		adds	r3, r3, #44
  42 000e 1B68     		ldr	r3, [r3]
  43 0010 23F08602 		bic	r2, r3, #134
  44 0014 7B68     		ldr	r3, [r7, #4]
  45 0016 2C33     		adds	r3, r3, #44
  46 0018 1946     		mov	r1, r3
 110:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                                       ~(UART_LCRH_SPS | UART_LCRH_EPS |
 111:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                                         UART_LCRH_PEN)) | ui32Parity);
  47              		.loc 1 111 0
  48 001a 3B68     		ldr	r3, [r7]
  49 001c 1343     		orrs	r3, r3, r2
 109:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                                       ~(UART_LCRH_SPS | UART_LCRH_EPS |
  50              		.loc 1 109 0
  51 001e 0B60     		str	r3, [r1]
 112:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
  52              		.loc 1 112 0
  53 0020 00BF     		nop
  54 0022 0C37     		adds	r7, r7, #12
  55              		.cfi_def_cfa_offset 4
  56 0024 BD46     		mov	sp, r7
  57              		.cfi_def_cfa_register 13
  58              		@ sp needed
  59 0026 80BC     		pop	{r7}
  60              		.cfi_restore 7
  61              		.cfi_def_cfa_offset 0
  62 0028 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE0:
  66              		.align	1
  67              		.global	UARTParityModeGet
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu softvfp
  73              	UARTParityModeGet:
  74              	.LFB1:
 113:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 114:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 115:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 116:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Gets the type of parity currently being used
 117:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 118:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 119:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 120:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function gets the type of parity used for transmitting data and
 121:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! expected when receiving data.
 122:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 123:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return Returns the current parity settings, specified as one of
 124:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_CONFIG_PAR_NONE, \b UART_CONFIG_PAR_EVEN, \b UART_CONFIG_PAR_ODD,
 125:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_CONFIG_PAR_ONE, or \b UART_CONFIG_PAR_ZERO.
 126:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 127:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 128:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** uint32_t
 129:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTParityModeGet(uint32_t ui32Base)
 130:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
  75              		.loc 1 130 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 8
  78              		@ frame_needed = 1, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  80 002a 80B4     		push	{r7}
  81              		.cfi_def_cfa_offset 4
  82              		.cfi_offset 7, -4
  83 002c 83B0     		sub	sp, sp, #12
  84              		.cfi_def_cfa_offset 16
  85 002e 00AF     		add	r7, sp, #0
  86              		.cfi_def_cfa_register 7
  87 0030 7860     		str	r0, [r7, #4]
 131:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 132:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 133:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 134:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 135:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 136:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 137:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Return the current parity setting.
 138:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 139:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     return(HWREG(ui32Base + UART_O_LCRH) &
  88              		.loc 1 139 0
  89 0032 7B68     		ldr	r3, [r7, #4]
  90 0034 2C33     		adds	r3, r3, #44
  91 0036 1B68     		ldr	r3, [r3]
  92 0038 03F08603 		and	r3, r3, #134
 140:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****            (UART_LCRH_SPS | UART_LCRH_EPS | UART_LCRH_PEN));
 141:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
  93              		.loc 1 141 0
  94 003c 1846     		mov	r0, r3
  95 003e 0C37     		adds	r7, r7, #12
  96              		.cfi_def_cfa_offset 4
  97 0040 BD46     		mov	sp, r7
  98              		.cfi_def_cfa_register 13
  99              		@ sp needed
 100 0042 80BC     		pop	{r7}
 101              		.cfi_restore 7
 102              		.cfi_def_cfa_offset 0
 103 0044 7047     		bx	lr
 104              		.cfi_endproc
 105              	.LFE1:
 107              		.align	1
 108              		.global	UARTFIFOLevelSet
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu softvfp
 114              	UARTFIFOLevelSet:
 115              	.LFB2:
 142:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 143:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 144:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 145:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Sets the FIFO level at which interrupts are generated
 146:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 147:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 148:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32TxLevel is the transmit FIFO interrupt level, specified as one of
 149:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_FIFO_TX1_8, \b UART_FIFO_TX2_8, \b UART_FIFO_TX4_8,
 150:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_FIFO_TX6_8, or \b UART_FIFO_TX7_8.
 151:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32RxLevel is the receive FIFO interrupt level, specified as one of
 152:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_FIFO_RX1_8, \b UART_FIFO_RX2_8, \b UART_FIFO_RX4_8,
 153:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_FIFO_RX6_8, or \b UART_FIFO_RX7_8.
 154:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 155:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function sets the FIFO level at which transmit and receive interrupts
 156:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! are generated.
 157:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 158:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 159:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 160:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 161:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 162:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTFIFOLevelSet(uint32_t ui32Base, uint32_t ui32TxLevel,
 163:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                  uint32_t ui32RxLevel)
 164:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 116              		.loc 1 164 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 16
 119              		@ frame_needed = 1, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121 0046 80B4     		push	{r7}
 122              		.cfi_def_cfa_offset 4
 123              		.cfi_offset 7, -4
 124 0048 85B0     		sub	sp, sp, #20
 125              		.cfi_def_cfa_offset 24
 126 004a 00AF     		add	r7, sp, #0
 127              		.cfi_def_cfa_register 7
 128 004c F860     		str	r0, [r7, #12]
 129 004e B960     		str	r1, [r7, #8]
 130 0050 7A60     		str	r2, [r7, #4]
 165:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 166:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 167:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 168:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 169:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT((ui32TxLevel == UART_FIFO_TX1_8) ||
 170:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX2_8) ||
 171:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX4_8) ||
 172:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX6_8) ||
 173:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX7_8));
 174:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT((ui32RxLevel == UART_FIFO_RX1_8) ||
 175:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX2_8) ||
 176:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX4_8) ||
 177:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX6_8) ||
 178:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX7_8));
 179:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 180:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 181:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Set the FIFO interrupt levels.
 182:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 183:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 131              		.loc 1 183 0
 132 0052 FB68     		ldr	r3, [r7, #12]
 133 0054 3433     		adds	r3, r3, #52
 134 0056 1946     		mov	r1, r3
 135 0058 BA68     		ldr	r2, [r7, #8]
 136 005a 7B68     		ldr	r3, [r7, #4]
 137 005c 1343     		orrs	r3, r3, r2
 138 005e 0B60     		str	r3, [r1]
 184:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 139              		.loc 1 184 0
 140 0060 00BF     		nop
 141 0062 1437     		adds	r7, r7, #20
 142              		.cfi_def_cfa_offset 4
 143 0064 BD46     		mov	sp, r7
 144              		.cfi_def_cfa_register 13
 145              		@ sp needed
 146 0066 80BC     		pop	{r7}
 147              		.cfi_restore 7
 148              		.cfi_def_cfa_offset 0
 149 0068 7047     		bx	lr
 150              		.cfi_endproc
 151              	.LFE2:
 153              		.align	1
 154              		.global	UARTFIFOLevelGet
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu softvfp
 160              	UARTFIFOLevelGet:
 161              	.LFB3:
 185:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 186:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 187:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 188:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Gets the FIFO level at which interrupts are generated
 189:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 190:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 191:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param pui32TxLevel is a pointer to storage for the transmit FIFO level,
 192:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! returned as one of \b UART_FIFO_TX1_8, \b UART_FIFO_TX2_8,
 193:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_FIFO_TX4_8, \b UART_FIFO_TX6_8, or \b UART_FIFO_TX7_8.
 194:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param pui32RxLevel is a pointer to storage for the receive FIFO level,
 195:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! returned as one of \b UART_FIFO_RX1_8, \b UART_FIFO_RX2_8,
 196:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_FIFO_RX4_8, \b UART_FIFO_RX6_8, or \b UART_FIFO_RX7_8.
 197:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 198:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function gets the FIFO level at which transmit and receive interrupts
 199:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! are generated.
 200:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 201:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 202:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 203:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 204:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 205:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTFIFOLevelGet(uint32_t ui32Base, uint32_t *pui32TxLevel,
 206:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                  uint32_t *pui32RxLevel)
 207:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 162              		.loc 1 207 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 24
 165              		@ frame_needed = 1, uses_anonymous_args = 0
 166              		@ link register save eliminated.
 167 006a 80B4     		push	{r7}
 168              		.cfi_def_cfa_offset 4
 169              		.cfi_offset 7, -4
 170 006c 87B0     		sub	sp, sp, #28
 171              		.cfi_def_cfa_offset 32
 172 006e 00AF     		add	r7, sp, #0
 173              		.cfi_def_cfa_register 7
 174 0070 F860     		str	r0, [r7, #12]
 175 0072 B960     		str	r1, [r7, #8]
 176 0074 7A60     		str	r2, [r7, #4]
 208:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     uint32_t ui32Temp;
 209:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 210:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 211:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 212:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 213:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 214:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 215:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 216:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Read the FIFO level register.
 217:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 218:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ui32Temp = HWREG(ui32Base + UART_O_IFLS);
 177              		.loc 1 218 0
 178 0076 FB68     		ldr	r3, [r7, #12]
 179 0078 3433     		adds	r3, r3, #52
 180 007a 1B68     		ldr	r3, [r3]
 181 007c 7B61     		str	r3, [r7, #20]
 219:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 220:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 221:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Extract the transmit and receive FIFO levels.
 222:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 223:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     *pui32TxLevel = ui32Temp & UART_IFLS_TXIFLSEL_M;
 182              		.loc 1 223 0
 183 007e 7B69     		ldr	r3, [r7, #20]
 184 0080 03F00702 		and	r2, r3, #7
 185 0084 BB68     		ldr	r3, [r7, #8]
 186 0086 1A60     		str	r2, [r3]
 224:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     *pui32RxLevel = ui32Temp & UART_IFLS_RXIFLSEL_M;
 187              		.loc 1 224 0
 188 0088 7B69     		ldr	r3, [r7, #20]
 189 008a 03F03802 		and	r2, r3, #56
 190 008e 7B68     		ldr	r3, [r7, #4]
 191 0090 1A60     		str	r2, [r3]
 225:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 192              		.loc 1 225 0
 193 0092 00BF     		nop
 194 0094 1C37     		adds	r7, r7, #28
 195              		.cfi_def_cfa_offset 4
 196 0096 BD46     		mov	sp, r7
 197              		.cfi_def_cfa_register 13
 198              		@ sp needed
 199 0098 80BC     		pop	{r7}
 200              		.cfi_restore 7
 201              		.cfi_def_cfa_offset 0
 202 009a 7047     		bx	lr
 203              		.cfi_endproc
 204              	.LFE3:
 206              		.align	1
 207              		.global	UARTConfigSetExpClk
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 211              		.fpu softvfp
 213              	UARTConfigSetExpClk:
 214              	.LFB4:
 226:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 227:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 228:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 229:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Sets the configuration of a UART
 230:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 231:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 232:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32UARTClk is the rate of the clock supplied to the UART module.
 233:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Baud is the desired baud rate.
 234:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Config is the data format for the port (number of data bits,
 235:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! number of stop bits, and parity).
 236:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 237:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function configures the UART for operation in the specified data
 238:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! format.  The baud rate is provided in the \e ui32Baud parameter and the data
 239:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! format in the \e ui32Config parameter.
 240:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 241:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! The \e ui32Config parameter is the logical OR of three values: the number of
 242:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! data bits, the number of stop bits, and the parity.  \b UART_CONFIG_WLEN_8,
 243:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_CONFIG_WLEN_7, \b UART_CONFIG_WLEN_6, and \b UART_CONFIG_WLEN_5
 244:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! select from eight to five data bits per byte (respectively).
 245:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_CONFIG_STOP_ONE and \b UART_CONFIG_STOP_TWO select one or two stop
 246:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! bits (respectively).  \b UART_CONFIG_PAR_NONE, \b UART_CONFIG_PAR_EVEN,
 247:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_CONFIG_PAR_ODD, \b UART_CONFIG_PAR_ONE, and \b UART_CONFIG_PAR_ZERO
 248:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! select the parity mode (no parity bit, even parity bit, odd parity bit,
 249:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! parity bit always one, and parity bit always zero, respectively).
 250:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 251:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! The peripheral clock is set in the System Control module.  The frequency of
 252:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the system clock is the value returned by SysCtrlClockGet() or
 253:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! SysCtrlIOClockGet() depending on the chosen clock source as set by
 254:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! UARTClockSourceSet(), or it can be explicitly hard coded if it is constant
 255:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! and known (to save the code/execution overhead of a call to
 256:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! SysCtrlClockGet() or SysCtrlIOClockGet()).
 257:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 258:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! The CC2538 part has the ability to specify the UART baud clock
 259:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! source (via UARTClockSourceSet()), the peripheral clock can be changed to
 260:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! PIOSC.  In this case, the peripheral clock should be specified as
 261:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! 16,000,000 (the nominal rate of PIOSC).
 262:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 263:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \sa See  UARTClockSourceSet()
 264:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 265:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 266:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 267:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 268:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 269:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTConfigSetExpClk(uint32_t ui32Base, uint32_t ui32UARTClk,
 270:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                     uint32_t ui32Baud, uint32_t ui32Config)
 271:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 215              		.loc 1 271 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 24
 218              		@ frame_needed = 1, uses_anonymous_args = 0
 219 009c 80B5     		push	{r7, lr}
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 7, -8
 222              		.cfi_offset 14, -4
 223 009e 86B0     		sub	sp, sp, #24
 224              		.cfi_def_cfa_offset 32
 225 00a0 00AF     		add	r7, sp, #0
 226              		.cfi_def_cfa_register 7
 227 00a2 F860     		str	r0, [r7, #12]
 228 00a4 B960     		str	r1, [r7, #8]
 229 00a6 7A60     		str	r2, [r7, #4]
 230 00a8 3B60     		str	r3, [r7]
 272:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     uint32_t ui32Div;
 273:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 274:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 275:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 276:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 277:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 278:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(ui32Baud != 0);
 279:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 280:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 281:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Stop the UART.
 282:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 283:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     UARTDisable(ui32Base);
 231              		.loc 1 283 0
 232 00aa F868     		ldr	r0, [r7, #12]
 233 00ac FFF7FEFF 		bl	UARTDisable
 284:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 285:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 286:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Is the required baud rate greater than the maximum rate supported
 287:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // without the use of high speed mode?
 288:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 289:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     if((ui32Baud * 16) > ui32UARTClk)
 234              		.loc 1 289 0
 235 00b0 7B68     		ldr	r3, [r7, #4]
 236 00b2 1B01     		lsls	r3, r3, #4
 237 00b4 BA68     		ldr	r2, [r7, #8]
 238 00b6 9A42     		cmp	r2, r3
 239 00b8 0BD2     		bcs	.L7
 290:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
 291:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 292:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         // Enable high speed mode.
 293:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 294:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) |= UART_CTL_HSE;
 240              		.loc 1 294 0
 241 00ba FB68     		ldr	r3, [r7, #12]
 242 00bc 3033     		adds	r3, r3, #48
 243 00be 1B68     		ldr	r3, [r3]
 244 00c0 FA68     		ldr	r2, [r7, #12]
 245 00c2 3032     		adds	r2, r2, #48
 246 00c4 43F02003 		orr	r3, r3, #32
 247 00c8 1360     		str	r3, [r2]
 295:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 296:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 297:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         // Half the supplied baud rate to compensate for enabling high speed
 298:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         // mode.  This allows the following code to be common to both cases.
 299:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 300:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         ui32Baud /= 2;
 248              		.loc 1 300 0
 249 00ca 7B68     		ldr	r3, [r7, #4]
 250 00cc 5B08     		lsrs	r3, r3, #1
 251 00ce 7B60     		str	r3, [r7, #4]
 252 00d0 07E0     		b	.L8
 253              	.L7:
 301:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
 302:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     else
 303:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
 304:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 305:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         // Disable high speed mode.
 306:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 307:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) &= ~(UART_CTL_HSE);
 254              		.loc 1 307 0
 255 00d2 FB68     		ldr	r3, [r7, #12]
 256 00d4 3033     		adds	r3, r3, #48
 257 00d6 1B68     		ldr	r3, [r3]
 258 00d8 FA68     		ldr	r2, [r7, #12]
 259 00da 3032     		adds	r2, r2, #48
 260 00dc 23F02003 		bic	r3, r3, #32
 261 00e0 1360     		str	r3, [r2]
 262              	.L8:
 308:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
 309:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 310:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 311:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Compute the fractional baud rate divider.
 312:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 313:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ui32Div = (((ui32UARTClk * 8) / ui32Baud) + 1) / 2;
 263              		.loc 1 313 0
 264 00e2 BB68     		ldr	r3, [r7, #8]
 265 00e4 DA00     		lsls	r2, r3, #3
 266 00e6 7B68     		ldr	r3, [r7, #4]
 267 00e8 B2FBF3F3 		udiv	r3, r2, r3
 268 00ec 0133     		adds	r3, r3, #1
 269 00ee 5B08     		lsrs	r3, r3, #1
 270 00f0 7B61     		str	r3, [r7, #20]
 314:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 315:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 316:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Set the baud rate.
 317:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 318:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_IBRD) = ui32Div / 64;
 271              		.loc 1 318 0
 272 00f2 FB68     		ldr	r3, [r7, #12]
 273 00f4 2433     		adds	r3, r3, #36
 274 00f6 1A46     		mov	r2, r3
 275 00f8 7B69     		ldr	r3, [r7, #20]
 276 00fa 9B09     		lsrs	r3, r3, #6
 277 00fc 1360     		str	r3, [r2]
 319:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_FBRD) = ui32Div % 64;
 278              		.loc 1 319 0
 279 00fe FB68     		ldr	r3, [r7, #12]
 280 0100 2833     		adds	r3, r3, #40
 281 0102 1A46     		mov	r2, r3
 282 0104 7B69     		ldr	r3, [r7, #20]
 283 0106 03F03F03 		and	r3, r3, #63
 284 010a 1360     		str	r3, [r2]
 320:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 321:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 322:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Set parity, data length, and number of stop bits.
 323:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 324:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ui32Config;
 285              		.loc 1 324 0
 286 010c FB68     		ldr	r3, [r7, #12]
 287 010e 2C33     		adds	r3, r3, #44
 288 0110 1A46     		mov	r2, r3
 289 0112 3B68     		ldr	r3, [r7]
 290 0114 1360     		str	r3, [r2]
 325:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 326:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 327:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Clear the flags register.
 328:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 329:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_FR) = 0;
 291              		.loc 1 329 0
 292 0116 FB68     		ldr	r3, [r7, #12]
 293 0118 1833     		adds	r3, r3, #24
 294 011a 1A46     		mov	r2, r3
 295 011c 0023     		movs	r3, #0
 296 011e 1360     		str	r3, [r2]
 330:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 297              		.loc 1 330 0
 298 0120 00BF     		nop
 299 0122 1837     		adds	r7, r7, #24
 300              		.cfi_def_cfa_offset 8
 301 0124 BD46     		mov	sp, r7
 302              		.cfi_def_cfa_register 13
 303              		@ sp needed
 304 0126 80BD     		pop	{r7, pc}
 305              		.cfi_endproc
 306              	.LFE4:
 308              		.align	1
 309              		.global	UARTConfigGetExpClk
 310              		.syntax unified
 311              		.thumb
 312              		.thumb_func
 313              		.fpu softvfp
 315              	UARTConfigGetExpClk:
 316              	.LFB5:
 331:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 332:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 333:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 334:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Gets the current configuration of a UART
 335:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 336:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 337:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32UARTClk is the rate of the clock supplied to the UART module.
 338:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param pui32Baud is a pointer to storage for the baud rate.
 339:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param pui32Config is a pointer to storage for the data format.
 340:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 341:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! The baud rate and data format for the UART is determined, given an
 342:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! explicitly provided peripheral clock (hence the ExpClk suffix).  The
 343:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! returned baud rate is the actual baud rate; it may not be the exact baud
 344:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! rate requested or an ``official'' baud rate.  The data format returned in
 345:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \e pui32Config is enumerated the same as the \e ui32Config parameter of
 346:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! UARTConfigSetExpClk().
 347:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 348:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! The peripheral clock is set in the System Control module.  The frequency of
 349:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the system clock is the value returned by SysCtrlClockGet() or
 350:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! SysCtrlIOClockGet() depending on the chosen clock source as set by
 351:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! UARTClockSourceSet(), or it can be explicitly hard coded if it is constant
 352:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! and known (to save the code/execution overhead of a call to
 353:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! SysCtrlClockGet() or SysCtrlIOClockGet()).
 354:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 355:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! The CC2538 part has the ability to specify the UART baud clock
 356:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! source (via UARTClockSourceSet()), the peripheral clock can be changed to
 357:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! PIOSC.  In this case, the peripheral clock should be specified as
 358:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! 16,000,000 (the nominal rate of PIOSC).
 359:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 360:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 361:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 362:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 363:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 364:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTConfigGetExpClk(uint32_t ui32Base, uint32_t ui32UARTClk,
 365:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                     uint32_t *pui32Baud, uint32_t *pui32Config)
 366:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 317              		.loc 1 366 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 24
 320              		@ frame_needed = 1, uses_anonymous_args = 0
 321              		@ link register save eliminated.
 322 0128 80B4     		push	{r7}
 323              		.cfi_def_cfa_offset 4
 324              		.cfi_offset 7, -4
 325 012a 87B0     		sub	sp, sp, #28
 326              		.cfi_def_cfa_offset 32
 327 012c 00AF     		add	r7, sp, #0
 328              		.cfi_def_cfa_register 7
 329 012e F860     		str	r0, [r7, #12]
 330 0130 B960     		str	r1, [r7, #8]
 331 0132 7A60     		str	r2, [r7, #4]
 332 0134 3B60     		str	r3, [r7]
 367:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     uint32_t ui32Int, ui32Frac;
 368:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 369:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 370:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 371:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 372:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 373:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 374:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 375:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Compute the baud rate.
 376:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 377:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ui32Int = HWREG(ui32Base + UART_O_IBRD);
 333              		.loc 1 377 0
 334 0136 FB68     		ldr	r3, [r7, #12]
 335 0138 2433     		adds	r3, r3, #36
 336 013a 1B68     		ldr	r3, [r3]
 337 013c 7B61     		str	r3, [r7, #20]
 378:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ui32Frac = HWREG(ui32Base + UART_O_FBRD);
 338              		.loc 1 378 0
 339 013e FB68     		ldr	r3, [r7, #12]
 340 0140 2833     		adds	r3, r3, #40
 341 0142 1B68     		ldr	r3, [r3]
 342 0144 3B61     		str	r3, [r7, #16]
 379:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     *pui32Baud = (ui32UARTClk * 4) / ((64 * ui32Int) + ui32Frac);
 343              		.loc 1 379 0
 344 0146 BB68     		ldr	r3, [r7, #8]
 345 0148 9A00     		lsls	r2, r3, #2
 346 014a 7B69     		ldr	r3, [r7, #20]
 347 014c 9901     		lsls	r1, r3, #6
 348 014e 3B69     		ldr	r3, [r7, #16]
 349 0150 0B44     		add	r3, r3, r1
 350 0152 B2FBF3F2 		udiv	r2, r2, r3
 351 0156 7B68     		ldr	r3, [r7, #4]
 352 0158 1A60     		str	r2, [r3]
 380:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 381:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 382:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // See if high speed mode enabled.
 383:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 384:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     if(HWREG(ui32Base + UART_O_CTL) & UART_CTL_HSE)
 353              		.loc 1 384 0
 354 015a FB68     		ldr	r3, [r7, #12]
 355 015c 3033     		adds	r3, r3, #48
 356 015e 1B68     		ldr	r3, [r3]
 357 0160 03F02003 		and	r3, r3, #32
 358 0164 002B     		cmp	r3, #0
 359 0166 04D0     		beq	.L10
 385:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
 386:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 387:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         // High speed mode is enabled so the actual baud rate is actually
 388:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         // double what was just calculated.
 389:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 390:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         *pui32Baud *= 2;
 360              		.loc 1 390 0
 361 0168 7B68     		ldr	r3, [r7, #4]
 362 016a 1B68     		ldr	r3, [r3]
 363 016c 5A00     		lsls	r2, r3, #1
 364 016e 7B68     		ldr	r3, [r7, #4]
 365 0170 1A60     		str	r2, [r3]
 366              	.L10:
 391:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
 392:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 393:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 394:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Get the parity, data length, and number of stop bits.
 395:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 396:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     *pui32Config = (HWREG(ui32Base + UART_O_LCRH) &
 367              		.loc 1 396 0
 368 0172 FB68     		ldr	r3, [r7, #12]
 369 0174 2C33     		adds	r3, r3, #44
 370 0176 1B68     		ldr	r3, [r3]
 371 0178 03F0EE02 		and	r2, r3, #238
 372 017c 3B68     		ldr	r3, [r7]
 373 017e 1A60     		str	r2, [r3]
 397:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                     (UART_LCRH_SPS | UART_LCRH_WLEN_M | UART_LCRH_STP2 |
 398:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                      UART_LCRH_EPS | UART_LCRH_PEN));
 399:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 374              		.loc 1 399 0
 375 0180 00BF     		nop
 376 0182 1C37     		adds	r7, r7, #28
 377              		.cfi_def_cfa_offset 4
 378 0184 BD46     		mov	sp, r7
 379              		.cfi_def_cfa_register 13
 380              		@ sp needed
 381 0186 80BC     		pop	{r7}
 382              		.cfi_restore 7
 383              		.cfi_def_cfa_offset 0
 384 0188 7047     		bx	lr
 385              		.cfi_endproc
 386              	.LFE5:
 388              		.align	1
 389              		.global	UARTEnable
 390              		.syntax unified
 391              		.thumb
 392              		.thumb_func
 393              		.fpu softvfp
 395              	UARTEnable:
 396              	.LFB6:
 400:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 401:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 402:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 403:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Enables transmitting and receiving
 404:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 405:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 406:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 407:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function sets the UARTEN, TXE, and RXE bits, and enables the transmit
 408:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! and receive FIFOs.
 409:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 410:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 411:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 412:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 413:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 414:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTEnable(uint32_t ui32Base)
 415:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 397              		.loc 1 415 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 8
 400              		@ frame_needed = 1, uses_anonymous_args = 0
 401              		@ link register save eliminated.
 402 018a 80B4     		push	{r7}
 403              		.cfi_def_cfa_offset 4
 404              		.cfi_offset 7, -4
 405 018c 83B0     		sub	sp, sp, #12
 406              		.cfi_def_cfa_offset 16
 407 018e 00AF     		add	r7, sp, #0
 408              		.cfi_def_cfa_register 7
 409 0190 7860     		str	r0, [r7, #4]
 416:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 417:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 418:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 419:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 420:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 421:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 422:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Enable the FIFO.
 423:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 424:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 410              		.loc 1 424 0
 411 0192 7B68     		ldr	r3, [r7, #4]
 412 0194 2C33     		adds	r3, r3, #44
 413 0196 1B68     		ldr	r3, [r3]
 414 0198 7A68     		ldr	r2, [r7, #4]
 415 019a 2C32     		adds	r2, r2, #44
 416 019c 43F01003 		orr	r3, r3, #16
 417 01a0 1360     		str	r3, [r2]
 425:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 426:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 427:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Enable RX, TX, and the UART.
 428:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 429:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 418              		.loc 1 429 0
 419 01a2 7B68     		ldr	r3, [r7, #4]
 420 01a4 3033     		adds	r3, r3, #48
 421 01a6 1B68     		ldr	r3, [r3]
 422 01a8 7A68     		ldr	r2, [r7, #4]
 423 01aa 3032     		adds	r2, r2, #48
 424 01ac 43F44073 		orr	r3, r3, #768
 425 01b0 43F00103 		orr	r3, r3, #1
 426 01b4 1360     		str	r3, [r2]
 430:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                                      UART_CTL_RXE);
 431:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 427              		.loc 1 431 0
 428 01b6 00BF     		nop
 429 01b8 0C37     		adds	r7, r7, #12
 430              		.cfi_def_cfa_offset 4
 431 01ba BD46     		mov	sp, r7
 432              		.cfi_def_cfa_register 13
 433              		@ sp needed
 434 01bc 80BC     		pop	{r7}
 435              		.cfi_restore 7
 436              		.cfi_def_cfa_offset 0
 437 01be 7047     		bx	lr
 438              		.cfi_endproc
 439              	.LFE6:
 441              		.align	1
 442              		.global	UARTDisable
 443              		.syntax unified
 444              		.thumb
 445              		.thumb_func
 446              		.fpu softvfp
 448              	UARTDisable:
 449              	.LFB7:
 432:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 433:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 434:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 435:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Disables transmitting and receiving
 436:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 437:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 438:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 439:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function clears the UARTEN, TXE, and RXE bits, waits for the end of
 440:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! transmission of the current character, and flushes the transmit FIFO.
 441:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 442:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 443:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 444:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 445:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 446:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTDisable(uint32_t ui32Base)
 447:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 450              		.loc 1 447 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 8
 453              		@ frame_needed = 1, uses_anonymous_args = 0
 454              		@ link register save eliminated.
 455 01c0 80B4     		push	{r7}
 456              		.cfi_def_cfa_offset 4
 457              		.cfi_offset 7, -4
 458 01c2 83B0     		sub	sp, sp, #12
 459              		.cfi_def_cfa_offset 16
 460 01c4 00AF     		add	r7, sp, #0
 461              		.cfi_def_cfa_register 7
 462 01c6 7860     		str	r0, [r7, #4]
 448:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 449:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 450:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 451:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 452:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 453:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 454:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Wait for end of TX.
 455:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 456:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     while(HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY)
 463              		.loc 1 456 0
 464 01c8 00BF     		nop
 465              	.L13:
 466              		.loc 1 456 0 is_stmt 0 discriminator 1
 467 01ca 7B68     		ldr	r3, [r7, #4]
 468 01cc 1833     		adds	r3, r3, #24
 469 01ce 1B68     		ldr	r3, [r3]
 470 01d0 03F00803 		and	r3, r3, #8
 471 01d4 002B     		cmp	r3, #0
 472 01d6 F8D1     		bne	.L13
 457:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
 458:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
 459:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 460:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 461:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Disable the FIFO.
 462:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 463:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) &= ~(UART_LCRH_FEN);
 473              		.loc 1 463 0 is_stmt 1
 474 01d8 7B68     		ldr	r3, [r7, #4]
 475 01da 2C33     		adds	r3, r3, #44
 476 01dc 1B68     		ldr	r3, [r3]
 477 01de 7A68     		ldr	r2, [r7, #4]
 478 01e0 2C32     		adds	r2, r2, #44
 479 01e2 23F01003 		bic	r3, r3, #16
 480 01e6 1360     		str	r3, [r2]
 464:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 465:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 466:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Disable the UART.
 467:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 468:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) &= ~(UART_CTL_UARTEN | UART_CTL_TXE |
 481              		.loc 1 468 0
 482 01e8 7B68     		ldr	r3, [r7, #4]
 483 01ea 3033     		adds	r3, r3, #48
 484 01ec 1B68     		ldr	r3, [r3]
 485 01ee 7A68     		ldr	r2, [r7, #4]
 486 01f0 3032     		adds	r2, r2, #48
 487 01f2 23F44073 		bic	r3, r3, #768
 488 01f6 23F00103 		bic	r3, r3, #1
 489 01fa 1360     		str	r3, [r2]
 469:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                                       UART_CTL_RXE);
 470:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 490              		.loc 1 470 0
 491 01fc 00BF     		nop
 492 01fe 0C37     		adds	r7, r7, #12
 493              		.cfi_def_cfa_offset 4
 494 0200 BD46     		mov	sp, r7
 495              		.cfi_def_cfa_register 13
 496              		@ sp needed
 497 0202 80BC     		pop	{r7}
 498              		.cfi_restore 7
 499              		.cfi_def_cfa_offset 0
 500 0204 7047     		bx	lr
 501              		.cfi_endproc
 502              	.LFE7:
 504              		.align	1
 505              		.global	UARTFIFOEnable
 506              		.syntax unified
 507              		.thumb
 508              		.thumb_func
 509              		.fpu softvfp
 511              	UARTFIFOEnable:
 512              	.LFB8:
 471:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 472:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 473:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 474:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Enables the transmit and receive FIFOs
 475:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 476:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 477:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 478:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This functions enables the transmit and receive FIFOs in the UART.
 479:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 480:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 481:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 482:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 483:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 484:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTFIFOEnable(uint32_t ui32Base)
 485:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 513              		.loc 1 485 0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 8
 516              		@ frame_needed = 1, uses_anonymous_args = 0
 517              		@ link register save eliminated.
 518 0206 80B4     		push	{r7}
 519              		.cfi_def_cfa_offset 4
 520              		.cfi_offset 7, -4
 521 0208 83B0     		sub	sp, sp, #12
 522              		.cfi_def_cfa_offset 16
 523 020a 00AF     		add	r7, sp, #0
 524              		.cfi_def_cfa_register 7
 525 020c 7860     		str	r0, [r7, #4]
 486:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 487:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 488:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 489:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 490:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 491:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 492:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Enable the FIFO.
 493:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 494:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 526              		.loc 1 494 0
 527 020e 7B68     		ldr	r3, [r7, #4]
 528 0210 2C33     		adds	r3, r3, #44
 529 0212 1B68     		ldr	r3, [r3]
 530 0214 7A68     		ldr	r2, [r7, #4]
 531 0216 2C32     		adds	r2, r2, #44
 532 0218 43F01003 		orr	r3, r3, #16
 533 021c 1360     		str	r3, [r2]
 495:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 534              		.loc 1 495 0
 535 021e 00BF     		nop
 536 0220 0C37     		adds	r7, r7, #12
 537              		.cfi_def_cfa_offset 4
 538 0222 BD46     		mov	sp, r7
 539              		.cfi_def_cfa_register 13
 540              		@ sp needed
 541 0224 80BC     		pop	{r7}
 542              		.cfi_restore 7
 543              		.cfi_def_cfa_offset 0
 544 0226 7047     		bx	lr
 545              		.cfi_endproc
 546              	.LFE8:
 548              		.align	1
 549              		.global	UARTFIFODisable
 550              		.syntax unified
 551              		.thumb
 552              		.thumb_func
 553              		.fpu softvfp
 555              	UARTFIFODisable:
 556              	.LFB9:
 496:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 497:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 498:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 499:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Disables the transmit and receive FIFOs
 500:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 501:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 502:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 503:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This functions disables the transmit and receive FIFOs in the UART.
 504:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 505:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 506:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 507:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 508:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 509:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTFIFODisable(uint32_t ui32Base)
 510:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 557              		.loc 1 510 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 8
 560              		@ frame_needed = 1, uses_anonymous_args = 0
 561              		@ link register save eliminated.
 562 0228 80B4     		push	{r7}
 563              		.cfi_def_cfa_offset 4
 564              		.cfi_offset 7, -4
 565 022a 83B0     		sub	sp, sp, #12
 566              		.cfi_def_cfa_offset 16
 567 022c 00AF     		add	r7, sp, #0
 568              		.cfi_def_cfa_register 7
 569 022e 7860     		str	r0, [r7, #4]
 511:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 512:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 513:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 514:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 515:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 516:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 517:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Disable the FIFO.
 518:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 519:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) &= ~(UART_LCRH_FEN);
 570              		.loc 1 519 0
 571 0230 7B68     		ldr	r3, [r7, #4]
 572 0232 2C33     		adds	r3, r3, #44
 573 0234 1B68     		ldr	r3, [r3]
 574 0236 7A68     		ldr	r2, [r7, #4]
 575 0238 2C32     		adds	r2, r2, #44
 576 023a 23F01003 		bic	r3, r3, #16
 577 023e 1360     		str	r3, [r2]
 520:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 578              		.loc 1 520 0
 579 0240 00BF     		nop
 580 0242 0C37     		adds	r7, r7, #12
 581              		.cfi_def_cfa_offset 4
 582 0244 BD46     		mov	sp, r7
 583              		.cfi_def_cfa_register 13
 584              		@ sp needed
 585 0246 80BC     		pop	{r7}
 586              		.cfi_restore 7
 587              		.cfi_def_cfa_offset 0
 588 0248 7047     		bx	lr
 589              		.cfi_endproc
 590              	.LFE9:
 592              		.align	1
 593              		.global	UARTEnableSIR
 594              		.syntax unified
 595              		.thumb
 596              		.thumb_func
 597              		.fpu softvfp
 599              	UARTEnableSIR:
 600              	.LFB10:
 521:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 522:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 523:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 524:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Enables SIR (IrDA) mode on the specified UART
 525:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 526:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 527:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param bLowPower indicates if SIR Low Power Mode is to be used.
 528:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 529:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function enables the SIREN control bit for IrDA mode on the UART.  If
 530:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the \e bLowPower flag is set, then SIRLP bit will also be set.
 531:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 532:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 533:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 534:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 535:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 536:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTEnableSIR(uint32_t ui32Base, bool bLowPower)
 537:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 601              		.loc 1 537 0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 8
 604              		@ frame_needed = 1, uses_anonymous_args = 0
 605              		@ link register save eliminated.
 606 024a 80B4     		push	{r7}
 607              		.cfi_def_cfa_offset 4
 608              		.cfi_offset 7, -4
 609 024c 83B0     		sub	sp, sp, #12
 610              		.cfi_def_cfa_offset 16
 611 024e 00AF     		add	r7, sp, #0
 612              		.cfi_def_cfa_register 7
 613 0250 7860     		str	r0, [r7, #4]
 614 0252 0B46     		mov	r3, r1
 615 0254 FB70     		strb	r3, [r7, #3]
 538:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 539:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 540:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 541:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 542:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 543:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 544:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Enable SIR and SIRLP (if appropriate).
 545:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 546:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     if(bLowPower)
 616              		.loc 1 546 0
 617 0256 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 618 0258 002B     		cmp	r3, #0
 619 025a 08D0     		beq	.L17
 547:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
 548:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_SIREN | UART_CTL_SIRLP);
 620              		.loc 1 548 0
 621 025c 7B68     		ldr	r3, [r7, #4]
 622 025e 3033     		adds	r3, r3, #48
 623 0260 1B68     		ldr	r3, [r3]
 624 0262 7A68     		ldr	r2, [r7, #4]
 625 0264 3032     		adds	r2, r2, #48
 626 0266 43F00603 		orr	r3, r3, #6
 627 026a 1360     		str	r3, [r2]
 549:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
 550:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     else
 551:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
 552:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_SIREN);
 553:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
 554:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 628              		.loc 1 554 0
 629 026c 07E0     		b	.L19
 630              	.L17:
 552:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
 631              		.loc 1 552 0
 632 026e 7B68     		ldr	r3, [r7, #4]
 633 0270 3033     		adds	r3, r3, #48
 634 0272 1B68     		ldr	r3, [r3]
 635 0274 7A68     		ldr	r2, [r7, #4]
 636 0276 3032     		adds	r2, r2, #48
 637 0278 43F00203 		orr	r3, r3, #2
 638 027c 1360     		str	r3, [r2]
 639              	.L19:
 640              		.loc 1 554 0
 641 027e 00BF     		nop
 642 0280 0C37     		adds	r7, r7, #12
 643              		.cfi_def_cfa_offset 4
 644 0282 BD46     		mov	sp, r7
 645              		.cfi_def_cfa_register 13
 646              		@ sp needed
 647 0284 80BC     		pop	{r7}
 648              		.cfi_restore 7
 649              		.cfi_def_cfa_offset 0
 650 0286 7047     		bx	lr
 651              		.cfi_endproc
 652              	.LFE10:
 654              		.align	1
 655              		.global	UARTDisableSIR
 656              		.syntax unified
 657              		.thumb
 658              		.thumb_func
 659              		.fpu softvfp
 661              	UARTDisableSIR:
 662              	.LFB11:
 555:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 556:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 557:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 558:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Disables SIR (IrDA) mode on the specified UART
 559:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 560:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 561:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 562:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function clears the SIREN (IrDA) and SIRLP (Low Power) bits.
 563:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 564:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 565:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 566:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 567:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 568:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTDisableSIR(uint32_t ui32Base)
 569:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 663              		.loc 1 569 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 8
 666              		@ frame_needed = 1, uses_anonymous_args = 0
 667              		@ link register save eliminated.
 668 0288 80B4     		push	{r7}
 669              		.cfi_def_cfa_offset 4
 670              		.cfi_offset 7, -4
 671 028a 83B0     		sub	sp, sp, #12
 672              		.cfi_def_cfa_offset 16
 673 028c 00AF     		add	r7, sp, #0
 674              		.cfi_def_cfa_register 7
 675 028e 7860     		str	r0, [r7, #4]
 570:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 571:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 572:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 573:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 574:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 575:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 576:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Disable SIR and SIRLP (if appropriate).
 577:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 578:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) &= ~(UART_CTL_SIREN | UART_CTL_SIRLP);
 676              		.loc 1 578 0
 677 0290 7B68     		ldr	r3, [r7, #4]
 678 0292 3033     		adds	r3, r3, #48
 679 0294 1B68     		ldr	r3, [r3]
 680 0296 7A68     		ldr	r2, [r7, #4]
 681 0298 3032     		adds	r2, r2, #48
 682 029a 23F00603 		bic	r3, r3, #6
 683 029e 1360     		str	r3, [r2]
 579:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 684              		.loc 1 579 0
 685 02a0 00BF     		nop
 686 02a2 0C37     		adds	r7, r7, #12
 687              		.cfi_def_cfa_offset 4
 688 02a4 BD46     		mov	sp, r7
 689              		.cfi_def_cfa_register 13
 690              		@ sp needed
 691 02a6 80BC     		pop	{r7}
 692              		.cfi_restore 7
 693              		.cfi_def_cfa_offset 0
 694 02a8 7047     		bx	lr
 695              		.cfi_endproc
 696              	.LFE11:
 698              		.align	1
 699              		.global	UARTTxIntModeSet
 700              		.syntax unified
 701              		.thumb
 702              		.thumb_func
 703              		.fpu softvfp
 705              	UARTTxIntModeSet:
 706              	.LFB12:
 580:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 581:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 582:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 583:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Sets the operating mode for the UART transmit interrupt
 584:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 585:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 586:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Mode is the operating mode for the transmit interrupt.  It may be
 587:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_TXINT_MODE_EOT to trigger interrupts when the transmitter is idle
 588:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! or \b UART_TXINT_MODE_FIFO to trigger based on the current transmit FIFO
 589:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! level.
 590:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 591:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function allows the mode of the UART transmit interrupt to be set.  By
 592:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! default, the transmit interrupt is asserted when the FIFO level falls past
 593:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! a threshold set via a call to UARTFIFOLevelSet().  Alternatively, if this
 594:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! function is called with \e ui32Mode set to \b UART_TXINT_MODE_EOT, the
 595:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! transmit interrupt is asserted once the transmitter is completely idle -
 596:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the transmit FIFO is empty and all bits, including any stop bits, have
 597:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! cleared the transmitter.
 598:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 599:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 600:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 601:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 602:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 603:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTTxIntModeSet(uint32_t ui32Base, uint32_t ui32Mode)
 604:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 707              		.loc 1 604 0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 8
 710              		@ frame_needed = 1, uses_anonymous_args = 0
 711              		@ link register save eliminated.
 712 02aa 80B4     		push	{r7}
 713              		.cfi_def_cfa_offset 4
 714              		.cfi_offset 7, -4
 715 02ac 83B0     		sub	sp, sp, #12
 716              		.cfi_def_cfa_offset 16
 717 02ae 00AF     		add	r7, sp, #0
 718              		.cfi_def_cfa_register 7
 719 02b0 7860     		str	r0, [r7, #4]
 720 02b2 3960     		str	r1, [r7]
 605:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 606:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 607:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 608:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 609:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT((ui32Mode == UART_TXINT_MODE_EOT) ||
 610:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****            (ui32Mode == UART_TXINT_MODE_FIFO));
 611:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 612:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 613:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Set or clear the EOT bit of the UART control register as appropriate.
 614:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 615:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) = ((HWREG(ui32Base + UART_O_CTL) &
 721              		.loc 1 615 0
 722 02b4 7B68     		ldr	r3, [r7, #4]
 723 02b6 3033     		adds	r3, r3, #48
 724 02b8 1B68     		ldr	r3, [r3]
 725 02ba 23F01002 		bic	r2, r3, #16
 726 02be 7B68     		ldr	r3, [r7, #4]
 727 02c0 3033     		adds	r3, r3, #48
 728 02c2 1946     		mov	r1, r3
 616:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                                      ~(UART_TXINT_MODE_EOT |
 617:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                                        UART_TXINT_MODE_FIFO)) | ui32Mode);
 729              		.loc 1 617 0
 730 02c4 3B68     		ldr	r3, [r7]
 731 02c6 1343     		orrs	r3, r3, r2
 615:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                                      ~(UART_TXINT_MODE_EOT |
 732              		.loc 1 615 0
 733 02c8 0B60     		str	r3, [r1]
 618:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 734              		.loc 1 618 0
 735 02ca 00BF     		nop
 736 02cc 0C37     		adds	r7, r7, #12
 737              		.cfi_def_cfa_offset 4
 738 02ce BD46     		mov	sp, r7
 739              		.cfi_def_cfa_register 13
 740              		@ sp needed
 741 02d0 80BC     		pop	{r7}
 742              		.cfi_restore 7
 743              		.cfi_def_cfa_offset 0
 744 02d2 7047     		bx	lr
 745              		.cfi_endproc
 746              	.LFE12:
 748              		.align	1
 749              		.global	UARTTxIntModeGet
 750              		.syntax unified
 751              		.thumb
 752              		.thumb_func
 753              		.fpu softvfp
 755              	UARTTxIntModeGet:
 756              	.LFB13:
 619:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 620:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 621:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 622:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Returns the current operating mode for the UART transmit interrupt
 623:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 624:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 625:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 626:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function returns the current operating mode for the UART transmit
 627:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! interrupt.  The return value is \b UART_TXINT_MODE_EOT if the transmit
 628:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! interrupt is currently set to be asserted once the transmitter is
 629:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! completely idle - the transmit FIFO is empty and all bits, including any
 630:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! stop bits, have cleared the transmitter.  The return value is
 631:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_TXINT_MODE_FIFO if the interrupt is set to be asserted based upon
 632:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the level of the transmit FIFO.
 633:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 634:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return Returns \b UART_TXINT_MODE_FIFO or \b UART_TXINT_MODE_EOT.
 635:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 636:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 637:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** uint32_t
 638:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTTxIntModeGet(uint32_t ui32Base)
 639:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 757              		.loc 1 639 0
 758              		.cfi_startproc
 759              		@ args = 0, pretend = 0, frame = 8
 760              		@ frame_needed = 1, uses_anonymous_args = 0
 761              		@ link register save eliminated.
 762 02d4 80B4     		push	{r7}
 763              		.cfi_def_cfa_offset 4
 764              		.cfi_offset 7, -4
 765 02d6 83B0     		sub	sp, sp, #12
 766              		.cfi_def_cfa_offset 16
 767 02d8 00AF     		add	r7, sp, #0
 768              		.cfi_def_cfa_register 7
 769 02da 7860     		str	r0, [r7, #4]
 640:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 641:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 642:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 643:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 644:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 645:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 646:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Return the current transmit interrupt mode.
 647:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 648:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     return(HWREG(ui32Base + UART_O_CTL) & (UART_TXINT_MODE_EOT |
 770              		.loc 1 648 0
 771 02dc 7B68     		ldr	r3, [r7, #4]
 772 02de 3033     		adds	r3, r3, #48
 773 02e0 1B68     		ldr	r3, [r3]
 774 02e2 03F01003 		and	r3, r3, #16
 649:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                                            UART_TXINT_MODE_FIFO));
 650:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 775              		.loc 1 650 0
 776 02e6 1846     		mov	r0, r3
 777 02e8 0C37     		adds	r7, r7, #12
 778              		.cfi_def_cfa_offset 4
 779 02ea BD46     		mov	sp, r7
 780              		.cfi_def_cfa_register 13
 781              		@ sp needed
 782 02ec 80BC     		pop	{r7}
 783              		.cfi_restore 7
 784              		.cfi_def_cfa_offset 0
 785 02ee 7047     		bx	lr
 786              		.cfi_endproc
 787              	.LFE13:
 789              		.align	1
 790              		.global	UARTCharsAvail
 791              		.syntax unified
 792              		.thumb
 793              		.thumb_func
 794              		.fpu softvfp
 796              	UARTCharsAvail:
 797              	.LFB14:
 651:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 652:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 653:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 654:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Determines if there are any characters in the receive FIFO
 655:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 656:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 657:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 658:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function returns a flag indicating whether or not there is data
 659:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! available in the receive FIFO.
 660:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 661:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return Returns \b true if there is data in the receive FIFO or \b false
 662:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! if there is no data in the receive FIFO.
 663:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 664:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 665:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** bool
 666:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTCharsAvail(uint32_t ui32Base)
 667:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 798              		.loc 1 667 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 8
 801              		@ frame_needed = 1, uses_anonymous_args = 0
 802              		@ link register save eliminated.
 803 02f0 80B4     		push	{r7}
 804              		.cfi_def_cfa_offset 4
 805              		.cfi_offset 7, -4
 806 02f2 83B0     		sub	sp, sp, #12
 807              		.cfi_def_cfa_offset 16
 808 02f4 00AF     		add	r7, sp, #0
 809              		.cfi_def_cfa_register 7
 810 02f6 7860     		str	r0, [r7, #4]
 668:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 669:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 670:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 671:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 672:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 673:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 674:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Return the availability of characters.
 675:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 676:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     return((HWREG(ui32Base + UART_O_FR) & UART_FR_RXFE) ? false : true);
 811              		.loc 1 676 0
 812 02f8 7B68     		ldr	r3, [r7, #4]
 813 02fa 1833     		adds	r3, r3, #24
 814 02fc 1B68     		ldr	r3, [r3]
 815 02fe 03F01003 		and	r3, r3, #16
 816 0302 002B     		cmp	r3, #0
 817 0304 0CBF     		ite	eq
 818 0306 0123     		moveq	r3, #1
 819 0308 0023     		movne	r3, #0
 820 030a DBB2     		uxtb	r3, r3
 677:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 821              		.loc 1 677 0
 822 030c 1846     		mov	r0, r3
 823 030e 0C37     		adds	r7, r7, #12
 824              		.cfi_def_cfa_offset 4
 825 0310 BD46     		mov	sp, r7
 826              		.cfi_def_cfa_register 13
 827              		@ sp needed
 828 0312 80BC     		pop	{r7}
 829              		.cfi_restore 7
 830              		.cfi_def_cfa_offset 0
 831 0314 7047     		bx	lr
 832              		.cfi_endproc
 833              	.LFE14:
 835              		.align	1
 836              		.global	UARTSpaceAvail
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu softvfp
 842              	UARTSpaceAvail:
 843              	.LFB15:
 678:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 679:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 680:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 681:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Determines if there is any space in the transmit FIFO
 682:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 683:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 684:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 685:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function returns a flag indicating whether or not there is space
 686:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! available in the transmit FIFO.
 687:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 688:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return Returns \b true if there is space available in the transmit FIFO
 689:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! or \b false if there is no space available in the transmit FIFO.
 690:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 691:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 692:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** bool
 693:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTSpaceAvail(uint32_t ui32Base)
 694:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 844              		.loc 1 694 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 8
 847              		@ frame_needed = 1, uses_anonymous_args = 0
 848              		@ link register save eliminated.
 849 0316 80B4     		push	{r7}
 850              		.cfi_def_cfa_offset 4
 851              		.cfi_offset 7, -4
 852 0318 83B0     		sub	sp, sp, #12
 853              		.cfi_def_cfa_offset 16
 854 031a 00AF     		add	r7, sp, #0
 855              		.cfi_def_cfa_register 7
 856 031c 7860     		str	r0, [r7, #4]
 695:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 696:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 697:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 698:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 699:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 700:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 701:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Return the availability of space.
 702:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 703:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     return((HWREG(ui32Base + UART_O_FR) & UART_FR_TXFF) ? false : true);
 857              		.loc 1 703 0
 858 031e 7B68     		ldr	r3, [r7, #4]
 859 0320 1833     		adds	r3, r3, #24
 860 0322 1B68     		ldr	r3, [r3]
 861 0324 03F02003 		and	r3, r3, #32
 862 0328 002B     		cmp	r3, #0
 863 032a 0CBF     		ite	eq
 864 032c 0123     		moveq	r3, #1
 865 032e 0023     		movne	r3, #0
 866 0330 DBB2     		uxtb	r3, r3
 704:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 867              		.loc 1 704 0
 868 0332 1846     		mov	r0, r3
 869 0334 0C37     		adds	r7, r7, #12
 870              		.cfi_def_cfa_offset 4
 871 0336 BD46     		mov	sp, r7
 872              		.cfi_def_cfa_register 13
 873              		@ sp needed
 874 0338 80BC     		pop	{r7}
 875              		.cfi_restore 7
 876              		.cfi_def_cfa_offset 0
 877 033a 7047     		bx	lr
 878              		.cfi_endproc
 879              	.LFE15:
 881              		.align	1
 882              		.global	UARTCharGetNonBlocking
 883              		.syntax unified
 884              		.thumb
 885              		.thumb_func
 886              		.fpu softvfp
 888              	UARTCharGetNonBlocking:
 889              	.LFB16:
 705:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 706:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 707:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 708:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Receives a character from the specified port
 709:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 710:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 711:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 712:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function gets a character from the receive FIFO for the specified
 713:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! port.
 714:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 715:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return Returns the character read from the specified port, cast as a
 716:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \e int32_t.  A \b -1 is returned if there are no characters present in the
 717:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! receive FIFO.  The UARTCharsAvail() function should be called before
 718:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! attempting to call this function.
 719:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 720:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 721:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** int32_t
 722:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTCharGetNonBlocking(uint32_t ui32Base)
 723:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 890              		.loc 1 723 0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 8
 893              		@ frame_needed = 1, uses_anonymous_args = 0
 894              		@ link register save eliminated.
 895 033c 80B4     		push	{r7}
 896              		.cfi_def_cfa_offset 4
 897              		.cfi_offset 7, -4
 898 033e 83B0     		sub	sp, sp, #12
 899              		.cfi_def_cfa_offset 16
 900 0340 00AF     		add	r7, sp, #0
 901              		.cfi_def_cfa_register 7
 902 0342 7860     		str	r0, [r7, #4]
 724:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 725:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 726:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 727:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 728:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 729:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 730:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // See if there are any characters in the receive FIFO.
 731:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 732:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     if(!(HWREG(ui32Base + UART_O_FR) & UART_FR_RXFE))
 903              		.loc 1 732 0
 904 0344 7B68     		ldr	r3, [r7, #4]
 905 0346 1833     		adds	r3, r3, #24
 906 0348 1B68     		ldr	r3, [r3]
 907 034a 03F01003 		and	r3, r3, #16
 908 034e 002B     		cmp	r3, #0
 909 0350 02D1     		bne	.L29
 733:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
 734:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 735:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         // Read and return the next character.
 736:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 737:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         return(HWREG(ui32Base + UART_O_DR));
 910              		.loc 1 737 0
 911 0352 7B68     		ldr	r3, [r7, #4]
 912 0354 1B68     		ldr	r3, [r3]
 913 0356 01E0     		b	.L30
 914              	.L29:
 738:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
 739:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     else
 740:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
 741:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 742:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         // There are no characters, so return a failure.
 743:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 744:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         return(-1);
 915              		.loc 1 744 0
 916 0358 4FF0FF33 		mov	r3, #-1
 917              	.L30:
 745:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
 746:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 918              		.loc 1 746 0
 919 035c 1846     		mov	r0, r3
 920 035e 0C37     		adds	r7, r7, #12
 921              		.cfi_def_cfa_offset 4
 922 0360 BD46     		mov	sp, r7
 923              		.cfi_def_cfa_register 13
 924              		@ sp needed
 925 0362 80BC     		pop	{r7}
 926              		.cfi_restore 7
 927              		.cfi_def_cfa_offset 0
 928 0364 7047     		bx	lr
 929              		.cfi_endproc
 930              	.LFE16:
 932              		.align	1
 933              		.global	UARTCharGet
 934              		.syntax unified
 935              		.thumb
 936              		.thumb_func
 937              		.fpu softvfp
 939              	UARTCharGet:
 940              	.LFB17:
 747:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 748:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 749:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 750:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Waits for a character from the specified port
 751:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 752:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 753:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 754:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function gets a character from the receive FIFO for the specified
 755:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! port.  If there are no characters available, this function waits until a
 756:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! character is received before returning.
 757:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 758:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return Returns the character read from the specified port, cast as a
 759:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \e int32_t.
 760:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 761:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 762:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** int32_t
 763:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTCharGet(uint32_t ui32Base)
 764:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 941              		.loc 1 764 0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 8
 944              		@ frame_needed = 1, uses_anonymous_args = 0
 945              		@ link register save eliminated.
 946 0366 80B4     		push	{r7}
 947              		.cfi_def_cfa_offset 4
 948              		.cfi_offset 7, -4
 949 0368 83B0     		sub	sp, sp, #12
 950              		.cfi_def_cfa_offset 16
 951 036a 00AF     		add	r7, sp, #0
 952              		.cfi_def_cfa_register 7
 953 036c 7860     		str	r0, [r7, #4]
 765:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 766:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 767:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 768:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 769:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 770:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 771:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Wait until a char is available.
 772:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 773:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     while(HWREG(ui32Base + UART_O_FR) & UART_FR_RXFE)
 954              		.loc 1 773 0
 955 036e 00BF     		nop
 956              	.L32:
 957              		.loc 1 773 0 is_stmt 0 discriminator 1
 958 0370 7B68     		ldr	r3, [r7, #4]
 959 0372 1833     		adds	r3, r3, #24
 960 0374 1B68     		ldr	r3, [r3]
 961 0376 03F01003 		and	r3, r3, #16
 962 037a 002B     		cmp	r3, #0
 963 037c F8D1     		bne	.L32
 774:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
 775:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
 776:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 777:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 778:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Now get the char.
 779:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 780:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     return(HWREG(ui32Base + UART_O_DR));
 964              		.loc 1 780 0 is_stmt 1
 965 037e 7B68     		ldr	r3, [r7, #4]
 966 0380 1B68     		ldr	r3, [r3]
 781:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 967              		.loc 1 781 0
 968 0382 1846     		mov	r0, r3
 969 0384 0C37     		adds	r7, r7, #12
 970              		.cfi_def_cfa_offset 4
 971 0386 BD46     		mov	sp, r7
 972              		.cfi_def_cfa_register 13
 973              		@ sp needed
 974 0388 80BC     		pop	{r7}
 975              		.cfi_restore 7
 976              		.cfi_def_cfa_offset 0
 977 038a 7047     		bx	lr
 978              		.cfi_endproc
 979              	.LFE17:
 981              		.align	1
 982              		.global	UARTCharPutNonBlocking
 983              		.syntax unified
 984              		.thumb
 985              		.thumb_func
 986              		.fpu softvfp
 988              	UARTCharPutNonBlocking:
 989              	.LFB18:
 782:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 783:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 784:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 785:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Sends a character to the specified port
 786:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 787:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 788:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui8Data is the character to be transmitted.
 789:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 790:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function writes the character \e ui8Data to the transmit FIFO for the
 791:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! specified port.  This function does not block, so if there is no space
 792:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! available, then a \b false is returned, and the application must retry the
 793:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! function later.
 794:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 795:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return Returns \b true if the character was successfully placed in the
 796:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! transmit FIFO or \b false if there was no space available in the transmit
 797:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! FIFO.
 798:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 799:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 800:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** bool
 801:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTCharPutNonBlocking(uint32_t ui32Base, uint8_t ui8Data)
 802:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 990              		.loc 1 802 0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 8
 993              		@ frame_needed = 1, uses_anonymous_args = 0
 994              		@ link register save eliminated.
 995 038c 80B4     		push	{r7}
 996              		.cfi_def_cfa_offset 4
 997              		.cfi_offset 7, -4
 998 038e 83B0     		sub	sp, sp, #12
 999              		.cfi_def_cfa_offset 16
 1000 0390 00AF     		add	r7, sp, #0
 1001              		.cfi_def_cfa_register 7
 1002 0392 7860     		str	r0, [r7, #4]
 1003 0394 0B46     		mov	r3, r1
 1004 0396 FB70     		strb	r3, [r7, #3]
 803:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 804:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 805:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 806:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 807:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 808:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 809:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // See if there is space in the transmit FIFO.
 810:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 811:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     if(!(HWREG(ui32Base + UART_O_FR) & UART_FR_TXFF))
 1005              		.loc 1 811 0
 1006 0398 7B68     		ldr	r3, [r7, #4]
 1007 039a 1833     		adds	r3, r3, #24
 1008 039c 1B68     		ldr	r3, [r3]
 1009 039e 03F02003 		and	r3, r3, #32
 1010 03a2 002B     		cmp	r3, #0
 1011 03a4 04D1     		bne	.L35
 812:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
 813:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 814:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         // Write this character to the transmit FIFO.
 815:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 816:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         HWREG(ui32Base + UART_O_DR) = ui8Data;
 1012              		.loc 1 816 0
 1013 03a6 7B68     		ldr	r3, [r7, #4]
 1014 03a8 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1015 03aa 1A60     		str	r2, [r3]
 817:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 818:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 819:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         // Success.
 820:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 821:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         return(true);
 1016              		.loc 1 821 0
 1017 03ac 0123     		movs	r3, #1
 1018 03ae 00E0     		b	.L36
 1019              	.L35:
 822:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
 823:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     else
 824:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
 825:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 826:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         // There is no space in the transmit FIFO, so return a failure.
 827:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         //
 828:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         return(false);
 1020              		.loc 1 828 0
 1021 03b0 0023     		movs	r3, #0
 1022              	.L36:
 829:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
 830:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1023              		.loc 1 830 0
 1024 03b2 1846     		mov	r0, r3
 1025 03b4 0C37     		adds	r7, r7, #12
 1026              		.cfi_def_cfa_offset 4
 1027 03b6 BD46     		mov	sp, r7
 1028              		.cfi_def_cfa_register 13
 1029              		@ sp needed
 1030 03b8 80BC     		pop	{r7}
 1031              		.cfi_restore 7
 1032              		.cfi_def_cfa_offset 0
 1033 03ba 7047     		bx	lr
 1034              		.cfi_endproc
 1035              	.LFE18:
 1037              		.align	1
 1038              		.global	UARTCharPut
 1039              		.syntax unified
 1040              		.thumb
 1041              		.thumb_func
 1042              		.fpu softvfp
 1044              	UARTCharPut:
 1045              	.LFB19:
 831:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 832:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 833:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 834:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Waits to send a character from the specified port
 835:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 836:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 837:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui8Data is the character to be transmitted.
 838:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 839:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function sends the character \e ui8Data to the transmit FIFO for the
 840:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! specified port.  If there is no space available in the transmit FIFO, this
 841:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! function waits until there is space available before returning.
 842:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 843:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 844:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 845:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 846:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 847:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTCharPut(uint32_t ui32Base, uint8_t ui8Data)
 848:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1046              		.loc 1 848 0
 1047              		.cfi_startproc
 1048              		@ args = 0, pretend = 0, frame = 8
 1049              		@ frame_needed = 1, uses_anonymous_args = 0
 1050              		@ link register save eliminated.
 1051 03bc 80B4     		push	{r7}
 1052              		.cfi_def_cfa_offset 4
 1053              		.cfi_offset 7, -4
 1054 03be 83B0     		sub	sp, sp, #12
 1055              		.cfi_def_cfa_offset 16
 1056 03c0 00AF     		add	r7, sp, #0
 1057              		.cfi_def_cfa_register 7
 1058 03c2 7860     		str	r0, [r7, #4]
 1059 03c4 0B46     		mov	r3, r1
 1060 03c6 FB70     		strb	r3, [r7, #3]
 849:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 850:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 851:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 852:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 853:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 854:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 855:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Wait until space is available.
 856:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 857:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     while(HWREG(ui32Base + UART_O_FR) & UART_FR_TXFF)
 1061              		.loc 1 857 0
 1062 03c8 00BF     		nop
 1063              	.L38:
 1064              		.loc 1 857 0 is_stmt 0 discriminator 1
 1065 03ca 7B68     		ldr	r3, [r7, #4]
 1066 03cc 1833     		adds	r3, r3, #24
 1067 03ce 1B68     		ldr	r3, [r3]
 1068 03d0 03F02003 		and	r3, r3, #32
 1069 03d4 002B     		cmp	r3, #0
 1070 03d6 F8D1     		bne	.L38
 858:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
 859:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
 860:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 861:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 862:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Send the char.
 863:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 864:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_DR) = ui8Data;
 1071              		.loc 1 864 0 is_stmt 1
 1072 03d8 7B68     		ldr	r3, [r7, #4]
 1073 03da FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1074 03dc 1A60     		str	r2, [r3]
 865:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1075              		.loc 1 865 0
 1076 03de 00BF     		nop
 1077 03e0 0C37     		adds	r7, r7, #12
 1078              		.cfi_def_cfa_offset 4
 1079 03e2 BD46     		mov	sp, r7
 1080              		.cfi_def_cfa_register 13
 1081              		@ sp needed
 1082 03e4 80BC     		pop	{r7}
 1083              		.cfi_restore 7
 1084              		.cfi_def_cfa_offset 0
 1085 03e6 7047     		bx	lr
 1086              		.cfi_endproc
 1087              	.LFE19:
 1089              		.align	1
 1090              		.global	UARTBreakCtl
 1091              		.syntax unified
 1092              		.thumb
 1093              		.thumb_func
 1094              		.fpu softvfp
 1096              	UARTBreakCtl:
 1097              	.LFB20:
 866:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 867:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 868:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 869:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Causes a BREAK to be sent
 870:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 871:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 872:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param bBreakState controls the output level.
 873:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 874:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Calling this function with \e bBreakState set to \b true asserts a break
 875:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! condition on the UART.  Calling this function with \e bBreakState set to
 876:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b false removes the break condition.  For proper transmission of a break
 877:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! command, the break must be asserted for at least two complete frames.
 878:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 879:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 880:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 881:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 882:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 883:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTBreakCtl(uint32_t ui32Base, bool bBreakState)
 884:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1098              		.loc 1 884 0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 8
 1101              		@ frame_needed = 1, uses_anonymous_args = 0
 1102              		@ link register save eliminated.
 1103 03e8 80B4     		push	{r7}
 1104              		.cfi_def_cfa_offset 4
 1105              		.cfi_offset 7, -4
 1106 03ea 83B0     		sub	sp, sp, #12
 1107              		.cfi_def_cfa_offset 16
 1108 03ec 00AF     		add	r7, sp, #0
 1109              		.cfi_def_cfa_register 7
 1110 03ee 7860     		str	r0, [r7, #4]
 1111 03f0 0B46     		mov	r3, r1
 1112 03f2 FB70     		strb	r3, [r7, #3]
 885:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 886:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 887:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 888:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 889:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 890:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 891:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Set the break condition as requested.
 892:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 893:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) =
 894:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         (bBreakState ?
 895:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****          (HWREG(ui32Base + UART_O_LCRH) | UART_LCRH_BRK) :
 1113              		.loc 1 895 0
 1114 03f4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1115 03f6 002B     		cmp	r3, #0
 1116 03f8 05D0     		beq	.L40
 1117              		.loc 1 895 0 is_stmt 0 discriminator 1
 1118 03fa 7B68     		ldr	r3, [r7, #4]
 1119 03fc 2C33     		adds	r3, r3, #44
 1120 03fe 1B68     		ldr	r3, [r3]
 1121 0400 43F00103 		orr	r3, r3, #1
 1122 0404 04E0     		b	.L41
 1123              	.L40:
 896:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****          (HWREG(ui32Base + UART_O_LCRH) & ~(UART_LCRH_BRK)));
 1124              		.loc 1 896 0 is_stmt 1 discriminator 2
 1125 0406 7B68     		ldr	r3, [r7, #4]
 1126 0408 2C33     		adds	r3, r3, #44
 1127 040a 1B68     		ldr	r3, [r3]
 895:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****          (HWREG(ui32Base + UART_O_LCRH) & ~(UART_LCRH_BRK)));
 1128              		.loc 1 895 0 discriminator 2
 1129 040c 23F00103 		bic	r3, r3, #1
 1130              	.L41:
 893:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         (bBreakState ?
 1131              		.loc 1 893 0
 1132 0410 7A68     		ldr	r2, [r7, #4]
 1133 0412 2C32     		adds	r2, r2, #44
 1134 0414 1360     		str	r3, [r2]
 897:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1135              		.loc 1 897 0
 1136 0416 00BF     		nop
 1137 0418 0C37     		adds	r7, r7, #12
 1138              		.cfi_def_cfa_offset 4
 1139 041a BD46     		mov	sp, r7
 1140              		.cfi_def_cfa_register 13
 1141              		@ sp needed
 1142 041c 80BC     		pop	{r7}
 1143              		.cfi_restore 7
 1144              		.cfi_def_cfa_offset 0
 1145 041e 7047     		bx	lr
 1146              		.cfi_endproc
 1147              	.LFE20:
 1149              		.align	1
 1150              		.global	UARTBusy
 1151              		.syntax unified
 1152              		.thumb
 1153              		.thumb_func
 1154              		.fpu softvfp
 1156              	UARTBusy:
 1157              	.LFB21:
 898:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 899:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 900:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 901:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Determines whether the UART transmitter is busy or not
 902:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 903:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 904:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 905:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Allows the caller to determine whether all transmitted bytes have cleared
 906:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the transmitter hardware.  If \b false is returned, the transmit FIFO is
 907:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! empty and all bits of the last transmitted character, including all stop
 908:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! bits, have left the hardware shift register.
 909:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 910:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return Returns \b true if the UART is transmitting or \b false if all
 911:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! transmissions are complete.
 912:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 913:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 914:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** bool
 915:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTBusy(uint32_t ui32Base)
 916:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1158              		.loc 1 916 0
 1159              		.cfi_startproc
 1160              		@ args = 0, pretend = 0, frame = 8
 1161              		@ frame_needed = 1, uses_anonymous_args = 0
 1162              		@ link register save eliminated.
 1163 0420 80B4     		push	{r7}
 1164              		.cfi_def_cfa_offset 4
 1165              		.cfi_offset 7, -4
 1166 0422 83B0     		sub	sp, sp, #12
 1167              		.cfi_def_cfa_offset 16
 1168 0424 00AF     		add	r7, sp, #0
 1169              		.cfi_def_cfa_register 7
 1170 0426 7860     		str	r0, [r7, #4]
 917:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 918:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the argument.
 919:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 920:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 921:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 922:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 923:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Determine if the UART is busy.
 924:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 925:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ? true : false);
 1171              		.loc 1 925 0
 1172 0428 7B68     		ldr	r3, [r7, #4]
 1173 042a 1833     		adds	r3, r3, #24
 1174 042c 1B68     		ldr	r3, [r3]
 1175 042e 03F00803 		and	r3, r3, #8
 1176 0432 002B     		cmp	r3, #0
 1177 0434 14BF     		ite	ne
 1178 0436 0123     		movne	r3, #1
 1179 0438 0023     		moveq	r3, #0
 1180 043a DBB2     		uxtb	r3, r3
 926:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1181              		.loc 1 926 0
 1182 043c 1846     		mov	r0, r3
 1183 043e 0C37     		adds	r7, r7, #12
 1184              		.cfi_def_cfa_offset 4
 1185 0440 BD46     		mov	sp, r7
 1186              		.cfi_def_cfa_register 13
 1187              		@ sp needed
 1188 0442 80BC     		pop	{r7}
 1189              		.cfi_restore 7
 1190              		.cfi_def_cfa_offset 0
 1191 0444 7047     		bx	lr
 1192              		.cfi_endproc
 1193              	.LFE21:
 1195              		.align	1
 1196              		.global	UARTIntRegister
 1197              		.syntax unified
 1198              		.thumb
 1199              		.thumb_func
 1200              		.fpu softvfp
 1202              	UARTIntRegister:
 1203              	.LFB22:
 927:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 928:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 929:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 930:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Registers an interrupt handler for a UART interrupt
 931:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 932:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 933:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param pfnHandler is a pointer to the function to be called when the
 934:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! UART interrupt occurs.
 935:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 936:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function does the actual registering of the interrupt handler.  This
 937:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! function enables the global interrupt in the interrupt controller; specific
 938:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! UART interrupts must be enabled via UARTIntEnable().  It is the interrupt
 939:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! handler's responsibility to clear the interrupt source.
 940:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 941:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \sa IntRegister() for important information about registering interrupt
 942:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! handlers.
 943:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 944:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 945:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 946:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 947:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 948:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTIntRegister(uint32_t ui32Base, void (*pfnHandler)(void))
 949:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1204              		.loc 1 949 0
 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 16
 1207              		@ frame_needed = 1, uses_anonymous_args = 0
 1208 0446 80B5     		push	{r7, lr}
 1209              		.cfi_def_cfa_offset 8
 1210              		.cfi_offset 7, -8
 1211              		.cfi_offset 14, -4
 1212 0448 84B0     		sub	sp, sp, #16
 1213              		.cfi_def_cfa_offset 24
 1214 044a 00AF     		add	r7, sp, #0
 1215              		.cfi_def_cfa_register 7
 1216 044c 7860     		str	r0, [r7, #4]
 1217 044e 3960     		str	r1, [r7]
 950:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     uint32_t ui32Int;
 951:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 952:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 953:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 954:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 955:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 956:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 957:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 958:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Determine the interrupt number based on the UART port.
 959:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 960:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ui32Int = ((ui32Base == UART0_BASE) ? INT_UART0 : INT_UART1);
 1218              		.loc 1 960 0
 1219 0450 7B68     		ldr	r3, [r7, #4]
 1220 0452 094A     		ldr	r2, .L47
 1221 0454 9342     		cmp	r3, r2
 1222 0456 01D1     		bne	.L45
 1223              		.loc 1 960 0 is_stmt 0 discriminator 1
 1224 0458 1523     		movs	r3, #21
 1225 045a 00E0     		b	.L46
 1226              	.L45:
 1227              		.loc 1 960 0 discriminator 2
 1228 045c 1623     		movs	r3, #22
 1229              	.L46:
 1230              		.loc 1 960 0 discriminator 4
 1231 045e FB60     		str	r3, [r7, #12]
 961:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 962:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 963:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Register the interrupt handler.
 964:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 965:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     IntRegister(ui32Int, pfnHandler);
 1232              		.loc 1 965 0 is_stmt 1 discriminator 4
 1233 0460 3968     		ldr	r1, [r7]
 1234 0462 F868     		ldr	r0, [r7, #12]
 1235 0464 FFF7FEFF 		bl	IntRegister
 966:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 967:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 968:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Enable the UART interrupt.
 969:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 970:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     IntEnable(ui32Int);
 1236              		.loc 1 970 0 discriminator 4
 1237 0468 F868     		ldr	r0, [r7, #12]
 1238 046a FFF7FEFF 		bl	IntEnable
 971:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1239              		.loc 1 971 0 discriminator 4
 1240 046e 00BF     		nop
 1241 0470 1037     		adds	r7, r7, #16
 1242              		.cfi_def_cfa_offset 8
 1243 0472 BD46     		mov	sp, r7
 1244              		.cfi_def_cfa_register 13
 1245              		@ sp needed
 1246 0474 80BD     		pop	{r7, pc}
 1247              	.L48:
 1248 0476 00BF     		.align	2
 1249              	.L47:
 1250 0478 00C00040 		.word	1073790976
 1251              		.cfi_endproc
 1252              	.LFE22:
 1254              		.align	1
 1255              		.global	UARTIntUnregister
 1256              		.syntax unified
 1257              		.thumb
 1258              		.thumb_func
 1259              		.fpu softvfp
 1261              	UARTIntUnregister:
 1262              	.LFB23:
 972:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 973:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 974:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 975:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Unregisters an interrupt handler for a UART interrupt
 976:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 977:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 978:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 979:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function does the actual unregistering of the interrupt handler.  It
 980:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! clears the handler to be called when a UART interrupt occurs.  This
 981:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! function also masks off the interrupt in the interrupt controller so that
 982:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the interrupt handler no longer is called.
 983:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 984:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \sa IntRegister() for important information about registering interrupt
 985:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! handlers.
 986:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
 987:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
 988:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
 989:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
 990:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
 991:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTIntUnregister(uint32_t ui32Base)
 992:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1263              		.loc 1 992 0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 16
 1266              		@ frame_needed = 1, uses_anonymous_args = 0
 1267 047c 80B5     		push	{r7, lr}
 1268              		.cfi_def_cfa_offset 8
 1269              		.cfi_offset 7, -8
 1270              		.cfi_offset 14, -4
 1271 047e 84B0     		sub	sp, sp, #16
 1272              		.cfi_def_cfa_offset 24
 1273 0480 00AF     		add	r7, sp, #0
 1274              		.cfi_def_cfa_register 7
 1275 0482 7860     		str	r0, [r7, #4]
 993:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     uint32_t ui32Int;
 994:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
 995:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 996:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
 997:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
 998:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 999:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1000:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1001:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Determine the interrupt number based on the UART port.
1002:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1003:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ui32Int = ((ui32Base == UART0_BASE) ? INT_UART0 : INT_UART1);
 1276              		.loc 1 1003 0
 1277 0484 7B68     		ldr	r3, [r7, #4]
 1278 0486 084A     		ldr	r2, .L52
 1279 0488 9342     		cmp	r3, r2
 1280 048a 01D1     		bne	.L50
 1281              		.loc 1 1003 0 is_stmt 0 discriminator 1
 1282 048c 1523     		movs	r3, #21
 1283 048e 00E0     		b	.L51
 1284              	.L50:
 1285              		.loc 1 1003 0 discriminator 2
 1286 0490 1623     		movs	r3, #22
 1287              	.L51:
 1288              		.loc 1 1003 0 discriminator 4
 1289 0492 FB60     		str	r3, [r7, #12]
1004:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1005:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1006:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Disable the interrupt.
1007:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1008:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     IntDisable(ui32Int);
 1290              		.loc 1 1008 0 is_stmt 1 discriminator 4
 1291 0494 F868     		ldr	r0, [r7, #12]
 1292 0496 FFF7FEFF 		bl	IntDisable
1009:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1010:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1011:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Unregister the interrupt handler.
1012:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1013:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     IntUnregister(ui32Int);
 1293              		.loc 1 1013 0 discriminator 4
 1294 049a F868     		ldr	r0, [r7, #12]
 1295 049c FFF7FEFF 		bl	IntUnregister
1014:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1296              		.loc 1 1014 0 discriminator 4
 1297 04a0 00BF     		nop
 1298 04a2 1037     		adds	r7, r7, #16
 1299              		.cfi_def_cfa_offset 8
 1300 04a4 BD46     		mov	sp, r7
 1301              		.cfi_def_cfa_register 13
 1302              		@ sp needed
 1303 04a6 80BD     		pop	{r7, pc}
 1304              	.L53:
 1305              		.align	2
 1306              	.L52:
 1307 04a8 00C00040 		.word	1073790976
 1308              		.cfi_endproc
 1309              	.LFE23:
 1311              		.align	1
 1312              		.global	UARTIntEnable
 1313              		.syntax unified
 1314              		.thumb
 1315              		.thumb_func
 1316              		.fpu softvfp
 1318              	UARTIntEnable:
 1319              	.LFB24:
1015:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1016:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1017:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1018:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Enables individual UART interrupt sources
1019:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1020:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1021:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32IntFlags is the bit mask of the interrupt sources to be enabled.
1022:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1023:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function enables the indicated UART interrupt sources.  Only the
1024:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! sources that are enabled can be reflected to the processor interrupt;
1025:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! disabled sources have no effect on the processor.
1026:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1027:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! The \e ui32IntFlags parameter is the logical OR of any of the following:
1028:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1029:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - \b UART_INT_9BIT - 9-bit address match interrupt
1030:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - \b UART_INT_OE - Overrun Error interrupt
1031:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - \b UART_INT_BE - Break Error interrupt
1032:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - \b UART_INT_PE - Parity Error interrupt
1033:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - \b UART_INT_FE - Framing Error interrupt
1034:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - \b UART_INT_RT - Receive Timeout interrupt
1035:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - \b UART_INT_TX - Transmit interrupt
1036:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - \b UART_INT_RX - Receive interrupt
1037:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - \b UART_INT_CTS - CTS interrupt (UART1 only)
1038:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1039:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
1040:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1041:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1042:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
1043:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags)
1044:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1320              		.loc 1 1044 0
 1321              		.cfi_startproc
 1322              		@ args = 0, pretend = 0, frame = 8
 1323              		@ frame_needed = 1, uses_anonymous_args = 0
 1324              		@ link register save eliminated.
 1325 04ac 80B4     		push	{r7}
 1326              		.cfi_def_cfa_offset 4
 1327              		.cfi_offset 7, -4
 1328 04ae 83B0     		sub	sp, sp, #12
 1329              		.cfi_def_cfa_offset 16
 1330 04b0 00AF     		add	r7, sp, #0
 1331              		.cfi_def_cfa_register 7
 1332 04b2 7860     		str	r0, [r7, #4]
 1333 04b4 3960     		str	r1, [r7]
1045:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1046:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
1047:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1048:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1049:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1050:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1051:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Enable the specified interrupts.
1052:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1053:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_IM) |= ui32IntFlags;
 1334              		.loc 1 1053 0
 1335 04b6 7B68     		ldr	r3, [r7, #4]
 1336 04b8 3833     		adds	r3, r3, #56
 1337 04ba 1A68     		ldr	r2, [r3]
 1338 04bc 7B68     		ldr	r3, [r7, #4]
 1339 04be 3833     		adds	r3, r3, #56
 1340 04c0 1946     		mov	r1, r3
 1341 04c2 3B68     		ldr	r3, [r7]
 1342 04c4 1343     		orrs	r3, r3, r2
 1343 04c6 0B60     		str	r3, [r1]
1054:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1344              		.loc 1 1054 0
 1345 04c8 00BF     		nop
 1346 04ca 0C37     		adds	r7, r7, #12
 1347              		.cfi_def_cfa_offset 4
 1348 04cc BD46     		mov	sp, r7
 1349              		.cfi_def_cfa_register 13
 1350              		@ sp needed
 1351 04ce 80BC     		pop	{r7}
 1352              		.cfi_restore 7
 1353              		.cfi_def_cfa_offset 0
 1354 04d0 7047     		bx	lr
 1355              		.cfi_endproc
 1356              	.LFE24:
 1358              		.align	1
 1359              		.global	UARTIntDisable
 1360              		.syntax unified
 1361              		.thumb
 1362              		.thumb_func
 1363              		.fpu softvfp
 1365              	UARTIntDisable:
 1366              	.LFB25:
1055:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1056:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1057:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1058:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Disables individual UART interrupt sources
1059:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1060:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1061:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32IntFlags is the bit mask of the interrupt sources to be disabled.
1062:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1063:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function disables the indicated UART interrupt sources.  Only the
1064:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! sources that are enabled can be reflected to the processor interrupt;
1065:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! disabled sources have no effect on the processor.
1066:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1067:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! The \e ui32IntFlags parameter has the same definition as the \e ui32IntFlags
1068:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! parameter to UARTIntEnable().
1069:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1070:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
1071:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1072:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1073:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
1074:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags)
1075:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1367              		.loc 1 1075 0
 1368              		.cfi_startproc
 1369              		@ args = 0, pretend = 0, frame = 8
 1370              		@ frame_needed = 1, uses_anonymous_args = 0
 1371              		@ link register save eliminated.
 1372 04d2 80B4     		push	{r7}
 1373              		.cfi_def_cfa_offset 4
 1374              		.cfi_offset 7, -4
 1375 04d4 83B0     		sub	sp, sp, #12
 1376              		.cfi_def_cfa_offset 16
 1377 04d6 00AF     		add	r7, sp, #0
 1378              		.cfi_def_cfa_register 7
 1379 04d8 7860     		str	r0, [r7, #4]
 1380 04da 3960     		str	r1, [r7]
1076:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1077:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
1078:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1079:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1080:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1081:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1082:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Disable the specified interrupts.
1083:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1084:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_IM) &= ~(ui32IntFlags);
 1381              		.loc 1 1084 0
 1382 04dc 7B68     		ldr	r3, [r7, #4]
 1383 04de 3833     		adds	r3, r3, #56
 1384 04e0 1A68     		ldr	r2, [r3]
 1385 04e2 3B68     		ldr	r3, [r7]
 1386 04e4 DB43     		mvns	r3, r3
 1387 04e6 7968     		ldr	r1, [r7, #4]
 1388 04e8 3831     		adds	r1, r1, #56
 1389 04ea 1340     		ands	r3, r3, r2
 1390 04ec 0B60     		str	r3, [r1]
1085:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1391              		.loc 1 1085 0
 1392 04ee 00BF     		nop
 1393 04f0 0C37     		adds	r7, r7, #12
 1394              		.cfi_def_cfa_offset 4
 1395 04f2 BD46     		mov	sp, r7
 1396              		.cfi_def_cfa_register 13
 1397              		@ sp needed
 1398 04f4 80BC     		pop	{r7}
 1399              		.cfi_restore 7
 1400              		.cfi_def_cfa_offset 0
 1401 04f6 7047     		bx	lr
 1402              		.cfi_endproc
 1403              	.LFE25:
 1405              		.align	1
 1406              		.global	UARTIntStatus
 1407              		.syntax unified
 1408              		.thumb
 1409              		.thumb_func
 1410              		.fpu softvfp
 1412              	UARTIntStatus:
 1413              	.LFB26:
1086:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1087:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1088:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1089:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Gets the current interrupt status
1090:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1091:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1092:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param bMasked is \b false if the raw interrupt status is required and
1093:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b true if the masked interrupt status is required.
1094:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1095:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function returns the interrupt status for the specified UART.  Either
1096:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the raw interrupt status or the status of interrupts that are allowed to
1097:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! reflect to the processor can be returned.
1098:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1099:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return Returns the current interrupt status, enumerated as a bit field of
1100:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! values described in UARTIntEnable().
1101:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1102:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1103:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** uint32_t
1104:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTIntStatus(uint32_t ui32Base, bool bMasked)
1105:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1414              		.loc 1 1105 0
 1415              		.cfi_startproc
 1416              		@ args = 0, pretend = 0, frame = 8
 1417              		@ frame_needed = 1, uses_anonymous_args = 0
 1418              		@ link register save eliminated.
 1419 04f8 80B4     		push	{r7}
 1420              		.cfi_def_cfa_offset 4
 1421              		.cfi_offset 7, -4
 1422 04fa 83B0     		sub	sp, sp, #12
 1423              		.cfi_def_cfa_offset 16
 1424 04fc 00AF     		add	r7, sp, #0
 1425              		.cfi_def_cfa_register 7
 1426 04fe 7860     		str	r0, [r7, #4]
 1427 0500 0B46     		mov	r3, r1
 1428 0502 FB70     		strb	r3, [r7, #3]
1106:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1107:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
1108:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1109:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1110:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1111:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1112:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Return either the interrupt status or the raw interrupt status as
1113:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // requested.
1114:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1115:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     if(bMasked)
 1429              		.loc 1 1115 0
 1430 0504 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1431 0506 002B     		cmp	r3, #0
 1432 0508 03D0     		beq	.L57
1116:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
1117:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         return(HWREG(ui32Base + UART_O_MIS));
 1433              		.loc 1 1117 0
 1434 050a 7B68     		ldr	r3, [r7, #4]
 1435 050c 4033     		adds	r3, r3, #64
 1436 050e 1B68     		ldr	r3, [r3]
 1437 0510 02E0     		b	.L58
 1438              	.L57:
1118:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
1119:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     else
1120:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
1121:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****         return(HWREG(ui32Base + UART_O_RIS));
 1439              		.loc 1 1121 0
 1440 0512 7B68     		ldr	r3, [r7, #4]
 1441 0514 3C33     		adds	r3, r3, #60
 1442 0516 1B68     		ldr	r3, [r3]
 1443              	.L58:
1122:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
1123:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1444              		.loc 1 1123 0
 1445 0518 1846     		mov	r0, r3
 1446 051a 0C37     		adds	r7, r7, #12
 1447              		.cfi_def_cfa_offset 4
 1448 051c BD46     		mov	sp, r7
 1449              		.cfi_def_cfa_register 13
 1450              		@ sp needed
 1451 051e 80BC     		pop	{r7}
 1452              		.cfi_restore 7
 1453              		.cfi_def_cfa_offset 0
 1454 0520 7047     		bx	lr
 1455              		.cfi_endproc
 1456              	.LFE26:
 1458              		.align	1
 1459              		.global	UARTIntClear
 1460              		.syntax unified
 1461              		.thumb
 1462              		.thumb_func
 1463              		.fpu softvfp
 1465              	UARTIntClear:
 1466              	.LFB27:
1124:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1125:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1126:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1127:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Clears UART interrupt sources
1128:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1129:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1130:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32IntFlags is a bit mask of the interrupt sources to be cleared.
1131:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1132:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! The specified UART interrupt sources are cleared, so that they no longer
1133:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! assert.  This function must be called in the interrupt handler to keep the
1134:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! interrupt from being recognized again immediately upon exit.
1135:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1136:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! The \e ui32IntFlags parameter has the same definition as the \e ui32IntFlags
1137:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! parameter to UARTIntEnable().
1138:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1139:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \note Because there is a write buffer in the Cortex-M3 processor, it may
1140:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! take several clock cycles before the interrupt source is actually cleared.
1141:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Therefore, it is recommended that the interrupt source be cleared early in
1142:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the interrupt handler (as opposed to the very last action) to avoid
1143:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! returning from the interrupt handler before the interrupt source is
1144:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! actually cleared.  Failure to do so may result in the interrupt handler
1145:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! being immediately reentered (because the interrupt controller still sees
1146:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the interrupt source asserted).
1147:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1148:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
1149:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1150:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1151:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
1152:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTIntClear(uint32_t ui32Base, uint32_t ui32IntFlags)
1153:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1467              		.loc 1 1153 0
 1468              		.cfi_startproc
 1469              		@ args = 0, pretend = 0, frame = 8
 1470              		@ frame_needed = 1, uses_anonymous_args = 0
 1471              		@ link register save eliminated.
 1472 0522 80B4     		push	{r7}
 1473              		.cfi_def_cfa_offset 4
 1474              		.cfi_offset 7, -4
 1475 0524 83B0     		sub	sp, sp, #12
 1476              		.cfi_def_cfa_offset 16
 1477 0526 00AF     		add	r7, sp, #0
 1478              		.cfi_def_cfa_register 7
 1479 0528 7860     		str	r0, [r7, #4]
 1480 052a 3960     		str	r1, [r7]
1154:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1155:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
1156:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1157:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1158:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1159:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1160:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Clear the requested interrupt sources.
1161:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1162:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
 1481              		.loc 1 1162 0
 1482 052c 7B68     		ldr	r3, [r7, #4]
 1483 052e 4433     		adds	r3, r3, #68
 1484 0530 1A46     		mov	r2, r3
 1485 0532 3B68     		ldr	r3, [r7]
 1486 0534 1360     		str	r3, [r2]
1163:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1487              		.loc 1 1163 0
 1488 0536 00BF     		nop
 1489 0538 0C37     		adds	r7, r7, #12
 1490              		.cfi_def_cfa_offset 4
 1491 053a BD46     		mov	sp, r7
 1492              		.cfi_def_cfa_register 13
 1493              		@ sp needed
 1494 053c 80BC     		pop	{r7}
 1495              		.cfi_restore 7
 1496              		.cfi_def_cfa_offset 0
 1497 053e 7047     		bx	lr
 1498              		.cfi_endproc
 1499              	.LFE27:
 1501              		.align	1
 1502              		.global	UARTDMAEnable
 1503              		.syntax unified
 1504              		.thumb
 1505              		.thumb_func
 1506              		.fpu softvfp
 1508              	UARTDMAEnable:
 1509              	.LFB28:
1164:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1165:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1166:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1167:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Enable UART DMA operation
1168:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1169:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1170:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32DMAFlags is a bit mask of the DMA features to enable.
1171:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1172:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! The specified UART DMA features are enabled.  The UART can be
1173:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! configured to use DMA for transmit or receive, and to disable
1174:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! receive if an error occurs.  The \e ui32DMAFlags parameter is the
1175:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! logical OR of any of the following values:
1176:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1177:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - UART_DMA_RX - enable DMA for receive
1178:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - UART_DMA_TX - enable DMA for transmit
1179:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - UART_DMA_ERR_RXSTOP - disable DMA receive on UART error
1180:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1181:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \note The uDMA controller must also be set up before DMA can be used
1182:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! with the UART.
1183:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1184:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
1185:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1186:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1187:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
1188:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTDMAEnable(uint32_t ui32Base, uint32_t ui32DMAFlags)
1189:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1510              		.loc 1 1189 0
 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 8
 1513              		@ frame_needed = 1, uses_anonymous_args = 0
 1514              		@ link register save eliminated.
 1515 0540 80B4     		push	{r7}
 1516              		.cfi_def_cfa_offset 4
 1517              		.cfi_offset 7, -4
 1518 0542 83B0     		sub	sp, sp, #12
 1519              		.cfi_def_cfa_offset 16
 1520 0544 00AF     		add	r7, sp, #0
 1521              		.cfi_def_cfa_register 7
 1522 0546 7860     		str	r0, [r7, #4]
 1523 0548 3960     		str	r1, [r7]
1190:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1191:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
1192:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1193:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1194:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1195:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1196:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Set the requested bits in the UART DMA control register.
1197:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1198:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_DMACTL) |= ui32DMAFlags;
 1524              		.loc 1 1198 0
 1525 054a 7B68     		ldr	r3, [r7, #4]
 1526 054c 4833     		adds	r3, r3, #72
 1527 054e 1A68     		ldr	r2, [r3]
 1528 0550 7B68     		ldr	r3, [r7, #4]
 1529 0552 4833     		adds	r3, r3, #72
 1530 0554 1946     		mov	r1, r3
 1531 0556 3B68     		ldr	r3, [r7]
 1532 0558 1343     		orrs	r3, r3, r2
 1533 055a 0B60     		str	r3, [r1]
1199:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1534              		.loc 1 1199 0
 1535 055c 00BF     		nop
 1536 055e 0C37     		adds	r7, r7, #12
 1537              		.cfi_def_cfa_offset 4
 1538 0560 BD46     		mov	sp, r7
 1539              		.cfi_def_cfa_register 13
 1540              		@ sp needed
 1541 0562 80BC     		pop	{r7}
 1542              		.cfi_restore 7
 1543              		.cfi_def_cfa_offset 0
 1544 0564 7047     		bx	lr
 1545              		.cfi_endproc
 1546              	.LFE28:
 1548              		.align	1
 1549              		.global	UARTDMADisable
 1550              		.syntax unified
 1551              		.thumb
 1552              		.thumb_func
 1553              		.fpu softvfp
 1555              	UARTDMADisable:
 1556              	.LFB29:
1200:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1201:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1202:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1203:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Disable UART DMA operation
1204:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1205:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1206:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32DMAFlags is a bit mask of the DMA features to disable.
1207:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1208:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function is used to disable UART DMA features that were enabled
1209:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! by UARTDMAEnable().  The specified UART DMA features are disabled.  The
1210:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \e ui32DMAFlags parameter is the logical OR of any of the following values:
1211:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1212:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - UART_DMA_RX - disable DMA for receive
1213:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - UART_DMA_TX - disable DMA for transmit
1214:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! - UART_DMA_ERR_RXSTOP - do not disable DMA receive on UART error
1215:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1216:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
1217:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1218:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1219:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
1220:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTDMADisable(uint32_t ui32Base, uint32_t ui32DMAFlags)
1221:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1557              		.loc 1 1221 0
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 8
 1560              		@ frame_needed = 1, uses_anonymous_args = 0
 1561              		@ link register save eliminated.
 1562 0566 80B4     		push	{r7}
 1563              		.cfi_def_cfa_offset 4
 1564              		.cfi_offset 7, -4
 1565 0568 83B0     		sub	sp, sp, #12
 1566              		.cfi_def_cfa_offset 16
 1567 056a 00AF     		add	r7, sp, #0
 1568              		.cfi_def_cfa_register 7
 1569 056c 7860     		str	r0, [r7, #4]
 1570 056e 3960     		str	r1, [r7]
1222:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1223:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
1224:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1225:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1226:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1227:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1228:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Clear the requested bits in the UART DMA control register.
1229:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1230:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_DMACTL) &= ~ui32DMAFlags;
 1571              		.loc 1 1230 0
 1572 0570 7B68     		ldr	r3, [r7, #4]
 1573 0572 4833     		adds	r3, r3, #72
 1574 0574 1A68     		ldr	r2, [r3]
 1575 0576 3B68     		ldr	r3, [r7]
 1576 0578 DB43     		mvns	r3, r3
 1577 057a 7968     		ldr	r1, [r7, #4]
 1578 057c 4831     		adds	r1, r1, #72
 1579 057e 1340     		ands	r3, r3, r2
 1580 0580 0B60     		str	r3, [r1]
1231:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1581              		.loc 1 1231 0
 1582 0582 00BF     		nop
 1583 0584 0C37     		adds	r7, r7, #12
 1584              		.cfi_def_cfa_offset 4
 1585 0586 BD46     		mov	sp, r7
 1586              		.cfi_def_cfa_register 13
 1587              		@ sp needed
 1588 0588 80BC     		pop	{r7}
 1589              		.cfi_restore 7
 1590              		.cfi_def_cfa_offset 0
 1591 058a 7047     		bx	lr
 1592              		.cfi_endproc
 1593              	.LFE29:
 1595              		.align	1
 1596              		.global	UARTRxErrorGet
 1597              		.syntax unified
 1598              		.thumb
 1599              		.thumb_func
 1600              		.fpu softvfp
 1602              	UARTRxErrorGet:
 1603              	.LFB30:
1232:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1233:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1234:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1235:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Gets current receiver errors
1236:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1237:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1238:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1239:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function returns the current state of each of the 4 receiver error
1240:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! sources.  The returned errors are equivalent to the four error bits
1241:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! returned via the previous call to UARTCharGet() or UARTCharGetNonBlocking()
1242:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! with the exception that the overrun error is set immediately the overrun
1243:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! occurs rather than when a character is next read.
1244:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1245:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return Returns a logical OR combination of the receiver error flags,
1246:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \b UART_RXERROR_FRAMING, \b UART_RXERROR_PARITY, \b UART_RXERROR_BREAK
1247:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! and \b UART_RXERROR_OVERRUN.
1248:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1249:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1250:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** uint32_t
1251:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTRxErrorGet(uint32_t ui32Base)
1252:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1604              		.loc 1 1252 0
 1605              		.cfi_startproc
 1606              		@ args = 0, pretend = 0, frame = 8
 1607              		@ frame_needed = 1, uses_anonymous_args = 0
 1608              		@ link register save eliminated.
 1609 058c 80B4     		push	{r7}
 1610              		.cfi_def_cfa_offset 4
 1611              		.cfi_offset 7, -4
 1612 058e 83B0     		sub	sp, sp, #12
 1613              		.cfi_def_cfa_offset 16
 1614 0590 00AF     		add	r7, sp, #0
 1615              		.cfi_def_cfa_register 7
 1616 0592 7860     		str	r0, [r7, #4]
1253:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1254:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
1255:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1256:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1257:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1258:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1259:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Return the current value of the receive status register.
1260:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1261:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     return(HWREG(ui32Base + UART_O_RSR) & 0x0000000F);
 1617              		.loc 1 1261 0
 1618 0594 7B68     		ldr	r3, [r7, #4]
 1619 0596 0433     		adds	r3, r3, #4
 1620 0598 1B68     		ldr	r3, [r3]
 1621 059a 03F00F03 		and	r3, r3, #15
1262:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1622              		.loc 1 1262 0
 1623 059e 1846     		mov	r0, r3
 1624 05a0 0C37     		adds	r7, r7, #12
 1625              		.cfi_def_cfa_offset 4
 1626 05a2 BD46     		mov	sp, r7
 1627              		.cfi_def_cfa_register 13
 1628              		@ sp needed
 1629 05a4 80BC     		pop	{r7}
 1630              		.cfi_restore 7
 1631              		.cfi_def_cfa_offset 0
 1632 05a6 7047     		bx	lr
 1633              		.cfi_endproc
 1634              	.LFE30:
 1636              		.align	1
 1637              		.global	UARTRxErrorClear
 1638              		.syntax unified
 1639              		.thumb
 1640              		.thumb_func
 1641              		.fpu softvfp
 1643              	UARTRxErrorClear:
 1644              	.LFB31:
1263:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1264:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1265:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1266:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Clears all reported receiver errors
1267:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1268:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1269:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1270:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function is used to clear all receiver error conditions reported via
1271:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! UARTRxErrorGet().  If using the overrun, framing error, parity error or
1272:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! break interrupts, this function must be called after clearing the interrupt
1273:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! to ensure that later errors of the same type trigger another interrupt.
1274:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1275:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
1276:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1277:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1278:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
1279:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTRxErrorClear(uint32_t ui32Base)
1280:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1645              		.loc 1 1280 0
 1646              		.cfi_startproc
 1647              		@ args = 0, pretend = 0, frame = 8
 1648              		@ frame_needed = 1, uses_anonymous_args = 0
 1649              		@ link register save eliminated.
 1650 05a8 80B4     		push	{r7}
 1651              		.cfi_def_cfa_offset 4
 1652              		.cfi_offset 7, -4
 1653 05aa 83B0     		sub	sp, sp, #12
 1654              		.cfi_def_cfa_offset 16
 1655 05ac 00AF     		add	r7, sp, #0
 1656              		.cfi_def_cfa_register 7
 1657 05ae 7860     		str	r0, [r7, #4]
1281:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1282:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
1283:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1284:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1285:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1286:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1287:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Any write to the Error Clear Register will clear all bits which are
1288:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // currently set.
1289:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1290:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_ECR) = 0;
 1658              		.loc 1 1290 0
 1659 05b0 7B68     		ldr	r3, [r7, #4]
 1660 05b2 0433     		adds	r3, r3, #4
 1661 05b4 1A46     		mov	r2, r3
 1662 05b6 0023     		movs	r3, #0
 1663 05b8 1360     		str	r3, [r2]
1291:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1664              		.loc 1 1291 0
 1665 05ba 00BF     		nop
 1666 05bc 0C37     		adds	r7, r7, #12
 1667              		.cfi_def_cfa_offset 4
 1668 05be BD46     		mov	sp, r7
 1669              		.cfi_def_cfa_register 13
 1670              		@ sp needed
 1671 05c0 80BC     		pop	{r7}
 1672              		.cfi_restore 7
 1673              		.cfi_def_cfa_offset 0
 1674 05c2 7047     		bx	lr
 1675              		.cfi_endproc
 1676              	.LFE31:
 1678              		.align	1
 1679              		.global	UARTClockSourceSet
 1680              		.syntax unified
 1681              		.thumb
 1682              		.thumb_func
 1683              		.fpu softvfp
 1685              	UARTClockSourceSet:
 1686              	.LFB32:
1292:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1293:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1294:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1295:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Sets the baud clock source for the specified UART
1296:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1297:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1298:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Source is the baud clock source for the UART.
1299:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1300:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function allows the baud clock source for the UART to be selected.
1301:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! The possible clock source are the system clock (\b UART_CLOCK_SYSTEM) or
1302:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the precision internal oscillator (\b UART_CLOCK_PIOSC).
1303:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1304:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! If \b UART_CLOCK_SYSTEM is chosen, the IO clock frequency must thus be
1305:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! queried by SysCtrlClcokSet().
1306:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! If \b UART_CLOCK_PIOSC the SysCtrlIOClcokSet() function must be used.
1307:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1308:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Changing the baud clock source will change the baud rate generated by the
1309:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! UART.  Therefore, the baud rate should be reconfigured after any change to
1310:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the baud clock source.
1311:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1312:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \note If the precision internal oscillator (\b UART_CLOCK_PIOSC) is used
1313:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! for the UART baud clock, the system clock frequency must be at least
1314:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! 9 MHz in Run mode.
1315:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1316:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \sa UARTConfigSetExpClk()
1317:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1318:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
1319:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1320:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1321:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
1322:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTClockSourceSet(uint32_t ui32Base, uint32_t ui32Source)
1323:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1687              		.loc 1 1323 0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 8
 1690              		@ frame_needed = 1, uses_anonymous_args = 0
 1691              		@ link register save eliminated.
 1692 05c4 80B4     		push	{r7}
 1693              		.cfi_def_cfa_offset 4
 1694              		.cfi_offset 7, -4
 1695 05c6 83B0     		sub	sp, sp, #12
 1696              		.cfi_def_cfa_offset 16
 1697 05c8 00AF     		add	r7, sp, #0
 1698              		.cfi_def_cfa_register 7
 1699 05ca 7860     		str	r0, [r7, #4]
 1700 05cc 3960     		str	r1, [r7]
1324:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1325:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
1326:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1327:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1328:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT((ui32Source == UART_CLOCK_SYSTEM) || (ui32Source == UART_CLOCK_PIOSC));
1329:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1330:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1331:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Set the UART clock source.
1332:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1333:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_CC) = ui32Source;
 1701              		.loc 1 1333 0
 1702 05ce 7B68     		ldr	r3, [r7, #4]
 1703 05d0 03F6C873 		addw	r3, r3, #4040
 1704 05d4 1A46     		mov	r2, r3
 1705 05d6 3B68     		ldr	r3, [r7]
 1706 05d8 1360     		str	r3, [r2]
1334:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1707              		.loc 1 1334 0
 1708 05da 00BF     		nop
 1709 05dc 0C37     		adds	r7, r7, #12
 1710              		.cfi_def_cfa_offset 4
 1711 05de BD46     		mov	sp, r7
 1712              		.cfi_def_cfa_register 13
 1713              		@ sp needed
 1714 05e0 80BC     		pop	{r7}
 1715              		.cfi_restore 7
 1716              		.cfi_def_cfa_offset 0
 1717 05e2 7047     		bx	lr
 1718              		.cfi_endproc
 1719              	.LFE32:
 1721              		.align	1
 1722              		.global	UARTClockSourceGet
 1723              		.syntax unified
 1724              		.thumb
 1725              		.thumb_func
 1726              		.fpu softvfp
 1728              	UARTClockSourceGet:
 1729              	.LFB33:
1335:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1336:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1337:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1338:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Gets the baud clock source for the specified UART
1339:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1340:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1341:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1342:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function returns the baud clock source for the specified UART.  The
1343:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! possible baud clock source are the system clock (\b UART_CLOCK_SYSTEM) or
1344:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the precision internal oscillator (\b UART_CLOCK_PIOSC).
1345:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1346:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
1347:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1348:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1349:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** uint32_t
1350:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UARTClockSourceGet(uint32_t ui32Base)
1351:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1730              		.loc 1 1351 0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 8
 1733              		@ frame_needed = 1, uses_anonymous_args = 0
 1734              		@ link register save eliminated.
 1735 05e4 80B4     		push	{r7}
 1736              		.cfi_def_cfa_offset 4
 1737              		.cfi_offset 7, -4
 1738 05e6 83B0     		sub	sp, sp, #12
 1739              		.cfi_def_cfa_offset 16
 1740 05e8 00AF     		add	r7, sp, #0
 1741              		.cfi_def_cfa_register 7
 1742 05ea 7860     		str	r0, [r7, #4]
1352:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1353:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
1354:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1355:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1356:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1357:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1358:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Return the UART clock source.
1359:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1360:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     return(HWREG(ui32Base + UART_O_CC));
 1743              		.loc 1 1360 0
 1744 05ec 7B68     		ldr	r3, [r7, #4]
 1745 05ee 03F6C873 		addw	r3, r3, #4040
 1746 05f2 1B68     		ldr	r3, [r3]
1361:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1747              		.loc 1 1361 0
 1748 05f4 1846     		mov	r0, r3
 1749 05f6 0C37     		adds	r7, r7, #12
 1750              		.cfi_def_cfa_offset 4
 1751 05f8 BD46     		mov	sp, r7
 1752              		.cfi_def_cfa_register 13
 1753              		@ sp needed
 1754 05fa 80BC     		pop	{r7}
 1755              		.cfi_restore 7
 1756              		.cfi_def_cfa_offset 0
 1757 05fc 7047     		bx	lr
 1758              		.cfi_endproc
 1759              	.LFE33:
 1761              		.align	1
 1762              		.global	UART9BitEnable
 1763              		.syntax unified
 1764              		.thumb
 1765              		.thumb_func
 1766              		.fpu softvfp
 1768              	UART9BitEnable:
 1769              	.LFB34:
1362:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1363:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1364:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1365:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Enables 9-bit mode on the specified UART
1366:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1367:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1368:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1369:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function enables the 9-bit operational mode of the UART.
1370:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1371:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
1372:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1373:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1374:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
1375:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UART9BitEnable(uint32_t ui32Base)
1376:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1770              		.loc 1 1376 0
 1771              		.cfi_startproc
 1772              		@ args = 0, pretend = 0, frame = 8
 1773              		@ frame_needed = 1, uses_anonymous_args = 0
 1774              		@ link register save eliminated.
 1775 05fe 80B4     		push	{r7}
 1776              		.cfi_def_cfa_offset 4
 1777              		.cfi_offset 7, -4
 1778 0600 83B0     		sub	sp, sp, #12
 1779              		.cfi_def_cfa_offset 16
 1780 0602 00AF     		add	r7, sp, #0
 1781              		.cfi_def_cfa_register 7
 1782 0604 7860     		str	r0, [r7, #4]
1377:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1378:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
1379:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1380:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1381:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1382:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1383:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Enable 9-bit mode.
1384:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1385:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITADDR) |= UART_NINEBITADDR_NINEBITEN;
 1783              		.loc 1 1385 0
 1784 0606 7B68     		ldr	r3, [r7, #4]
 1785 0608 A433     		adds	r3, r3, #164
 1786 060a 1B68     		ldr	r3, [r3]
 1787 060c 7A68     		ldr	r2, [r7, #4]
 1788 060e A432     		adds	r2, r2, #164
 1789 0610 43F40043 		orr	r3, r3, #32768
 1790 0614 1360     		str	r3, [r2]
1386:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1791              		.loc 1 1386 0
 1792 0616 00BF     		nop
 1793 0618 0C37     		adds	r7, r7, #12
 1794              		.cfi_def_cfa_offset 4
 1795 061a BD46     		mov	sp, r7
 1796              		.cfi_def_cfa_register 13
 1797              		@ sp needed
 1798 061c 80BC     		pop	{r7}
 1799              		.cfi_restore 7
 1800              		.cfi_def_cfa_offset 0
 1801 061e 7047     		bx	lr
 1802              		.cfi_endproc
 1803              	.LFE34:
 1805              		.align	1
 1806              		.global	UART9BitDisable
 1807              		.syntax unified
 1808              		.thumb
 1809              		.thumb_func
 1810              		.fpu softvfp
 1812              	UART9BitDisable:
 1813              	.LFB35:
1387:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1388:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1389:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1390:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Disables 9-bit mode on the specified UART
1391:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1392:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1393:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1394:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function disables the 9-bit operational mode of the UART.
1395:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1396:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
1397:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1398:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1399:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
1400:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UART9BitDisable(uint32_t ui32Base)
1401:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1814              		.loc 1 1401 0
 1815              		.cfi_startproc
 1816              		@ args = 0, pretend = 0, frame = 8
 1817              		@ frame_needed = 1, uses_anonymous_args = 0
 1818              		@ link register save eliminated.
 1819 0620 80B4     		push	{r7}
 1820              		.cfi_def_cfa_offset 4
 1821              		.cfi_offset 7, -4
 1822 0622 83B0     		sub	sp, sp, #12
 1823              		.cfi_def_cfa_offset 16
 1824 0624 00AF     		add	r7, sp, #0
 1825              		.cfi_def_cfa_register 7
 1826 0626 7860     		str	r0, [r7, #4]
1402:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1403:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
1404:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1405:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1406:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1407:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1408:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Disable 9-bit mode.
1409:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1410:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITADDR) &= ~UART_NINEBITADDR_NINEBITEN;
 1827              		.loc 1 1410 0
 1828 0628 7B68     		ldr	r3, [r7, #4]
 1829 062a A433     		adds	r3, r3, #164
 1830 062c 1B68     		ldr	r3, [r3]
 1831 062e 7A68     		ldr	r2, [r7, #4]
 1832 0630 A432     		adds	r2, r2, #164
 1833 0632 23F40043 		bic	r3, r3, #32768
 1834 0636 1360     		str	r3, [r2]
1411:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1835              		.loc 1 1411 0
 1836 0638 00BF     		nop
 1837 063a 0C37     		adds	r7, r7, #12
 1838              		.cfi_def_cfa_offset 4
 1839 063c BD46     		mov	sp, r7
 1840              		.cfi_def_cfa_register 13
 1841              		@ sp needed
 1842 063e 80BC     		pop	{r7}
 1843              		.cfi_restore 7
 1844              		.cfi_def_cfa_offset 0
 1845 0640 7047     		bx	lr
 1846              		.cfi_endproc
 1847              	.LFE35:
 1849              		.align	1
 1850              		.global	UART9BitAddrSet
 1851              		.syntax unified
 1852              		.thumb
 1853              		.thumb_func
 1854              		.fpu softvfp
 1856              	UART9BitAddrSet:
 1857              	.LFB36:
1412:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1413:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1414:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1415:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Sets the device address(es) for 9-bit mode
1416:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1417:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1418:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui8Addr is the device address.
1419:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui8Mask is the device address mask.
1420:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1421:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function sets the device address, or range of device addresses, that
1422:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! respond to requests on the 9-bit UART port.  The received address is masked
1423:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! with the mask and then compared against the given address, allowing either
1424:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! a single address (if \b ui8Mask is 0xff) or a set of addresses to be
1425:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! matched.
1426:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1427:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
1428:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1429:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1430:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
1431:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UART9BitAddrSet(uint32_t ui32Base, uint8_t ui8Addr,
1432:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                 uint8_t ui8Mask)
1433:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1858              		.loc 1 1433 0
 1859              		.cfi_startproc
 1860              		@ args = 0, pretend = 0, frame = 8
 1861              		@ frame_needed = 1, uses_anonymous_args = 0
 1862              		@ link register save eliminated.
 1863 0642 80B4     		push	{r7}
 1864              		.cfi_def_cfa_offset 4
 1865              		.cfi_offset 7, -4
 1866 0644 83B0     		sub	sp, sp, #12
 1867              		.cfi_def_cfa_offset 16
 1868 0646 00AF     		add	r7, sp, #0
 1869              		.cfi_def_cfa_register 7
 1870 0648 7860     		str	r0, [r7, #4]
 1871 064a 0B46     		mov	r3, r1
 1872 064c FB70     		strb	r3, [r7, #3]
 1873 064e 1346     		mov	r3, r2
 1874 0650 BB70     		strb	r3, [r7, #2]
1434:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1435:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
1436:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1437:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1438:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1439:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1440:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Set the address and mask.
1441:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1442:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITADDR) = ui8Addr << UART_NINEBITADDR_ADDR_S;
 1875              		.loc 1 1442 0
 1876 0652 7B68     		ldr	r3, [r7, #4]
 1877 0654 A433     		adds	r3, r3, #164
 1878 0656 1A46     		mov	r2, r3
 1879 0658 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1880 065a 1360     		str	r3, [r2]
1443:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITAMASK) = ui8Mask << UART_NINEBITAMASK_MASK_S;
 1881              		.loc 1 1443 0
 1882 065c 7B68     		ldr	r3, [r7, #4]
 1883 065e A833     		adds	r3, r3, #168
 1884 0660 1A46     		mov	r2, r3
 1885 0662 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1886 0664 1360     		str	r3, [r2]
1444:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1887              		.loc 1 1444 0
 1888 0666 00BF     		nop
 1889 0668 0C37     		adds	r7, r7, #12
 1890              		.cfi_def_cfa_offset 4
 1891 066a BD46     		mov	sp, r7
 1892              		.cfi_def_cfa_register 13
 1893              		@ sp needed
 1894 066c 80BC     		pop	{r7}
 1895              		.cfi_restore 7
 1896              		.cfi_def_cfa_offset 0
 1897 066e 7047     		bx	lr
 1898              		.cfi_endproc
 1899              	.LFE36:
 1901              		.align	1
 1902              		.global	UART9BitAddrSend
 1903              		.syntax unified
 1904              		.thumb
 1905              		.thumb_func
 1906              		.fpu softvfp
 1908              	UART9BitAddrSend:
 1909              	.LFB37:
1445:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1446:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1447:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1448:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! Sends an address character from the specified port when operating in 9-bit
1449:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! mode
1450:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1451:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1452:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \param ui8Addr is the address to be transmitted.
1453:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1454:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! This function waits until all data has been sent from the specified port
1455:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! and then sends the given address as an address byte.  It then waits until
1456:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! the address byte has been transmitted before returning.
1457:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1458:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! The normal data functions (UARTCharPut(), UARTCharPutNonBlocking(),
1459:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! UARTCharGet(), and UARTCharGetNonBlocking()) are used to send and receive
1460:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! data characters in 9-bit mode.
1461:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //!
1462:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //! \return None
1463:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //
1464:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** //*****************************************************************************
1465:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** void
1466:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** UART9BitAddrSend(uint32_t ui32Base, uint8_t ui8Addr)
1467:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** {
 1910              		.loc 1 1467 0
 1911              		.cfi_startproc
 1912              		@ args = 0, pretend = 0, frame = 16
 1913              		@ frame_needed = 1, uses_anonymous_args = 0
 1914              		@ link register save eliminated.
 1915 0670 80B4     		push	{r7}
 1916              		.cfi_def_cfa_offset 4
 1917              		.cfi_offset 7, -4
 1918 0672 85B0     		sub	sp, sp, #20
 1919              		.cfi_def_cfa_offset 24
 1920 0674 00AF     		add	r7, sp, #0
 1921              		.cfi_def_cfa_register 7
 1922 0676 7860     		str	r0, [r7, #4]
 1923 0678 0B46     		mov	r3, r1
 1924 067a FB70     		strb	r3, [r7, #3]
1468:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     uint32_t ui32LCRH;
1469:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1470:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1471:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Check the arguments.
1472:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1473:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1474:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1475:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1476:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Wait until the FIFO is empty and the UART is not busy.
1477:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1478:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     while((HWREG(ui32Base + UART_O_FR) & (UART_FR_TXFE | UART_FR_BUSY)) !=
 1925              		.loc 1 1478 0
 1926 067c 00BF     		nop
 1927              	.L72:
 1928              		.loc 1 1478 0 is_stmt 0 discriminator 1
 1929 067e 7B68     		ldr	r3, [r7, #4]
 1930 0680 1833     		adds	r3, r3, #24
 1931 0682 1B68     		ldr	r3, [r3]
 1932 0684 03F08803 		and	r3, r3, #136
 1933 0688 802B     		cmp	r3, #128
 1934 068a F8D1     		bne	.L72
1479:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****             UART_FR_TXFE)
1480:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
1481:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
1482:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1483:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1484:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1485:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Force the address/data bit to 1 to indicate this is an address byte.
1486:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1487:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     ui32LCRH = HWREG(ui32Base + UART_O_LCRH);
 1935              		.loc 1 1487 0 is_stmt 1
 1936 068c 7B68     		ldr	r3, [r7, #4]
 1937 068e 2C33     		adds	r3, r3, #44
 1938 0690 1B68     		ldr	r3, [r3]
 1939 0692 FB60     		str	r3, [r7, #12]
1488:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ((ui32LCRH & ~UART_LCRH_EPS) | UART_LCRH_SPS |
 1940              		.loc 1 1488 0
 1941 0694 FB68     		ldr	r3, [r7, #12]
 1942 0696 23F08603 		bic	r3, r3, #134
 1943 069a 7A68     		ldr	r2, [r7, #4]
 1944 069c 2C32     		adds	r2, r2, #44
 1945 069e 43F08203 		orr	r3, r3, #130
 1946 06a2 1360     		str	r3, [r2]
1489:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****                                      UART_LCRH_PEN);
1490:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1491:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1492:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Send the address.
1493:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1494:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_DR) = ui8Addr;
 1947              		.loc 1 1494 0
 1948 06a4 7B68     		ldr	r3, [r7, #4]
 1949 06a6 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1950 06a8 1A60     		str	r2, [r3]
1495:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1496:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1497:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Wait until the address has been sent.
1498:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1499:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     while((HWREG(ui32Base + UART_O_FR) & (UART_FR_TXFE | UART_FR_BUSY)) !=
 1951              		.loc 1 1499 0
 1952 06aa 00BF     		nop
 1953              	.L73:
 1954              		.loc 1 1499 0 is_stmt 0 discriminator 1
 1955 06ac 7B68     		ldr	r3, [r7, #4]
 1956 06ae 1833     		adds	r3, r3, #24
 1957 06b0 1B68     		ldr	r3, [r3]
 1958 06b2 03F08803 		and	r3, r3, #136
 1959 06b6 802B     		cmp	r3, #128
 1960 06b8 F8D1     		bne	.L73
1500:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****             UART_FR_TXFE)
1501:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     {
1502:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     }
1503:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** 
1504:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1505:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     // Restore the address/data setting.
1506:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     //
1507:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ui32LCRH;
 1961              		.loc 1 1507 0 is_stmt 1
 1962 06ba 7B68     		ldr	r3, [r7, #4]
 1963 06bc 2C33     		adds	r3, r3, #44
 1964 06be 1A46     		mov	r2, r3
 1965 06c0 FB68     		ldr	r3, [r7, #12]
 1966 06c2 1360     		str	r3, [r2]
1508:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/uarthal.c **** }
 1967              		.loc 1 1508 0
 1968 06c4 00BF     		nop
 1969 06c6 1437     		adds	r7, r7, #20
 1970              		.cfi_def_cfa_offset 4
 1971 06c8 BD46     		mov	sp, r7
 1972              		.cfi_def_cfa_register 13
 1973              		@ sp needed
 1974 06ca 80BC     		pop	{r7}
 1975              		.cfi_restore 7
 1976              		.cfi_def_cfa_offset 0
 1977 06cc 7047     		bx	lr
 1978              		.cfi_endproc
 1979              	.LFE37:
 1981              	.Letext0:
 1982              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 1983              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
DEFINED SYMBOLS
                            *ABS*:00000000 uarthal.c
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:15     .text:00000000 $t
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:22     .text:00000000 UARTParityModeSet
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:73     .text:0000002a UARTParityModeGet
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:114    .text:00000046 UARTFIFOLevelSet
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:160    .text:0000006a UARTFIFOLevelGet
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:213    .text:0000009c UARTConfigSetExpClk
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:448    .text:000001c0 UARTDisable
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:315    .text:00000128 UARTConfigGetExpClk
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:395    .text:0000018a UARTEnable
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:511    .text:00000206 UARTFIFOEnable
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:555    .text:00000228 UARTFIFODisable
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:599    .text:0000024a UARTEnableSIR
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:661    .text:00000288 UARTDisableSIR
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:705    .text:000002aa UARTTxIntModeSet
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:755    .text:000002d4 UARTTxIntModeGet
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:796    .text:000002f0 UARTCharsAvail
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:842    .text:00000316 UARTSpaceAvail
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:888    .text:0000033c UARTCharGetNonBlocking
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:939    .text:00000366 UARTCharGet
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:988    .text:0000038c UARTCharPutNonBlocking
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1044   .text:000003bc UARTCharPut
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1096   .text:000003e8 UARTBreakCtl
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1156   .text:00000420 UARTBusy
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1202   .text:00000446 UARTIntRegister
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1250   .text:00000478 $d
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1254   .text:0000047c $t
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1261   .text:0000047c UARTIntUnregister
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1307   .text:000004a8 $d
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1311   .text:000004ac $t
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1318   .text:000004ac UARTIntEnable
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1365   .text:000004d2 UARTIntDisable
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1412   .text:000004f8 UARTIntStatus
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1465   .text:00000522 UARTIntClear
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1508   .text:00000540 UARTDMAEnable
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1555   .text:00000566 UARTDMADisable
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1602   .text:0000058c UARTRxErrorGet
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1643   .text:000005a8 UARTRxErrorClear
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1685   .text:000005c4 UARTClockSourceSet
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1728   .text:000005e4 UARTClockSourceGet
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1768   .text:000005fe UART9BitEnable
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1812   .text:00000620 UART9BitDisable
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1856   .text:00000642 UART9BitAddrSet
C:\Users\Lee\AppData\Local\Temp\ccwR6zCc.s:1908   .text:00000670 UART9BitAddrSend
                           .group:00000000 wm4.0.93d65e4ff05d5af51629690e5b534e57
                           .group:00000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:00000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:00000000 wm4.hw_sys_ctrl.h.39.50b4d7775c38e82076d0eb3bdc2daf82
                           .group:00000000 wm4.hw_uart.h.39.98a53ad3c72429c06a23b03415b2e5a7
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:00000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:00000000 wm4.uarthal.h.41.25db9539abdf5c44b7896bf33c1e7f12

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
