   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"cpu.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.global	CPUcpsid
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	CPUcpsid:
  23              	.LFB0:
  24              		.file 1 "build\\openmote-cc2538_armgcc\\bsp\\boards\\openmote-cc2538\\source\\cpu.c"
   1:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** /******************************************************************************
   2:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  Filename:       cpu.c
   3:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  Revised:        $Date: 2013-01-21 15:25:21 +0100 (Mon, 21 Jan 2013) $
   4:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  Revision:       $Revision: 9178 $
   5:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *
   6:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  Description:    Instruction wrappers for special CPU instructions needed by
   7:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *                  the drivers.
   8:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *
   9:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
  10:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *
  11:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *
  12:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  Redistribution and use in source and binary forms, with or without
  13:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  modification, are permitted provided that the following conditions
  14:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  are met:
  15:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *
  16:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *    Redistributions of source code must retain the above copyright
  17:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *    notice, this list of conditions and the following disclaimer.
  18:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *
  19:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *    Redistributions in binary form must reproduce the above copyright
  20:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *    notice, this list of conditions and the following disclaimer in the
  21:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *    documentation and/or other materials provided with the distribution.
  22:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *
  23:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  24:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *    its contributors may be used to endorse or promote products derived
  25:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *    from this software without specific prior written permission.
  26:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *
  27:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  30:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  31:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  32:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  33:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  34:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  35:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  36:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  37:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  38:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** *
  39:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** ******************************************************************************/
  40:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
  41:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
  42:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #include "cpu.h"
  43:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
  44:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
  45:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
  46:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** // Wrapper function for the CPSID instruction.  Returns the state of PRIMASK
  47:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** // on entry.
  48:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
  49:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
  50:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__GNUC__)
  51:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** uint32_t __attribute__((naked))
  52:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUcpsid(void)
  53:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
  25              		.loc 1 53 0
  26              		.cfi_startproc
  27              		@ Naked Function: prologue and epilogue provided by programmer.
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  54:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     uint32_t ui32Ret;
  55:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
  56:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
  57:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Read PRIMASK and disable interrupts.
  58:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
  59:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
  30              		.loc 1 59 0
  31              		.syntax unified
  32              	@ 59 "build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source\cpu.c" 1
  33 0000 EFF31080 		    mrs     r0, PRIMASK
  34 0004 72B6     	    cpsid   i
  35 0006 7047     	    bx      lr
  36              	
  37              	@ 0 "" 2
  38              		.thumb
  39              		.syntax unified
  40 0008 1C46     		mov	r4, r3
  60:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    cpsid   i\n"
  61:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    bx      lr\n"
  62:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           : "=r" (ui32Ret));
  63:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
  64:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
  65:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // The return is handled in the inline assembly, but the compiler will
  66:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // still complain if there is not an explicit return here (despite the fact
  67:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // that this does not result in any code being produced because of the
  68:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // naked attribute).
  69:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
  70:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     return(ui32Ret);
  41              		.loc 1 70 0
  42 000a 2346     		mov	r3, r4
  71:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
  43              		.loc 1 71 0
  44 000c 1846     		mov	r0, r3
  45              		.cfi_endproc
  46              	.LFE0:
  48              		.align	1
  49              		.global	CPUprimask
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  53              		.fpu softvfp
  55              	CPUprimask:
  56              	.LFB1:
  72:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
  73:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if (__ICCARM__)
  74:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** uint32_t
  75:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUcpsid(void)
  76:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
  77:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
  78:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Read PRIMASK and disable interrupts.
  79:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
  80:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
  81:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    cpsid   i\n");
  82:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
  83:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
  84:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // "Warning[Pe940]: missing return statement at end of non-void function"
  85:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // is suppressed here to avoid putting a "bx lr" in the inline assembly
  86:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // above and a superfluous return statement here.
  87:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
  88:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #pragma diag_suppress=Pe940
  89:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
  90:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #pragma diag_default=Pe940
  91:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
  92:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
  93:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** __asm uint32_t
  94:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUcpsid(void)
  95:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
  96:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
  97:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Read PRIMASK and disable interrupts.
  98:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
  99:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     mrs     r0, PRIMASK;
 100:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     cpsid   i;
 101:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     bx      lr
 102:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 103:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 104:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__TI_COMPILER_VERSION__)
 105:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** uint32_t
 106:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUcpsid(void)
 107:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 108:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 109:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Read PRIMASK and disable interrupts.
 110:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 111:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
 112:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    cpsid   i\n"
 113:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    bx      lr\n");
 114:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 115:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 116:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // The following keeps the compiler happy, because it wants to see a
 117:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // return value from this function.  It will generate code to return
 118:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // a zero.  However, the real return is the "bx lr" above, so the
 119:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // return(0) is never executed and the function returns with the value
 120:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // you expect in R0.
 121:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 122:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     return(0);
 123:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 124:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 125:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 126:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
 127:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
 128:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** // Wrapper function returning the state of PRIMASK (indicating whether
 129:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** // interrupts are enabled or disabled).
 130:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
 131:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
 132:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__GNUC__)
 133:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** uint32_t __attribute__((naked))
 134:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUprimask(void)
 135:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
  57              		.loc 1 135 0
  58              		.cfi_startproc
  59              		@ Naked Function: prologue and epilogue provided by programmer.
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 1, uses_anonymous_args = 0
 136:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     uint32_t ui32Ret;
 137:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 138:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 139:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Read PRIMASK and disable interrupts.
 140:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 141:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
  62              		.loc 1 141 0
  63              		.syntax unified
  64              	@ 141 "build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source\cpu.c" 1
  65 000e EFF31080 		    mrs     r0, PRIMASK
  66 0012 7047     	    bx      lr
  67              	
  68              	@ 0 "" 2
  69              		.thumb
  70              		.syntax unified
  71 0014 1C46     		mov	r4, r3
 142:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    bx      lr\n"
 143:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           : "=r" (ui32Ret));
 144:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 145:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 146:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // The return is handled in the inline assembly, but the compiler will
 147:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // still complain if there is not an explicit return here (despite the fact
 148:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // that this does not result in any code being produced because of the
 149:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // naked attribute).
 150:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 151:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     return(ui32Ret);
  72              		.loc 1 151 0
  73 0016 2346     		mov	r3, r4
 152:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
  74              		.loc 1 152 0
  75 0018 1846     		mov	r0, r3
  76              		.cfi_endproc
  77              	.LFE1:
  79              		.align	1
  80              		.global	CPUcpsie
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu softvfp
  86              	CPUcpsie:
  87              	.LFB2:
 153:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 154:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if (__ICCARM__)
 155:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** uint32_t
 156:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUprimask(void)
 157:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 158:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 159:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Read PRIMASK and disable interrupts.
 160:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 161:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n");
 162:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 163:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 164:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // "Warning[Pe940]: missing return statement at end of non-void function"
 165:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // is suppressed here to avoid putting a "bx lr" in the inline assembly
 166:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // above and a superfluous return statement here.
 167:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 168:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #pragma diag_suppress=Pe940
 169:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 170:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #pragma diag_default=Pe940
 171:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 172:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
 173:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** __asm uint32_t
 174:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUprimask(void)
 175:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 176:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 177:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Read PRIMASK and disable interrupts.
 178:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 179:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     mrs     r0, PRIMASK;
 180:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     bx      lr
 181:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 182:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 183:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__TI_COMPILER_VERSION__)
 184:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** uint32_t
 185:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUprimask(void)
 186:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 187:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 188:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Read PRIMASK and disable interrupts.
 189:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 190:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
 191:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    bx      lr\n");
 192:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 193:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 194:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // The following keeps the compiler happy, because it wants to see a
 195:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // return value from this function.  It will generate code to return
 196:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // a zero.  However, the real return is the "bx lr" above, so the
 197:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // return(0) is never executed and the function returns with the value
 198:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // you expect in R0.
 199:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 200:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     return(0);
 201:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 202:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 203:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 204:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
 205:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
 206:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** // Wrapper function for the CPSIE instruction.  Returns the state of PRIMASK
 207:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** // on entry.
 208:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
 209:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
 210:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__GNUC__)
 211:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** uint32_t __attribute__((naked))
 212:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUcpsie(void)
 213:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
  88              		.loc 1 213 0
  89              		.cfi_startproc
  90              		@ Naked Function: prologue and epilogue provided by programmer.
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 1, uses_anonymous_args = 0
 214:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     uint32_t ui32Ret;
 215:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 216:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 217:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Read PRIMASK and enable interrupts.
 218:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 219:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
  93              		.loc 1 219 0
  94              		.syntax unified
  95              	@ 219 "build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source\cpu.c" 1
  96 001a EFF31080 		    mrs     r0, PRIMASK
  97 001e 62B6     	    cpsie   i
  98 0020 7047     	    bx      lr
  99              	
 100              	@ 0 "" 2
 101              		.thumb
 102              		.syntax unified
 103 0022 1C46     		mov	r4, r3
 220:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    cpsie   i\n"
 221:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    bx      lr\n"
 222:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           : "=r" (ui32Ret));
 223:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 224:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 225:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // The return is handled in the inline assembly, but the compiler will
 226:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // still complain if there is not an explicit return here (despite the fact
 227:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // that this does not result in any code being produced because of the
 228:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // naked attribute).
 229:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 230:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     return(ui32Ret);
 104              		.loc 1 230 0
 105 0024 2346     		mov	r3, r4
 231:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 106              		.loc 1 231 0
 107 0026 1846     		mov	r0, r3
 108              		.cfi_endproc
 109              	.LFE2:
 111              		.align	1
 112              		.global	CPUwfi
 113              		.syntax unified
 114              		.thumb
 115              		.thumb_func
 116              		.fpu softvfp
 118              	CPUwfi:
 119              	.LFB3:
 232:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 233:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if (__ICCARM__)
 234:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** uint32_t
 235:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUcpsie(void)
 236:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 237:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 238:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Read PRIMASK and enable interrupts.
 239:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 240:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
 241:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    cpsie   i\n");
 242:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 243:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 244:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // "Warning[Pe940]: missing return statement at end of non-void function"
 245:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // is suppressed here to avoid putting a "bx lr" in the inline assembly
 246:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // above and a superfluous return statement here.
 247:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 248:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #pragma diag_suppress=Pe940
 249:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 250:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #pragma diag_default=Pe940
 251:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 252:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
 253:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** __asm uint32_t
 254:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUcpsie(void)
 255:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 256:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 257:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Read PRIMASK and enable interrupts.
 258:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 259:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     mrs     r0, PRIMASK;
 260:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     cpsie   i;
 261:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     bx      lr
 262:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 263:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 264:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__TI_COMPILER_VERSION__)
 265:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** uint32_t
 266:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUcpsie(void)
 267:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 268:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 269:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Read PRIMASK and enable interrupts.
 270:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 271:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    mrs     r0, PRIMASK\n"
 272:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    cpsie   i\n"
 273:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    bx      lr\n");
 274:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 275:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 276:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // The following keeps the compiler happy, because it wants to see a
 277:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // return value from this function.  It will generate code to return
 278:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // a zero.  However, the real return is the "bx lr" above, so the
 279:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // return(0) is never executed and the function returns with the value
 280:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // you expect in R0.
 281:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 282:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     return(0);
 283:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 284:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 285:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 286:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
 287:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
 288:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** // Wrapper function for the WFI instruction.
 289:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
 290:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
 291:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__GNUC__)
 292:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** void __attribute__((naked))
 293:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUwfi(void)
 294:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 120              		.loc 1 294 0
 121              		.cfi_startproc
 122              		@ Naked Function: prologue and epilogue provided by programmer.
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 295:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 296:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Wait for the next interrupt.
 297:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 298:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    wfi\n"
 125              		.loc 1 298 0
 126              		.syntax unified
 127              	@ 298 "build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source\cpu.c" 1
 128 0028 30BF     		    wfi
 129 002a 7047     	    bx      lr
 130              	
 131              	@ 0 "" 2
 299:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    bx      lr\n");
 300:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 132              		.loc 1 300 0
 133              		.thumb
 134              		.syntax unified
 135 002c 00BF     		nop
 136              		.cfi_endproc
 137              	.LFE3:
 139              		.align	1
 140              		.global	CPUwfe
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu softvfp
 146              	CPUwfe:
 147              	.LFB4:
 301:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 302:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if (__ICCARM__)
 303:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** void
 304:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUwfi(void)
 305:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 306:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 307:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Wait for the next interrupt.
 308:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 309:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    wfi\n");
 310:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 311:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 312:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
 313:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** __asm void
 314:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUwfi(void)
 315:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 316:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 317:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Wait for the next interrupt.
 318:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 319:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     wfi;
 320:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     bx      lr
 321:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 322:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 323:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__TI_COMPILER_VERSION__)
 324:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** void
 325:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUwfi(void)
 326:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 327:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 328:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Wait for the next interrupt.
 329:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 330:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    wfi\n");
 331:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 332:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 333:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 334:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
 335:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
 336:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** // Wrapper function for the WFE instruction.
 337:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
 338:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
 339:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__GNUC__)
 340:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** void __attribute__((naked))
 341:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUwfe(void)
 342:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 148              		.loc 1 342 0
 149              		.cfi_startproc
 150              		@ Naked Function: prologue and epilogue provided by programmer.
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 1, uses_anonymous_args = 0
 343:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 344:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Wait for the next event
 345:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 346:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    wfe\n"
 153              		.loc 1 346 0
 154              		.syntax unified
 155              	@ 346 "build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source\cpu.c" 1
 156 002e 20BF     		    wfe
 157 0030 7047     	    bx      lr
 158              	
 159              	@ 0 "" 2
 347:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    bx      lr\n");
 348:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 160              		.loc 1 348 0
 161              		.thumb
 162              		.syntax unified
 163 0032 00BF     		nop
 164              		.cfi_endproc
 165              	.LFE4:
 167              		.align	1
 168              		.global	CPUsev
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 172              		.fpu softvfp
 174              	CPUsev:
 175              	.LFB5:
 349:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 350:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if (__ICCARM__)
 351:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** void
 352:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUwfe(void)
 353:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 354:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 355:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Wait for the next event
 356:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 357:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    wfe\n");
 358:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 359:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 360:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
 361:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** __asm void
 362:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUwfe(void)
 363:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 364:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 365:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Wait for the next event
 366:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 367:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     wfe;
 368:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     bx      lr
 369:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 370:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 371:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__TI_COMPILER_VERSION__)
 372:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** void
 373:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUwfe(void)
 374:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 375:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 376:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Wait for the next event
 377:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 378:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    wfe\n");
 379:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 380:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 381:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 382:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
 383:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
 384:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** // Wrapper function for the SEV instruction (Send event).
 385:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
 386:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
 387:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__GNUC__)
 388:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** void __attribute__((naked))
 389:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUsev(void)
 390:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 176              		.loc 1 390 0
 177              		.cfi_startproc
 178              		@ Naked Function: prologue and epilogue provided by programmer.
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 1, uses_anonymous_args = 0
 391:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 392:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Send event
 393:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 394:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    sev\n"
 181              		.loc 1 394 0
 182              		.syntax unified
 183              	@ 394 "build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source\cpu.c" 1
 184 0034 40BF     		    sev
 185 0036 7047     	    bx      lr
 186              	
 187              	@ 0 "" 2
 395:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    bx      lr\n");
 396:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 188              		.loc 1 396 0
 189              		.thumb
 190              		.syntax unified
 191 0038 00BF     		nop
 192              		.cfi_endproc
 193              	.LFE5:
 195              		.align	1
 196              		.global	CPUbasepriSet
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 200              		.fpu softvfp
 202              	CPUbasepriSet:
 203              	.LFB6:
 397:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 398:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if (__ICCARM__)
 399:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** void
 400:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUsev(void)
 401:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 402:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 403:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Send event
 404:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 405:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    sev\n");
 406:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 407:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 408:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
 409:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** __asm void
 410:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUsev(void)
 411:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 412:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 413:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Send event
 414:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 415:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     sev;
 416:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     bx      lr
 417:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 418:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 419:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__TI_COMPILER_VERSION__)
 420:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** void
 421:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUsev(void)
 422:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 423:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 424:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Send event
 425:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 426:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    sev\n");
 427:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 428:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 429:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 430:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
 431:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
 432:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** // Wrapper function for writing the BASEPRI register.
 433:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
 434:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
 435:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__GNUC__)
 436:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** void __attribute__((naked))
 437:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUbasepriSet(uint32_t ui32NewBasepri)
 438:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 204              		.loc 1 438 0
 205              		.cfi_startproc
 206              		@ Naked Function: prologue and epilogue provided by programmer.
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 1, uses_anonymous_args = 0
 439:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 440:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 441:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Set the BASEPRI register
 442:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 443:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    msr     BASEPRI, r0\n"
 209              		.loc 1 443 0
 210              		.syntax unified
 211              	@ 443 "build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source\cpu.c" 1
 212 003a 80F31188 		    msr     BASEPRI, r0
 213 003e 7047     	    bx      lr
 214              	
 215              	@ 0 "" 2
 444:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    bx      lr\n");
 445:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 216              		.loc 1 445 0
 217              		.thumb
 218              		.syntax unified
 219 0040 00BF     		nop
 220              		.cfi_endproc
 221              	.LFE6:
 223              		.align	1
 224              		.global	CPUbasepriGet
 225              		.syntax unified
 226              		.thumb
 227              		.thumb_func
 228              		.fpu softvfp
 230              	CPUbasepriGet:
 231              	.LFB7:
 446:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 447:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if (__ICCARM__)
 448:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** void
 449:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUbasepriSet(uint32_t ui32NewBasepri)
 450:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 451:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 452:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Set the BASEPRI register
 453:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 454:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    msr     BASEPRI, r0\n");
 455:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 456:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 457:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__KEIL__) || defined(__ARMCC_VERSION)
 458:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** __asm void
 459:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUbasepriSet(uint32_t ui32NewBasepri)
 460:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 461:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 462:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Set the BASEPRI register
 463:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 464:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     msr     BASEPRI, r0;
 465:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     bx      lr
 466:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 467:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 468:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__TI_COMPILER_VERSION__)
 469:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** void
 470:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUbasepriSet(uint32_t ui32NewBasepri)
 471:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 472:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 473:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Set the BASEPRI register
 474:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 475:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    msr     BASEPRI, r0\n");
 476:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 477:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #endif
 478:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 479:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
 480:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
 481:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** // Wrapper function for reading the BASEPRI register.
 482:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //
 483:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** //*****************************************************************************
 484:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** #if defined(__GNUC__)
 485:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** uint32_t __attribute__((naked))
 486:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** CPUbasepriGet(void)
 487:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** {
 232              		.loc 1 487 0
 233              		.cfi_startproc
 234              		@ Naked Function: prologue and epilogue provided by programmer.
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 1, uses_anonymous_args = 0
 488:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     uint32_t ui32Ret;
 489:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 490:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 491:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // Read BASEPRI
 492:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 493:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     __asm("    mrs     r0, BASEPRI\n"
 237              		.loc 1 493 0
 238              		.syntax unified
 239              	@ 493 "build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source\cpu.c" 1
 240 0042 EFF31180 		    mrs     r0, BASEPRI
 241 0046 7047     	    bx      lr
 242              	
 243              	@ 0 "" 2
 244              		.thumb
 245              		.syntax unified
 246 0048 1C46     		mov	r4, r3
 494:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           "    bx      lr\n"
 495:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****           : "=r" (ui32Ret));
 496:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** 
 497:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 498:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // The return is handled in the inline assembly, but the compiler will
 499:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // still complain if there is not an explicit return here (despite the fact
 500:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // that this does not result in any code being produced because of the
 501:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     // naked attribute).
 502:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     //
 503:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c ****     return(ui32Ret);
 247              		.loc 1 503 0
 248 004a 2346     		mov	r3, r4
 504:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/cpu.c **** }
 249              		.loc 1 504 0
 250 004c 1846     		mov	r0, r3
 251              		.cfi_endproc
 252              	.LFE7:
 254              	.Letext0:
 255              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 256              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
DEFINED SYMBOLS
                            *ABS*:00000000 cpu.c
C:\Users\Lee\AppData\Local\Temp\cc3rLvXd.s:15     .text:00000000 $t
C:\Users\Lee\AppData\Local\Temp\cc3rLvXd.s:22     .text:00000000 CPUcpsid
C:\Users\Lee\AppData\Local\Temp\cc3rLvXd.s:55     .text:0000000e CPUprimask
C:\Users\Lee\AppData\Local\Temp\cc3rLvXd.s:86     .text:0000001a CPUcpsie
C:\Users\Lee\AppData\Local\Temp\cc3rLvXd.s:118    .text:00000028 CPUwfi
C:\Users\Lee\AppData\Local\Temp\cc3rLvXd.s:146    .text:0000002e CPUwfe
C:\Users\Lee\AppData\Local\Temp\cc3rLvXd.s:174    .text:00000034 CPUsev
C:\Users\Lee\AppData\Local\Temp\cc3rLvXd.s:202    .text:0000003a CPUbasepriSet
C:\Users\Lee\AppData\Local\Temp\cc3rLvXd.s:230    .text:00000042 CPUbasepriGet
                           .group:00000000 wm4.0.93d65e4ff05d5af51629690e5b534e57
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519

NO UNDEFINED SYMBOLS
