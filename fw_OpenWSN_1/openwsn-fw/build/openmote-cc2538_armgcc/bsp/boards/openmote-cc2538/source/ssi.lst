   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"ssi.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.global	SSIConfigSetExpClk
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	SSIConfigSetExpClk:
  23              	.LFB0:
  24              		.file 1 "build\\openmote-cc2538_armgcc\\bsp\\boards\\openmote-cc2538\\source\\ssi.c"
   1:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** /******************************************************************************
   2:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  Filename:       ssi.c
   3:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  Revised:        $Date: 2013-03-20 14:47:53 +0100 (Wed, 20 Mar 2013) $
   4:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  Revision:       $Revision: 9489 $
   5:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *
   6:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  Description:    Driver for Synchronous Serial Interface.
   7:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *
   8:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *
  10:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *
  11:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  Redistribution and use in source and binary forms, with or without
  12:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  modification, are permitted provided that the following conditions
  13:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  are met:
  14:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *
  15:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *    Redistributions of source code must retain the above copyright
  16:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *    notice, this list of conditions and the following disclaimer.
  17:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *
  18:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *    documentation and/or other materials provided with the distribution.
  21:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *
  22:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *    its contributors may be used to endorse or promote products derived
  24:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *    from this software without specific prior written permission.
  25:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *
  26:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** *
  38:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** ******************************************************************************/
  39:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
  40:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
  41:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
  42:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \addtogroup ssi_api
  43:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! @{
  44:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
  45:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
  46:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
  47:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** #include <headers/hw_ints.h>
  48:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** #include <headers/hw_memmap.h>
  49:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** #include <headers/hw_ssi.h>
  50:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** #include "debug.h"
  51:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** #include "interrupt.h"
  52:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** #include "ssi.h"
  53:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
  54:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
  55:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
  56:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Configures the synchronous serial interface
  57:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
  58:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
  59:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32SSIClk is the rate of the clock supplied to the SSI module.
  60:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Protocol specifies the data transfer protocol.
  61:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Mode specifies the mode of operation.
  62:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32BitRate specifies the clock rate.
  63:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32DataWidth specifies number of bits transferred per frame.
  64:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
  65:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! This function configures the synchronous serial interface.  It sets
  66:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! the SSI protocol, mode of operation, bit rate, and data width.
  67:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
  68:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! The \e ui32Protocol parameter defines the data frame format.  The
  69:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \e ui32Protocol parameter can be one of the following values:
  70:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \b SSI_FRF_MOTO_MODE_0, \b SSI_FRF_MOTO_MODE_1, \b SSI_FRF_MOTO_MODE_2,
  71:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \b SSI_FRF_MOTO_MODE_3, \b SSI_FRF_TI, or \b SSI_FRF_NMW.  The Motorola
  72:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! frame formats imply the following polarity and phase configurations:
  73:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
  74:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! <pre>
  75:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Polarity Phase       Mode
  76:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!   0       0   SSI_FRF_MOTO_MODE_0
  77:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!   0       1   SSI_FRF_MOTO_MODE_1
  78:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!   1       0   SSI_FRF_MOTO_MODE_2
  79:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!   1       1   SSI_FRF_MOTO_MODE_3
  80:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! </pre>
  81:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
  82:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! The \e ui32Mode parameter defines the operating mode of the SSI module.  The
  83:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! SSI module can operate as a master or slave; if a slave, the SSI can be
  84:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! configured to disable output on its serial output line.  The \e ui32Mode
  85:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! parameter can be one of the following values: \b SSI_MODE_MASTER,
  86:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \b SSI_MODE_SLAVE, or \b SSI_MODE_SLAVE_OD.
  87:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
  88:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! The \e ui32BitRate parameter defines the bit rate for the SSI.  This bit rate
  89:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! must satisfy the following clock ratio criteria:
  90:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
  91:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! - FSSI >= 2 * bit rate (master mode)
  92:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! - FSSI >= 12 * bit rate (slave modes)
  93:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
  94:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! where FSSI is the frequency of the clock supplied to the SSI module.
  95:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
  96:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! The \e ui32DataWidth parameter defines the width of the data transfers, and
  97:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! can be a value between 4 and 16, inclusive.
  98:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
  99:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! The peripheral clock is set in the System Control module.  The frequency of
 100:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! the system clock is the value returned by SysCtrlClockGet() or
 101:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! SysCtrlIOClockGet() depending on the chosen clock source as set by
 102:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! SSIClockSourceSet(), or it can be explicitly hard coded if it is constant
 103:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! and known (to save the code/execution overhead of a call to
 104:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! SysCtrlClockGet() or SysCtrlIOClockGet()).
 105:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 106:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return None
 107:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 108:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 109:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** void
 110:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIConfigSetExpClk(uint32_t ui32Base, uint32_t ui32SSIClk,
 111:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****                    uint32_t ui32Protocol, uint32_t ui32Mode,
 112:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****                    uint32_t ui32BitRate, uint32_t ui32DataWidth)
 113:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
  25              		.loc 1 113 0
  26              		.cfi_startproc
  27              		@ args = 8, pretend = 0, frame = 40
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 80B4     		push	{r7}
  31              		.cfi_def_cfa_offset 4
  32              		.cfi_offset 7, -4
  33 0002 8BB0     		sub	sp, sp, #44
  34              		.cfi_def_cfa_offset 48
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 F860     		str	r0, [r7, #12]
  38 0008 B960     		str	r1, [r7, #8]
  39 000a 7A60     		str	r2, [r7, #4]
  40 000c 3B60     		str	r3, [r7]
 114:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     uint32_t ui32MaxBitRate;
 115:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     uint32_t ui32RegVal;
 116:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     uint32_t ui32PreDiv;
 117:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     uint32_t ui32SCR;
 118:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     uint32_t ui32SPH_SPO;
 119:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 120:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 121:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 122:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 123:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 124:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Protocol == SSI_FRF_MOTO_MODE_0) ||
 125:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****            (ui32Protocol == SSI_FRF_MOTO_MODE_1) ||
 126:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****            (ui32Protocol == SSI_FRF_MOTO_MODE_2) ||
 127:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****            (ui32Protocol == SSI_FRF_MOTO_MODE_3) ||
 128:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****            (ui32Protocol == SSI_FRF_TI) ||
 129:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****            (ui32Protocol == SSI_FRF_NMW));
 130:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Mode == SSI_MODE_MASTER) ||
 131:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****            (ui32Mode == SSI_MODE_SLAVE) ||
 132:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****            (ui32Mode == SSI_MODE_SLAVE_OD));
 133:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT(((ui32Mode == SSI_MODE_MASTER) && (ui32BitRate <= (ui32SSIClk / 2))) ||
 134:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****            ((ui32Mode != SSI_MODE_MASTER) && (ui32BitRate <= (ui32SSIClk / 12))));
 135:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32SSIClk / ui32BitRate) <= (254 * 256));
 136:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32DataWidth >= 4) && (ui32DataWidth <= 16));
 137:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 138:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 139:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Set the mode.
 140:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 141:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ui32RegVal = (ui32Mode == SSI_MODE_SLAVE_OD) ? SSI_CR1_SOD : 0;
  41              		.loc 1 141 0
  42 000e 3B68     		ldr	r3, [r7]
  43 0010 022B     		cmp	r3, #2
  44 0012 01D1     		bne	.L2
  45              		.loc 1 141 0 is_stmt 0 discriminator 1
  46 0014 0823     		movs	r3, #8
  47 0016 00E0     		b	.L3
  48              	.L2:
  49              		.loc 1 141 0 discriminator 2
  50 0018 0023     		movs	r3, #0
  51              	.L3:
  52              		.loc 1 141 0 discriminator 4
  53 001a 3B62     		str	r3, [r7, #32]
 142:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ui32RegVal |= (ui32Mode == SSI_MODE_MASTER) ? 0 : SSI_CR1_MS;
  54              		.loc 1 142 0 is_stmt 1 discriminator 4
  55 001c 3B68     		ldr	r3, [r7]
  56 001e 002B     		cmp	r3, #0
  57 0020 01D1     		bne	.L4
  58              		.loc 1 142 0 is_stmt 0 discriminator 1
  59 0022 0023     		movs	r3, #0
  60 0024 00E0     		b	.L5
  61              	.L4:
  62              		.loc 1 142 0 discriminator 2
  63 0026 0423     		movs	r3, #4
  64              	.L5:
  65              		.loc 1 142 0 discriminator 4
  66 0028 3A6A     		ldr	r2, [r7, #32]
  67 002a 1343     		orrs	r3, r3, r2
  68 002c 3B62     		str	r3, [r7, #32]
 143:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     HWREG(ui32Base + SSI_O_CR1) = ui32RegVal;
  69              		.loc 1 143 0 is_stmt 1 discriminator 4
  70 002e FB68     		ldr	r3, [r7, #12]
  71 0030 0433     		adds	r3, r3, #4
  72 0032 1A46     		mov	r2, r3
  73 0034 3B6A     		ldr	r3, [r7, #32]
  74 0036 1360     		str	r3, [r2]
 144:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 145:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 146:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Set the clock predivider.
 147:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 148:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ui32MaxBitRate = ui32SSIClk / ui32BitRate;
  75              		.loc 1 148 0 discriminator 4
  76 0038 BA68     		ldr	r2, [r7, #8]
  77 003a 3B6B     		ldr	r3, [r7, #48]
  78 003c B2FBF3F3 		udiv	r3, r2, r3
  79 0040 FB61     		str	r3, [r7, #28]
 149:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ui32PreDiv = 0;
  80              		.loc 1 149 0 discriminator 4
  81 0042 0023     		movs	r3, #0
  82 0044 7B62     		str	r3, [r7, #36]
  83              	.L6:
 150:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     do
 151:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     {
 152:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****         ui32PreDiv += 2;
  84              		.loc 1 152 0 discriminator 1
  85 0046 7B6A     		ldr	r3, [r7, #36]
  86 0048 0233     		adds	r3, r3, #2
  87 004a 7B62     		str	r3, [r7, #36]
 153:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****         ui32SCR = (ui32MaxBitRate / ui32PreDiv) - 1;
  88              		.loc 1 153 0 discriminator 1
  89 004c FA69     		ldr	r2, [r7, #28]
  90 004e 7B6A     		ldr	r3, [r7, #36]
  91 0050 B2FBF3F3 		udiv	r3, r2, r3
  92 0054 013B     		subs	r3, r3, #1
  93 0056 BB61     		str	r3, [r7, #24]
 154:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     }
 155:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     while(ui32SCR > 255);
  94              		.loc 1 155 0 discriminator 1
  95 0058 BB69     		ldr	r3, [r7, #24]
  96 005a FF2B     		cmp	r3, #255
  97 005c F3D8     		bhi	.L6
 156:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     HWREG(ui32Base + SSI_O_CPSR) = ui32PreDiv;
  98              		.loc 1 156 0
  99 005e FB68     		ldr	r3, [r7, #12]
 100 0060 1033     		adds	r3, r3, #16
 101 0062 1A46     		mov	r2, r3
 102 0064 7B6A     		ldr	r3, [r7, #36]
 103 0066 1360     		str	r3, [r2]
 157:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 158:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 159:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Set protocol and clock rate.
 160:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 161:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ui32SPH_SPO = (ui32Protocol & 3) << 6;
 104              		.loc 1 161 0
 105 0068 7B68     		ldr	r3, [r7, #4]
 106 006a 9B01     		lsls	r3, r3, #6
 107 006c DBB2     		uxtb	r3, r3
 108 006e 7B61     		str	r3, [r7, #20]
 162:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ui32Protocol &= SSI_CR0_FRF_M;
 109              		.loc 1 162 0
 110 0070 7B68     		ldr	r3, [r7, #4]
 111 0072 03F03003 		and	r3, r3, #48
 112 0076 7B60     		str	r3, [r7, #4]
 163:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ui32RegVal = (ui32SCR << 8) | ui32SPH_SPO | ui32Protocol | (ui32DataWidth - 1);
 113              		.loc 1 163 0
 114 0078 BB69     		ldr	r3, [r7, #24]
 115 007a 1A02     		lsls	r2, r3, #8
 116 007c 7B69     		ldr	r3, [r7, #20]
 117 007e 1A43     		orrs	r2, r2, r3
 118 0080 7B68     		ldr	r3, [r7, #4]
 119 0082 1A43     		orrs	r2, r2, r3
 120 0084 7B6B     		ldr	r3, [r7, #52]
 121 0086 013B     		subs	r3, r3, #1
 122 0088 1343     		orrs	r3, r3, r2
 123 008a 3B62     		str	r3, [r7, #32]
 164:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     HWREG(ui32Base + SSI_O_CR0) = ui32RegVal;
 124              		.loc 1 164 0
 125 008c FB68     		ldr	r3, [r7, #12]
 126 008e 3A6A     		ldr	r2, [r7, #32]
 127 0090 1A60     		str	r2, [r3]
 165:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 128              		.loc 1 165 0
 129 0092 00BF     		nop
 130 0094 2C37     		adds	r7, r7, #44
 131              		.cfi_def_cfa_offset 4
 132 0096 BD46     		mov	sp, r7
 133              		.cfi_def_cfa_register 13
 134              		@ sp needed
 135 0098 80BC     		pop	{r7}
 136              		.cfi_restore 7
 137              		.cfi_def_cfa_offset 0
 138 009a 7047     		bx	lr
 139              		.cfi_endproc
 140              	.LFE0:
 142              		.align	1
 143              		.global	SSIEnable
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 147              		.fpu softvfp
 149              	SSIEnable:
 150              	.LFB1:
 166:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 167:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 168:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 169:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Enables the synchronous serial interface
 170:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 171:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 172:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 173:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! This function enables operation of the synchronous serial interface.  The
 174:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! synchronous serial interface must be configured before it is enabled.
 175:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 176:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return None
 177:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 178:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 179:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** void
 180:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIEnable(uint32_t ui32Base)
 181:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 151              		.loc 1 181 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 8
 154              		@ frame_needed = 1, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 156 009c 80B4     		push	{r7}
 157              		.cfi_def_cfa_offset 4
 158              		.cfi_offset 7, -4
 159 009e 83B0     		sub	sp, sp, #12
 160              		.cfi_def_cfa_offset 16
 161 00a0 00AF     		add	r7, sp, #0
 162              		.cfi_def_cfa_register 7
 163 00a2 7860     		str	r0, [r7, #4]
 182:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 183:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 184:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 185:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 186:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 187:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 188:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Read-modify-write the enable bit.
 189:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 190:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     HWREG(ui32Base + SSI_O_CR1) |= SSI_CR1_SSE;
 164              		.loc 1 190 0
 165 00a4 7B68     		ldr	r3, [r7, #4]
 166 00a6 0433     		adds	r3, r3, #4
 167 00a8 1B68     		ldr	r3, [r3]
 168 00aa 7A68     		ldr	r2, [r7, #4]
 169 00ac 0432     		adds	r2, r2, #4
 170 00ae 43F00203 		orr	r3, r3, #2
 171 00b2 1360     		str	r3, [r2]
 191:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 172              		.loc 1 191 0
 173 00b4 00BF     		nop
 174 00b6 0C37     		adds	r7, r7, #12
 175              		.cfi_def_cfa_offset 4
 176 00b8 BD46     		mov	sp, r7
 177              		.cfi_def_cfa_register 13
 178              		@ sp needed
 179 00ba 80BC     		pop	{r7}
 180              		.cfi_restore 7
 181              		.cfi_def_cfa_offset 0
 182 00bc 7047     		bx	lr
 183              		.cfi_endproc
 184              	.LFE1:
 186              		.align	1
 187              		.global	SSIDisable
 188              		.syntax unified
 189              		.thumb
 190              		.thumb_func
 191              		.fpu softvfp
 193              	SSIDisable:
 194              	.LFB2:
 192:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 193:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 194:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 195:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Disables the synchronous serial interface
 196:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 197:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 198:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 199:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! This function disables operation of the synchronous serial interface.
 200:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 201:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return None
 202:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 203:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 204:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** void
 205:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIDisable(uint32_t ui32Base)
 206:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 195              		.loc 1 206 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 8
 198              		@ frame_needed = 1, uses_anonymous_args = 0
 199              		@ link register save eliminated.
 200 00be 80B4     		push	{r7}
 201              		.cfi_def_cfa_offset 4
 202              		.cfi_offset 7, -4
 203 00c0 83B0     		sub	sp, sp, #12
 204              		.cfi_def_cfa_offset 16
 205 00c2 00AF     		add	r7, sp, #0
 206              		.cfi_def_cfa_register 7
 207 00c4 7860     		str	r0, [r7, #4]
 207:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 208:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 209:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 210:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 211:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 212:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 213:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Read-modify-write the enable bit.
 214:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 215:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     HWREG(ui32Base + SSI_O_CR1) &= ~(SSI_CR1_SSE);
 208              		.loc 1 215 0
 209 00c6 7B68     		ldr	r3, [r7, #4]
 210 00c8 0433     		adds	r3, r3, #4
 211 00ca 1B68     		ldr	r3, [r3]
 212 00cc 7A68     		ldr	r2, [r7, #4]
 213 00ce 0432     		adds	r2, r2, #4
 214 00d0 23F00203 		bic	r3, r3, #2
 215 00d4 1360     		str	r3, [r2]
 216:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 216              		.loc 1 216 0
 217 00d6 00BF     		nop
 218 00d8 0C37     		adds	r7, r7, #12
 219              		.cfi_def_cfa_offset 4
 220 00da BD46     		mov	sp, r7
 221              		.cfi_def_cfa_register 13
 222              		@ sp needed
 223 00dc 80BC     		pop	{r7}
 224              		.cfi_restore 7
 225              		.cfi_def_cfa_offset 0
 226 00de 7047     		bx	lr
 227              		.cfi_endproc
 228              	.LFE2:
 230              		.align	1
 231              		.global	SSIIntRegister
 232              		.syntax unified
 233              		.thumb
 234              		.thumb_func
 235              		.fpu softvfp
 237              	SSIIntRegister:
 238              	.LFB3:
 217:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 218:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 219:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 220:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Registers an interrupt handler for the synchronous serial interface
 221:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 222:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 223:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param pfnHandler is a pointer to the function to be called when the
 224:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! synchronous serial interface interrupt occurs.
 225:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 226:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! This sets the handler to be called when an SSI interrupt
 227:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! occurs.  This will enable the global interrupt in the interrupt controller;
 228:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! specific SSI interrupts must be enabled via SSIIntEnable().  If necessary,
 229:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! it is the interrupt handler's responsibility to clear the interrupt source
 230:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! via SSIIntClear().
 231:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 232:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \sa See IntRegister() for important information about registering interrupt
 233:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! handlers.
 234:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 235:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return None
 236:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 237:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 238:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** void
 239:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIIntRegister(uint32_t ui32Base, void (*pfnHandler)(void))
 240:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 239              		.loc 1 240 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 16
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243 00e0 80B5     		push	{r7, lr}
 244              		.cfi_def_cfa_offset 8
 245              		.cfi_offset 7, -8
 246              		.cfi_offset 14, -4
 247 00e2 84B0     		sub	sp, sp, #16
 248              		.cfi_def_cfa_offset 24
 249 00e4 00AF     		add	r7, sp, #0
 250              		.cfi_def_cfa_register 7
 251 00e6 7860     		str	r0, [r7, #4]
 252 00e8 3960     		str	r1, [r7]
 241:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     uint32_t ui32Int;
 242:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 243:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 244:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 245:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 246:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 247:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 248:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 249:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Determine the interrupt number based on the SSI port.
 250:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 251:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ui32Int = (ui32Base == SSI0_BASE) ? INT_SSI0 : INT_SSI1;
 253              		.loc 1 251 0
 254 00ea 7B68     		ldr	r3, [r7, #4]
 255 00ec 084A     		ldr	r2, .L12
 256 00ee 9342     		cmp	r3, r2
 257 00f0 01D1     		bne	.L10
 258              		.loc 1 251 0 is_stmt 0 discriminator 1
 259 00f2 1723     		movs	r3, #23
 260 00f4 00E0     		b	.L11
 261              	.L10:
 262              		.loc 1 251 0 discriminator 2
 263 00f6 3223     		movs	r3, #50
 264              	.L11:
 265              		.loc 1 251 0 discriminator 4
 266 00f8 FB60     		str	r3, [r7, #12]
 252:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 253:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 254:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Register the interrupt handler, returning an error if an error occurs.
 255:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 256:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     IntRegister(ui32Int, pfnHandler);
 267              		.loc 1 256 0 is_stmt 1 discriminator 4
 268 00fa 3968     		ldr	r1, [r7]
 269 00fc F868     		ldr	r0, [r7, #12]
 270 00fe FFF7FEFF 		bl	IntRegister
 257:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 258:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 259:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Enable the synchronous serial interface interrupt.
 260:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 261:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     IntEnable(ui32Int);
 271              		.loc 1 261 0 discriminator 4
 272 0102 F868     		ldr	r0, [r7, #12]
 273 0104 FFF7FEFF 		bl	IntEnable
 262:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 274              		.loc 1 262 0 discriminator 4
 275 0108 00BF     		nop
 276 010a 1037     		adds	r7, r7, #16
 277              		.cfi_def_cfa_offset 8
 278 010c BD46     		mov	sp, r7
 279              		.cfi_def_cfa_register 13
 280              		@ sp needed
 281 010e 80BD     		pop	{r7, pc}
 282              	.L13:
 283              		.align	2
 284              	.L12:
 285 0110 00800040 		.word	1073774592
 286              		.cfi_endproc
 287              	.LFE3:
 289              		.align	1
 290              		.global	SSIIntUnregister
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 294              		.fpu softvfp
 296              	SSIIntUnregister:
 297              	.LFB4:
 263:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 264:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 265:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 266:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Unregisters an interrupt handler for the synchronous serial interface
 267:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 268:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 269:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 270:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! This function will clear the handler to be called when a SSI
 271:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! interrupt occurs.  This will also mask off the interrupt in the interrupt
 272:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! controller so that the interrupt handler no longer is called.
 273:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 274:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \sa See IntRegister() for important information about registering interrupt
 275:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! handlers.
 276:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 277:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return None
 278:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 279:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 280:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** void
 281:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIIntUnregister(uint32_t ui32Base)
 282:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 298              		.loc 1 282 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 16
 301              		@ frame_needed = 1, uses_anonymous_args = 0
 302 0114 80B5     		push	{r7, lr}
 303              		.cfi_def_cfa_offset 8
 304              		.cfi_offset 7, -8
 305              		.cfi_offset 14, -4
 306 0116 84B0     		sub	sp, sp, #16
 307              		.cfi_def_cfa_offset 24
 308 0118 00AF     		add	r7, sp, #0
 309              		.cfi_def_cfa_register 7
 310 011a 7860     		str	r0, [r7, #4]
 283:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     uint32_t ui32Int;
 284:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 285:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 286:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 287:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 288:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 289:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 290:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 291:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Determine the interrupt number based on the SSI port.
 292:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 293:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ui32Int = (ui32Base == SSI0_BASE) ? INT_SSI0 : INT_SSI1;
 311              		.loc 1 293 0
 312 011c 7B68     		ldr	r3, [r7, #4]
 313 011e 084A     		ldr	r2, .L17
 314 0120 9342     		cmp	r3, r2
 315 0122 01D1     		bne	.L15
 316              		.loc 1 293 0 is_stmt 0 discriminator 1
 317 0124 1723     		movs	r3, #23
 318 0126 00E0     		b	.L16
 319              	.L15:
 320              		.loc 1 293 0 discriminator 2
 321 0128 3223     		movs	r3, #50
 322              	.L16:
 323              		.loc 1 293 0 discriminator 4
 324 012a FB60     		str	r3, [r7, #12]
 294:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 295:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 296:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Disable the interrupt.
 297:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 298:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     IntDisable(ui32Int);
 325              		.loc 1 298 0 is_stmt 1 discriminator 4
 326 012c F868     		ldr	r0, [r7, #12]
 327 012e FFF7FEFF 		bl	IntDisable
 299:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 300:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 301:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Unregister the interrupt handler.
 302:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 303:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     IntUnregister(ui32Int);
 328              		.loc 1 303 0 discriminator 4
 329 0132 F868     		ldr	r0, [r7, #12]
 330 0134 FFF7FEFF 		bl	IntUnregister
 304:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 331              		.loc 1 304 0 discriminator 4
 332 0138 00BF     		nop
 333 013a 1037     		adds	r7, r7, #16
 334              		.cfi_def_cfa_offset 8
 335 013c BD46     		mov	sp, r7
 336              		.cfi_def_cfa_register 13
 337              		@ sp needed
 338 013e 80BD     		pop	{r7, pc}
 339              	.L18:
 340              		.align	2
 341              	.L17:
 342 0140 00800040 		.word	1073774592
 343              		.cfi_endproc
 344              	.LFE4:
 346              		.align	1
 347              		.global	SSIIntEnable
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 351              		.fpu softvfp
 353              	SSIIntEnable:
 354              	.LFB5:
 305:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 306:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 307:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 308:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Enables individual SSI interrupt sources
 309:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 310:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 311:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32IntFlags is a bit mask of the interrupt sources to be enabled.
 312:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 313:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Enables the indicated SSI interrupt sources.  Only the sources that are
 314:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! enabled can be reflected to the processor interrupt; disabled sources have
 315:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! no effect on the processor.  The \e ui32IntFlags parameter can be any of the
 316:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \b SSI_TXFF, \b SSI_RXFF, \b SSI_RXTO, or \b SSI_RXOR values.
 317:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 318:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return None
 319:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 320:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 321:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** void
 322:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags)
 323:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 355              		.loc 1 323 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 8
 358              		@ frame_needed = 1, uses_anonymous_args = 0
 359              		@ link register save eliminated.
 360 0144 80B4     		push	{r7}
 361              		.cfi_def_cfa_offset 4
 362              		.cfi_offset 7, -4
 363 0146 83B0     		sub	sp, sp, #12
 364              		.cfi_def_cfa_offset 16
 365 0148 00AF     		add	r7, sp, #0
 366              		.cfi_def_cfa_register 7
 367 014a 7860     		str	r0, [r7, #4]
 368 014c 3960     		str	r1, [r7]
 324:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 325:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 326:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 327:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 328:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 329:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 330:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Enable the specified interrupts.
 331:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 332:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     HWREG(ui32Base + SSI_O_IM) |= ui32IntFlags;
 369              		.loc 1 332 0
 370 014e 7B68     		ldr	r3, [r7, #4]
 371 0150 1433     		adds	r3, r3, #20
 372 0152 1A68     		ldr	r2, [r3]
 373 0154 7B68     		ldr	r3, [r7, #4]
 374 0156 1433     		adds	r3, r3, #20
 375 0158 1946     		mov	r1, r3
 376 015a 3B68     		ldr	r3, [r7]
 377 015c 1343     		orrs	r3, r3, r2
 378 015e 0B60     		str	r3, [r1]
 333:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 379              		.loc 1 333 0
 380 0160 00BF     		nop
 381 0162 0C37     		adds	r7, r7, #12
 382              		.cfi_def_cfa_offset 4
 383 0164 BD46     		mov	sp, r7
 384              		.cfi_def_cfa_register 13
 385              		@ sp needed
 386 0166 80BC     		pop	{r7}
 387              		.cfi_restore 7
 388              		.cfi_def_cfa_offset 0
 389 0168 7047     		bx	lr
 390              		.cfi_endproc
 391              	.LFE5:
 393              		.align	1
 394              		.global	SSIIntDisable
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 398              		.fpu softvfp
 400              	SSIIntDisable:
 401              	.LFB6:
 334:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 335:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 336:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 337:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Disables individual SSI interrupt sources
 338:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 339:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 340:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32IntFlags is a bit mask of the interrupt sources to be disabled.
 341:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 342:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Disables the indicated SSI interrupt sources.  The \e ui32IntFlags parameter
 343:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! can be any of the \b SSI_TXFF, \b SSI_RXFF, \b SSI_RXTO, or \b SSI_RXOR
 344:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! values.
 345:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 346:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return None
 347:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 348:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 349:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** void
 350:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags)
 351:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 402              		.loc 1 351 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 8
 405              		@ frame_needed = 1, uses_anonymous_args = 0
 406              		@ link register save eliminated.
 407 016a 80B4     		push	{r7}
 408              		.cfi_def_cfa_offset 4
 409              		.cfi_offset 7, -4
 410 016c 83B0     		sub	sp, sp, #12
 411              		.cfi_def_cfa_offset 16
 412 016e 00AF     		add	r7, sp, #0
 413              		.cfi_def_cfa_register 7
 414 0170 7860     		str	r0, [r7, #4]
 415 0172 3960     		str	r1, [r7]
 352:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 353:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 354:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 355:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 356:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 357:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 358:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Disable the specified interrupts.
 359:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 360:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     HWREG(ui32Base + SSI_O_IM) &= ~(ui32IntFlags);
 416              		.loc 1 360 0
 417 0174 7B68     		ldr	r3, [r7, #4]
 418 0176 1433     		adds	r3, r3, #20
 419 0178 1A68     		ldr	r2, [r3]
 420 017a 3B68     		ldr	r3, [r7]
 421 017c DB43     		mvns	r3, r3
 422 017e 7968     		ldr	r1, [r7, #4]
 423 0180 1431     		adds	r1, r1, #20
 424 0182 1340     		ands	r3, r3, r2
 425 0184 0B60     		str	r3, [r1]
 361:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 426              		.loc 1 361 0
 427 0186 00BF     		nop
 428 0188 0C37     		adds	r7, r7, #12
 429              		.cfi_def_cfa_offset 4
 430 018a BD46     		mov	sp, r7
 431              		.cfi_def_cfa_register 13
 432              		@ sp needed
 433 018c 80BC     		pop	{r7}
 434              		.cfi_restore 7
 435              		.cfi_def_cfa_offset 0
 436 018e 7047     		bx	lr
 437              		.cfi_endproc
 438              	.LFE6:
 440              		.align	1
 441              		.global	SSIIntStatus
 442              		.syntax unified
 443              		.thumb
 444              		.thumb_func
 445              		.fpu softvfp
 447              	SSIIntStatus:
 448              	.LFB7:
 362:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 363:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 364:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 365:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Gets the current interrupt status
 366:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 367:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 368:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param bMasked is \b false if the raw interrupt status is required or
 369:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \b true if the masked interrupt status is required.
 370:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 371:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! This function returns the interrupt status for the SSI module.  Either the
 372:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! raw interrupt status or the status of interrupts that are allowed to
 373:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! reflect to the processor can be returned.
 374:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 375:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return The current interrupt status, enumerated as a bit field of
 376:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \b SSI_TXFF, \b SSI_RXFF, \b SSI_RXTO, and \b SSI_RXOR.
 377:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 378:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 379:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** uint32_t
 380:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIIntStatus(uint32_t ui32Base, bool bMasked)
 381:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 449              		.loc 1 381 0
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 8
 452              		@ frame_needed = 1, uses_anonymous_args = 0
 453              		@ link register save eliminated.
 454 0190 80B4     		push	{r7}
 455              		.cfi_def_cfa_offset 4
 456              		.cfi_offset 7, -4
 457 0192 83B0     		sub	sp, sp, #12
 458              		.cfi_def_cfa_offset 16
 459 0194 00AF     		add	r7, sp, #0
 460              		.cfi_def_cfa_register 7
 461 0196 7860     		str	r0, [r7, #4]
 462 0198 0B46     		mov	r3, r1
 463 019a FB70     		strb	r3, [r7, #3]
 382:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 383:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 384:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 385:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 386:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 387:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 388:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Return either the interrupt status or the raw interrupt status as
 389:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // requested.
 390:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 391:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     if(bMasked)
 464              		.loc 1 391 0
 465 019c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 466 019e 002B     		cmp	r3, #0
 467 01a0 03D0     		beq	.L22
 392:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     {
 393:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****         return(HWREG(ui32Base + SSI_O_MIS));
 468              		.loc 1 393 0
 469 01a2 7B68     		ldr	r3, [r7, #4]
 470 01a4 1C33     		adds	r3, r3, #28
 471 01a6 1B68     		ldr	r3, [r3]
 472 01a8 02E0     		b	.L23
 473              	.L22:
 394:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     }
 395:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     else
 396:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     {
 397:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****         return(HWREG(ui32Base + SSI_O_RIS));
 474              		.loc 1 397 0
 475 01aa 7B68     		ldr	r3, [r7, #4]
 476 01ac 1833     		adds	r3, r3, #24
 477 01ae 1B68     		ldr	r3, [r3]
 478              	.L23:
 398:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     }
 399:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 479              		.loc 1 399 0
 480 01b0 1846     		mov	r0, r3
 481 01b2 0C37     		adds	r7, r7, #12
 482              		.cfi_def_cfa_offset 4
 483 01b4 BD46     		mov	sp, r7
 484              		.cfi_def_cfa_register 13
 485              		@ sp needed
 486 01b6 80BC     		pop	{r7}
 487              		.cfi_restore 7
 488              		.cfi_def_cfa_offset 0
 489 01b8 7047     		bx	lr
 490              		.cfi_endproc
 491              	.LFE7:
 493              		.align	1
 494              		.global	SSIIntClear
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 498              		.fpu softvfp
 500              	SSIIntClear:
 501              	.LFB8:
 400:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 401:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 402:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 403:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Clears SSI interrupt sources
 404:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 405:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 406:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32IntFlags is a bit mask of the interrupt sources to be cleared.
 407:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 408:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! The specified SSI interrupt sources are cleared so that they no longer
 409:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! assert.  This function must be called in the interrupt handler to keep the
 410:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! interrupts from being recognized again immediately upon exit.  The
 411:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \e ui32IntFlags parameter can consist of either or both the \b SSI_RXTO and
 412:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \b SSI_RXOR values.
 413:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 414:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \note Because there is a write buffer in the Cortex-M3 processor, it may
 415:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! take several clock cycles before the interrupt source is actually cleared.
 416:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Therefore, it is recommended that the interrupt source be cleared early in
 417:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! the interrupt handler (as opposed to the very last action) to avoid
 418:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! returning from the interrupt handler before the interrupt source is
 419:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! actually cleared.  Failure to do so may result in the interrupt handler
 420:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! being immediately reentered (because the interrupt controller still sees
 421:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! the interrupt source asserted).
 422:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 423:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return None
 424:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 425:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 426:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** void
 427:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIIntClear(uint32_t ui32Base, uint32_t ui32IntFlags)
 428:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 502              		.loc 1 428 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 8
 505              		@ frame_needed = 1, uses_anonymous_args = 0
 506              		@ link register save eliminated.
 507 01ba 80B4     		push	{r7}
 508              		.cfi_def_cfa_offset 4
 509              		.cfi_offset 7, -4
 510 01bc 83B0     		sub	sp, sp, #12
 511              		.cfi_def_cfa_offset 16
 512 01be 00AF     		add	r7, sp, #0
 513              		.cfi_def_cfa_register 7
 514 01c0 7860     		str	r0, [r7, #4]
 515 01c2 3960     		str	r1, [r7]
 429:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 430:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 431:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 432:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 433:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 434:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 435:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Clear the requested interrupt sources.
 436:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 437:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     HWREG(ui32Base + SSI_O_ICR) = ui32IntFlags;
 516              		.loc 1 437 0
 517 01c4 7B68     		ldr	r3, [r7, #4]
 518 01c6 2033     		adds	r3, r3, #32
 519 01c8 1A46     		mov	r2, r3
 520 01ca 3B68     		ldr	r3, [r7]
 521 01cc 1360     		str	r3, [r2]
 438:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 522              		.loc 1 438 0
 523 01ce 00BF     		nop
 524 01d0 0C37     		adds	r7, r7, #12
 525              		.cfi_def_cfa_offset 4
 526 01d2 BD46     		mov	sp, r7
 527              		.cfi_def_cfa_register 13
 528              		@ sp needed
 529 01d4 80BC     		pop	{r7}
 530              		.cfi_restore 7
 531              		.cfi_def_cfa_offset 0
 532 01d6 7047     		bx	lr
 533              		.cfi_endproc
 534              	.LFE8:
 536              		.align	1
 537              		.global	SSIDataPut
 538              		.syntax unified
 539              		.thumb
 540              		.thumb_func
 541              		.fpu softvfp
 543              	SSIDataPut:
 544              	.LFB9:
 439:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 440:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 441:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 442:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Puts a data element into the SSI transmit FIFO
 443:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 444:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 445:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Data is the data to be transmitted over the SSI interface.
 446:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 447:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! This function places the supplied data into the transmit FIFO of the
 448:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! specified SSI module.
 449:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 450:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \note The upper 32 - N bits of the \e ui32Data are discarded by the hardware,
 451:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! where N is the data width as configured by SSIConfigSetExpClk().  For
 452:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! example, if the interface is configured for 8-bit data width, the upper 24
 453:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! bits of \e ui32Data are discarded.
 454:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 455:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return None
 456:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 457:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 458:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** void
 459:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIDataPut(uint32_t ui32Base, uint32_t ui32Data)
 460:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 545              		.loc 1 460 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 8
 548              		@ frame_needed = 1, uses_anonymous_args = 0
 549              		@ link register save eliminated.
 550 01d8 80B4     		push	{r7}
 551              		.cfi_def_cfa_offset 4
 552              		.cfi_offset 7, -4
 553 01da 83B0     		sub	sp, sp, #12
 554              		.cfi_def_cfa_offset 16
 555 01dc 00AF     		add	r7, sp, #0
 556              		.cfi_def_cfa_register 7
 557 01de 7860     		str	r0, [r7, #4]
 558 01e0 3960     		str	r1, [r7]
 461:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 462:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 463:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 464:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 465:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Data & (0xfffffffe << (HWREG(ui32Base + SSI_O_CR0) &
 466:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****                                        SSI_CR0_DSS_M))) == 0);
 467:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 468:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 469:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Wait until there is space.
 470:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 471:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     while(!(HWREG(ui32Base + SSI_O_SR) & SSI_SR_TNF))
 559              		.loc 1 471 0
 560 01e2 00BF     		nop
 561              	.L26:
 562              		.loc 1 471 0 is_stmt 0 discriminator 1
 563 01e4 7B68     		ldr	r3, [r7, #4]
 564 01e6 0C33     		adds	r3, r3, #12
 565 01e8 1B68     		ldr	r3, [r3]
 566 01ea 03F00203 		and	r3, r3, #2
 567 01ee 002B     		cmp	r3, #0
 568 01f0 F8D0     		beq	.L26
 472:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     {
 473:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     }
 474:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 475:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 476:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Write the data to the SSI.
 477:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 478:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     HWREG(ui32Base + SSI_O_DR) = ui32Data;
 569              		.loc 1 478 0 is_stmt 1
 570 01f2 7B68     		ldr	r3, [r7, #4]
 571 01f4 0833     		adds	r3, r3, #8
 572 01f6 1A46     		mov	r2, r3
 573 01f8 3B68     		ldr	r3, [r7]
 574 01fa 1360     		str	r3, [r2]
 479:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 575              		.loc 1 479 0
 576 01fc 00BF     		nop
 577 01fe 0C37     		adds	r7, r7, #12
 578              		.cfi_def_cfa_offset 4
 579 0200 BD46     		mov	sp, r7
 580              		.cfi_def_cfa_register 13
 581              		@ sp needed
 582 0202 80BC     		pop	{r7}
 583              		.cfi_restore 7
 584              		.cfi_def_cfa_offset 0
 585 0204 7047     		bx	lr
 586              		.cfi_endproc
 587              	.LFE9:
 589              		.align	1
 590              		.global	SSIDataPutNonBlocking
 591              		.syntax unified
 592              		.thumb
 593              		.thumb_func
 594              		.fpu softvfp
 596              	SSIDataPutNonBlocking:
 597              	.LFB10:
 480:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 481:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 482:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 483:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Puts a data element into the SSI transmit FIFO
 484:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 485:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 486:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Data is the data to be transmitted over the SSI interface.
 487:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 488:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! This function places the supplied data into the transmit FIFO of the
 489:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! specified SSI module.  If there is no space in the FIFO, then this function
 490:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! returns a zero.
 491:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 492:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \note The upper 32 - N bits of the \e ui32Data are discarded by the hardware,
 493:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! where N is the data width as configured by SSIConfigSetExpClk().  For
 494:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! example, if the interface is configured for 8-bit data width, the upper 24
 495:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! bits of \e ui32Data are discarded.
 496:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 497:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return Returns the number of elements written to the SSI transmit FIFO.
 498:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 499:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 500:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** int32_t
 501:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIDataPutNonBlocking(uint32_t ui32Base, uint32_t ui32Data)
 502:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 598              		.loc 1 502 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 8
 601              		@ frame_needed = 1, uses_anonymous_args = 0
 602              		@ link register save eliminated.
 603 0206 80B4     		push	{r7}
 604              		.cfi_def_cfa_offset 4
 605              		.cfi_offset 7, -4
 606 0208 83B0     		sub	sp, sp, #12
 607              		.cfi_def_cfa_offset 16
 608 020a 00AF     		add	r7, sp, #0
 609              		.cfi_def_cfa_register 7
 610 020c 7860     		str	r0, [r7, #4]
 611 020e 3960     		str	r1, [r7]
 503:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 504:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 505:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 506:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 507:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Data & (0xfffffffe << (HWREG(ui32Base + SSI_O_CR0) &
 508:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****                                        SSI_CR0_DSS_M))) == 0);
 509:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 510:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 511:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check for space to write.
 512:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 513:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     if(HWREG(ui32Base + SSI_O_SR) & SSI_SR_TNF)
 612              		.loc 1 513 0
 613 0210 7B68     		ldr	r3, [r7, #4]
 614 0212 0C33     		adds	r3, r3, #12
 615 0214 1B68     		ldr	r3, [r3]
 616 0216 03F00203 		and	r3, r3, #2
 617 021a 002B     		cmp	r3, #0
 618 021c 06D0     		beq	.L28
 514:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     {
 515:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****         HWREG(ui32Base + SSI_O_DR) = ui32Data;
 619              		.loc 1 515 0
 620 021e 7B68     		ldr	r3, [r7, #4]
 621 0220 0833     		adds	r3, r3, #8
 622 0222 1A46     		mov	r2, r3
 623 0224 3B68     		ldr	r3, [r7]
 624 0226 1360     		str	r3, [r2]
 516:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****         return(1);
 625              		.loc 1 516 0
 626 0228 0123     		movs	r3, #1
 627 022a 00E0     		b	.L29
 628              	.L28:
 517:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     }
 518:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     else
 519:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     {
 520:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****         return(0);
 629              		.loc 1 520 0
 630 022c 0023     		movs	r3, #0
 631              	.L29:
 521:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     }
 522:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 632              		.loc 1 522 0
 633 022e 1846     		mov	r0, r3
 634 0230 0C37     		adds	r7, r7, #12
 635              		.cfi_def_cfa_offset 4
 636 0232 BD46     		mov	sp, r7
 637              		.cfi_def_cfa_register 13
 638              		@ sp needed
 639 0234 80BC     		pop	{r7}
 640              		.cfi_restore 7
 641              		.cfi_def_cfa_offset 0
 642 0236 7047     		bx	lr
 643              		.cfi_endproc
 644              	.LFE10:
 646              		.align	1
 647              		.global	SSIDataGet
 648              		.syntax unified
 649              		.thumb
 650              		.thumb_func
 651              		.fpu softvfp
 653              	SSIDataGet:
 654              	.LFB11:
 523:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 524:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 525:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 526:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Gets a data element from the SSI receive FIFO
 527:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 528:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 529:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param pui32Data is a pointer to a storage location for data that was
 530:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! received over the SSI interface.
 531:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 532:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! This function gets received data from the receive FIFO of the specified
 533:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! SSI module and places that data into the location specified by the
 534:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \e pui32Data parameter.
 535:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 536:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \note Only the lower N bits of the value written to \e pui32Data contain
 537:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! valid data, where N is the data width as configured by
 538:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! SSIConfigSetExpClk().  For example, if the interface is configured for
 539:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! 8-bit data width, only the lower 8 bits of the value written to \e pui32Data
 540:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! contain valid data.
 541:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 542:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return None
 543:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 544:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 545:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** void
 546:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIDataGet(uint32_t ui32Base, uint32_t *pui32Data)
 547:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 655              		.loc 1 547 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 8
 658              		@ frame_needed = 1, uses_anonymous_args = 0
 659              		@ link register save eliminated.
 660 0238 80B4     		push	{r7}
 661              		.cfi_def_cfa_offset 4
 662              		.cfi_offset 7, -4
 663 023a 83B0     		sub	sp, sp, #12
 664              		.cfi_def_cfa_offset 16
 665 023c 00AF     		add	r7, sp, #0
 666              		.cfi_def_cfa_register 7
 667 023e 7860     		str	r0, [r7, #4]
 668 0240 3960     		str	r1, [r7]
 548:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 549:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 550:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 551:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 552:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 553:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 554:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Wait until there is data to be read.
 555:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 556:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     while(!(HWREG(ui32Base + SSI_O_SR) & SSI_SR_RNE))
 669              		.loc 1 556 0
 670 0242 00BF     		nop
 671              	.L31:
 672              		.loc 1 556 0 is_stmt 0 discriminator 1
 673 0244 7B68     		ldr	r3, [r7, #4]
 674 0246 0C33     		adds	r3, r3, #12
 675 0248 1B68     		ldr	r3, [r3]
 676 024a 03F00403 		and	r3, r3, #4
 677 024e 002B     		cmp	r3, #0
 678 0250 F8D0     		beq	.L31
 557:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     {
 558:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     }
 559:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 560:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 561:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Read data from SSI.
 562:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 563:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     *pui32Data = HWREG(ui32Base + SSI_O_DR);
 679              		.loc 1 563 0 is_stmt 1
 680 0252 7B68     		ldr	r3, [r7, #4]
 681 0254 0833     		adds	r3, r3, #8
 682 0256 1A68     		ldr	r2, [r3]
 683 0258 3B68     		ldr	r3, [r7]
 684 025a 1A60     		str	r2, [r3]
 564:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 685              		.loc 1 564 0
 686 025c 00BF     		nop
 687 025e 0C37     		adds	r7, r7, #12
 688              		.cfi_def_cfa_offset 4
 689 0260 BD46     		mov	sp, r7
 690              		.cfi_def_cfa_register 13
 691              		@ sp needed
 692 0262 80BC     		pop	{r7}
 693              		.cfi_restore 7
 694              		.cfi_def_cfa_offset 0
 695 0264 7047     		bx	lr
 696              		.cfi_endproc
 697              	.LFE11:
 699              		.align	1
 700              		.global	SSIDataGetNonBlocking
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 704              		.fpu softvfp
 706              	SSIDataGetNonBlocking:
 707              	.LFB12:
 565:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 566:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 567:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 568:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Gets a data element from the SSI receive FIFO
 569:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 570:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 571:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param pui32Data is a pointer to a storage location for data that was
 572:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! received over the SSI interface.
 573:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 574:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! This function gets received data from the receive FIFO of the specified SSI
 575:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! module and places that data into the location specified by the \e ui32Data
 576:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! parameter.  If there is no data in the FIFO, then this function returns a
 577:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! zero.
 578:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 579:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \note Only the lower N bits of the value written to \e pui32Data contain
 580:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! valid data, where N is the data width as configured by
 581:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! SSIConfigSetExpClk().  For example, if the interface is configured for
 582:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! 8-bit data width, only the lower 8 bits of the value written to \e pui32Data
 583:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! contain valid data.
 584:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 585:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return Returns the number of elements read from the SSI receive FIFO.
 586:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 587:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 588:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** int32_t
 589:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIDataGetNonBlocking(uint32_t ui32Base, uint32_t *pui32Data)
 590:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 708              		.loc 1 590 0
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 8
 711              		@ frame_needed = 1, uses_anonymous_args = 0
 712              		@ link register save eliminated.
 713 0266 80B4     		push	{r7}
 714              		.cfi_def_cfa_offset 4
 715              		.cfi_offset 7, -4
 716 0268 83B0     		sub	sp, sp, #12
 717              		.cfi_def_cfa_offset 16
 718 026a 00AF     		add	r7, sp, #0
 719              		.cfi_def_cfa_register 7
 720 026c 7860     		str	r0, [r7, #4]
 721 026e 3960     		str	r1, [r7]
 591:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 592:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 593:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 594:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 595:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 596:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 597:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check for data to read.
 598:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 599:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     if(HWREG(ui32Base + SSI_O_SR) & SSI_SR_RNE)
 722              		.loc 1 599 0
 723 0270 7B68     		ldr	r3, [r7, #4]
 724 0272 0C33     		adds	r3, r3, #12
 725 0274 1B68     		ldr	r3, [r3]
 726 0276 03F00403 		and	r3, r3, #4
 727 027a 002B     		cmp	r3, #0
 728 027c 06D0     		beq	.L33
 600:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     {
 601:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****         *pui32Data = HWREG(ui32Base + SSI_O_DR);
 729              		.loc 1 601 0
 730 027e 7B68     		ldr	r3, [r7, #4]
 731 0280 0833     		adds	r3, r3, #8
 732 0282 1A68     		ldr	r2, [r3]
 733 0284 3B68     		ldr	r3, [r7]
 734 0286 1A60     		str	r2, [r3]
 602:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****         return(1);
 735              		.loc 1 602 0
 736 0288 0123     		movs	r3, #1
 737 028a 00E0     		b	.L34
 738              	.L33:
 603:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     }
 604:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     else
 605:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     {
 606:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****         return(0);
 739              		.loc 1 606 0
 740 028c 0023     		movs	r3, #0
 741              	.L34:
 607:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     }
 608:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 742              		.loc 1 608 0
 743 028e 1846     		mov	r0, r3
 744 0290 0C37     		adds	r7, r7, #12
 745              		.cfi_def_cfa_offset 4
 746 0292 BD46     		mov	sp, r7
 747              		.cfi_def_cfa_register 13
 748              		@ sp needed
 749 0294 80BC     		pop	{r7}
 750              		.cfi_restore 7
 751              		.cfi_def_cfa_offset 0
 752 0296 7047     		bx	lr
 753              		.cfi_endproc
 754              	.LFE12:
 756              		.align	1
 757              		.global	SSIDMAEnable
 758              		.syntax unified
 759              		.thumb
 760              		.thumb_func
 761              		.fpu softvfp
 763              	SSIDMAEnable:
 764              	.LFB13:
 609:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 610:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 611:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 612:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Enable SSI DMA operation
 613:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 614:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 615:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32DMAFlags is a bit mask of the DMA features to enable.
 616:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 617:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! The specified SSI DMA features are enabled.  The SSI can be
 618:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! configured to use DMA for transmit and/or receive data transfers.
 619:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! The \e ui32DMAFlags parameter is the logical OR of any of the following
 620:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! values:
 621:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 622:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! - SSI_DMA_RX - enable DMA for receive
 623:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! - SSI_DMA_TX - enable DMA for transmit
 624:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 625:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \note The uDMA controller must also be set up before DMA can be used
 626:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! with the SSI.
 627:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 628:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return None
 629:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 630:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 631:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** void
 632:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIDMAEnable(uint32_t ui32Base, uint32_t ui32DMAFlags)
 633:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 765              		.loc 1 633 0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 8
 768              		@ frame_needed = 1, uses_anonymous_args = 0
 769              		@ link register save eliminated.
 770 0298 80B4     		push	{r7}
 771              		.cfi_def_cfa_offset 4
 772              		.cfi_offset 7, -4
 773 029a 83B0     		sub	sp, sp, #12
 774              		.cfi_def_cfa_offset 16
 775 029c 00AF     		add	r7, sp, #0
 776              		.cfi_def_cfa_register 7
 777 029e 7860     		str	r0, [r7, #4]
 778 02a0 3960     		str	r1, [r7]
 634:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 635:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 636:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 637:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 638:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 639:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 640:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Set the requested bits in the SSI DMA control register.
 641:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 642:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     HWREG(ui32Base + SSI_O_DMACTL) |= ui32DMAFlags;
 779              		.loc 1 642 0
 780 02a2 7B68     		ldr	r3, [r7, #4]
 781 02a4 2433     		adds	r3, r3, #36
 782 02a6 1A68     		ldr	r2, [r3]
 783 02a8 7B68     		ldr	r3, [r7, #4]
 784 02aa 2433     		adds	r3, r3, #36
 785 02ac 1946     		mov	r1, r3
 786 02ae 3B68     		ldr	r3, [r7]
 787 02b0 1343     		orrs	r3, r3, r2
 788 02b2 0B60     		str	r3, [r1]
 643:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 789              		.loc 1 643 0
 790 02b4 00BF     		nop
 791 02b6 0C37     		adds	r7, r7, #12
 792              		.cfi_def_cfa_offset 4
 793 02b8 BD46     		mov	sp, r7
 794              		.cfi_def_cfa_register 13
 795              		@ sp needed
 796 02ba 80BC     		pop	{r7}
 797              		.cfi_restore 7
 798              		.cfi_def_cfa_offset 0
 799 02bc 7047     		bx	lr
 800              		.cfi_endproc
 801              	.LFE13:
 803              		.align	1
 804              		.global	SSIDMADisable
 805              		.syntax unified
 806              		.thumb
 807              		.thumb_func
 808              		.fpu softvfp
 810              	SSIDMADisable:
 811              	.LFB14:
 644:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 645:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 646:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 647:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Disable SSI DMA operation
 648:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 649:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 650:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32DMAFlags is a bit mask of the DMA features to disable.
 651:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 652:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! This function is used to disable SSI DMA features that were enabled
 653:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! by SSIDMAEnable().  The specified SSI DMA features are disabled.  The
 654:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \e ui32DMAFlags parameter is the logical OR of any of the following values:
 655:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 656:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! - SSI_DMA_RX - disable DMA for receive
 657:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! - SSI_DMA_TX - disable DMA for transmit
 658:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 659:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return None
 660:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 661:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 662:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** void
 663:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIDMADisable(uint32_t ui32Base, uint32_t ui32DMAFlags)
 664:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 812              		.loc 1 664 0
 813              		.cfi_startproc
 814              		@ args = 0, pretend = 0, frame = 8
 815              		@ frame_needed = 1, uses_anonymous_args = 0
 816              		@ link register save eliminated.
 817 02be 80B4     		push	{r7}
 818              		.cfi_def_cfa_offset 4
 819              		.cfi_offset 7, -4
 820 02c0 83B0     		sub	sp, sp, #12
 821              		.cfi_def_cfa_offset 16
 822 02c2 00AF     		add	r7, sp, #0
 823              		.cfi_def_cfa_register 7
 824 02c4 7860     		str	r0, [r7, #4]
 825 02c6 3960     		str	r1, [r7]
 665:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 666:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 667:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 668:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 669:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 670:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 671:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Clear the requested bits in the SSI DMA control register.
 672:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 673:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     HWREG(ui32Base + SSI_O_DMACTL) &= ~ui32DMAFlags;
 826              		.loc 1 673 0
 827 02c8 7B68     		ldr	r3, [r7, #4]
 828 02ca 2433     		adds	r3, r3, #36
 829 02cc 1A68     		ldr	r2, [r3]
 830 02ce 3B68     		ldr	r3, [r7]
 831 02d0 DB43     		mvns	r3, r3
 832 02d2 7968     		ldr	r1, [r7, #4]
 833 02d4 2431     		adds	r1, r1, #36
 834 02d6 1340     		ands	r3, r3, r2
 835 02d8 0B60     		str	r3, [r1]
 674:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 836              		.loc 1 674 0
 837 02da 00BF     		nop
 838 02dc 0C37     		adds	r7, r7, #12
 839              		.cfi_def_cfa_offset 4
 840 02de BD46     		mov	sp, r7
 841              		.cfi_def_cfa_register 13
 842              		@ sp needed
 843 02e0 80BC     		pop	{r7}
 844              		.cfi_restore 7
 845              		.cfi_def_cfa_offset 0
 846 02e2 7047     		bx	lr
 847              		.cfi_endproc
 848              	.LFE14:
 850              		.align	1
 851              		.global	SSIBusy
 852              		.syntax unified
 853              		.thumb
 854              		.thumb_func
 855              		.fpu softvfp
 857              	SSIBusy:
 858              	.LFB15:
 675:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 676:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 677:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 678:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Determines whether the SSI transmitter is busy or not
 679:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 680:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 681:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 682:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Allows the caller to determine whether all transmitted bytes have cleared
 683:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! the transmitter hardware.  If \b false is returned, then the transmit FIFO
 684:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! is empty and all bits of the last transmitted word have left the hardware
 685:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! shift register.
 686:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 687:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return Returns \b true if the SSI is transmitting or \b false if all
 688:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! transmissions are complete.
 689:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 690:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 691:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** bool
 692:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIBusy(uint32_t ui32Base)
 693:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 859              		.loc 1 693 0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 8
 862              		@ frame_needed = 1, uses_anonymous_args = 0
 863              		@ link register save eliminated.
 864 02e4 80B4     		push	{r7}
 865              		.cfi_def_cfa_offset 4
 866              		.cfi_offset 7, -4
 867 02e6 83B0     		sub	sp, sp, #12
 868              		.cfi_def_cfa_offset 16
 869 02e8 00AF     		add	r7, sp, #0
 870              		.cfi_def_cfa_register 7
 871 02ea 7860     		str	r0, [r7, #4]
 694:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 695:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 696:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 697:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 698:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 699:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 700:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Determine if the SSI is busy.
 701:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 702:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     return((HWREG(ui32Base + SSI_O_SR) & SSI_SR_BSY) ? true : false);
 872              		.loc 1 702 0
 873 02ec 7B68     		ldr	r3, [r7, #4]
 874 02ee 0C33     		adds	r3, r3, #12
 875 02f0 1B68     		ldr	r3, [r3]
 876 02f2 03F01003 		and	r3, r3, #16
 877 02f6 002B     		cmp	r3, #0
 878 02f8 14BF     		ite	ne
 879 02fa 0123     		movne	r3, #1
 880 02fc 0023     		moveq	r3, #0
 881 02fe DBB2     		uxtb	r3, r3
 703:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 882              		.loc 1 703 0
 883 0300 1846     		mov	r0, r3
 884 0302 0C37     		adds	r7, r7, #12
 885              		.cfi_def_cfa_offset 4
 886 0304 BD46     		mov	sp, r7
 887              		.cfi_def_cfa_register 13
 888              		@ sp needed
 889 0306 80BC     		pop	{r7}
 890              		.cfi_restore 7
 891              		.cfi_def_cfa_offset 0
 892 0308 7047     		bx	lr
 893              		.cfi_endproc
 894              	.LFE15:
 896              		.align	1
 897              		.global	SSIClockSourceSet
 898              		.syntax unified
 899              		.thumb
 900              		.thumb_func
 901              		.fpu softvfp
 903              	SSIClockSourceSet:
 904              	.LFB16:
 704:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 705:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 706:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 707:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Sets the data clock source for the specified SSI peripheral
 708:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 709:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 710:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Source is the baud clock source for the SSI.
 711:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 712:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! This function allows the baud clock source for the SSI to be selected.
 713:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! The possible clock source are the system clock (\b SSI_CLOCK_SYSTEM) or
 714:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! the precision internal oscillator (\b SSI_CLOCK_PIOSC), i.e. the IO clock
 715:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! in the SysCtrl.
 716:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! If \b SSI_CLOCK_SYSTEM is chosen, the IO clock frequency must thus be
 717:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! queried by SysCtrlClockSet().
 718:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! If \b SSI_CLOCK_PIOSC the SysCtrlIOClockSet() function must be used.
 719:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 720:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Changing the baud clock source will change the data rate generated by the
 721:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! SSI.  Therefore, the data rate should be reconfigured after any change to
 722:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! the SSI clock source.
 723:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 724:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return None
 725:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 726:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 727:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** void
 728:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIClockSourceSet(uint32_t ui32Base, uint32_t ui32Source)
 729:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 905              		.loc 1 729 0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 8
 908              		@ frame_needed = 1, uses_anonymous_args = 0
 909              		@ link register save eliminated.
 910 030a 80B4     		push	{r7}
 911              		.cfi_def_cfa_offset 4
 912              		.cfi_offset 7, -4
 913 030c 83B0     		sub	sp, sp, #12
 914              		.cfi_def_cfa_offset 16
 915 030e 00AF     		add	r7, sp, #0
 916              		.cfi_def_cfa_register 7
 917 0310 7860     		str	r0, [r7, #4]
 918 0312 3960     		str	r1, [r7]
 730:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 731:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 732:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 733:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 734:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Source == SSI_CLOCK_SYSTEM) || (ui32Source == SSI_CLOCK_PIOSC));
 735:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 736:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 737:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Set the SSI clock source.
 738:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 739:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     HWREG(ui32Base + SSI_O_CC) = ui32Source;
 919              		.loc 1 739 0
 920 0314 7B68     		ldr	r3, [r7, #4]
 921 0316 03F6C873 		addw	r3, r3, #4040
 922 031a 1A46     		mov	r2, r3
 923 031c 3B68     		ldr	r3, [r7]
 924 031e 1360     		str	r3, [r2]
 740:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 925              		.loc 1 740 0
 926 0320 00BF     		nop
 927 0322 0C37     		adds	r7, r7, #12
 928              		.cfi_def_cfa_offset 4
 929 0324 BD46     		mov	sp, r7
 930              		.cfi_def_cfa_register 13
 931              		@ sp needed
 932 0326 80BC     		pop	{r7}
 933              		.cfi_restore 7
 934              		.cfi_def_cfa_offset 0
 935 0328 7047     		bx	lr
 936              		.cfi_endproc
 937              	.LFE16:
 939              		.align	1
 940              		.global	SSIClockSourceGet
 941              		.syntax unified
 942              		.thumb
 943              		.thumb_func
 944              		.fpu softvfp
 946              	SSIClockSourceGet:
 947              	.LFB17:
 741:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 742:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 743:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 744:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! Gets the data clock source for the specified SSI peripheral
 745:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 746:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 747:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 748:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! This function returns the data clock source for the specified SSI.  The
 749:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! possible data clock source are the system clock (\b SSI_CLOCK_SYSTEM) or
 750:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! the precision internal oscillator (\b SSI_CLOCK_PIOSC).
 751:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //!
 752:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //! \return None
 753:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //
 754:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** //*****************************************************************************
 755:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** uint32_t
 756:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** SSIClockSourceGet(uint32_t ui32Base)
 757:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** {
 948              		.loc 1 757 0
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 8
 951              		@ frame_needed = 1, uses_anonymous_args = 0
 952              		@ link register save eliminated.
 953 032a 80B4     		push	{r7}
 954              		.cfi_def_cfa_offset 4
 955              		.cfi_offset 7, -4
 956 032c 83B0     		sub	sp, sp, #12
 957              		.cfi_def_cfa_offset 16
 958 032e 00AF     		add	r7, sp, #0
 959              		.cfi_def_cfa_register 7
 960 0330 7860     		str	r0, [r7, #4]
 758:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 759:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Check the arguments.
 760:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 761:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 762:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** 
 763:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 764:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     // Return the SSI clock source.
 765:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     //
 766:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c ****     return(HWREG(ui32Base + SSI_O_CC));
 961              		.loc 1 766 0
 962 0332 7B68     		ldr	r3, [r7, #4]
 963 0334 03F6C873 		addw	r3, r3, #4040
 964 0338 1B68     		ldr	r3, [r3]
 767:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/ssi.c **** }
 965              		.loc 1 767 0
 966 033a 1846     		mov	r0, r3
 967 033c 0C37     		adds	r7, r7, #12
 968              		.cfi_def_cfa_offset 4
 969 033e BD46     		mov	sp, r7
 970              		.cfi_def_cfa_register 13
 971              		@ sp needed
 972 0340 80BC     		pop	{r7}
 973              		.cfi_restore 7
 974              		.cfi_def_cfa_offset 0
 975 0342 7047     		bx	lr
 976              		.cfi_endproc
 977              	.LFE17:
 979              	.Letext0:
 980              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 981              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
DEFINED SYMBOLS
                            *ABS*:00000000 ssi.c
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:15     .text:00000000 $t
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:22     .text:00000000 SSIConfigSetExpClk
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:149    .text:0000009c SSIEnable
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:193    .text:000000be SSIDisable
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:237    .text:000000e0 SSIIntRegister
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:285    .text:00000110 $d
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:289    .text:00000114 $t
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:296    .text:00000114 SSIIntUnregister
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:342    .text:00000140 $d
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:346    .text:00000144 $t
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:353    .text:00000144 SSIIntEnable
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:400    .text:0000016a SSIIntDisable
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:447    .text:00000190 SSIIntStatus
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:500    .text:000001ba SSIIntClear
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:543    .text:000001d8 SSIDataPut
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:596    .text:00000206 SSIDataPutNonBlocking
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:653    .text:00000238 SSIDataGet
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:706    .text:00000266 SSIDataGetNonBlocking
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:763    .text:00000298 SSIDMAEnable
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:810    .text:000002be SSIDMADisable
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:857    .text:000002e4 SSIBusy
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:903    .text:0000030a SSIClockSourceSet
C:\Users\Lee\AppData\Local\Temp\cc3wT9iS.s:946    .text:0000032a SSIClockSourceGet
                           .group:00000000 wm4.0.93d65e4ff05d5af51629690e5b534e57
                           .group:00000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:00000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:00000000 wm4.hw_ssi.h.39.9082f14e87d6077894a6e46eebe76d2f
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:00000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:00000000 wm4.ssi.h.41.9d9fef101e9b51d683ad9b5927a1b748

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
