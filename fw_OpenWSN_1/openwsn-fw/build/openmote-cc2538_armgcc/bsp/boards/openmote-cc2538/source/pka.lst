   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"pka.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.global	PKAEnableInt
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	PKAEnableInt:
  23              	.LFB0:
  24              		.file 1 "build\\openmote-cc2538_armgcc\\bsp\\boards\\openmote-cc2538\\source\\pka.c"
   1:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** /******************************************************************************
   2:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  Filename:       pka.c
   3:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  Revised:        $Date: 2012-10-01 11:15:04 -0700 (Mon, 01 Oct 2012) $
   4:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  Revision:       $Revision: 31660 $
   5:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *
   6:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  Description:    Driver for the PKA HW module.
   7:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *
   8:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  Copyright (C) 2013 Texas Instruments Incorporated - http://www.ti.com/
   9:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *
  10:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *
  11:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  Redistribution and use in source and binary forms, with or without
  12:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  modification, are permitted provided that the following conditions
  13:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  are met:
  14:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *
  15:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *    Redistributions of source code must retain the above copyright
  16:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *    notice, this list of conditions and the following disclaimer.
  17:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *
  18:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *    documentation and/or other materials provided with the distribution.
  21:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *
  22:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *    its contributors may be used to endorse or promote products derived
  24:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *    from this software without specific prior written permission.
  25:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *
  26:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** *
  38:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** ******************************************************************************/
  39:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
  40:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
  41:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
  42:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \addtogroup pka_driver
  43:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! @{
  44:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
  45:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
  46:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
  47:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** #include <headers/hw_ints.h>
  48:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** #include <headers/hw_memmap.h>
  49:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** #include <headers/hw_pka.h>
  50:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** #include <headers/hw_types.h>
  51:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** #include "interrupt.h"
  52:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** #include "pka.h"
  53:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** #include "sys_ctrl.h"
  54:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** #include "debug.h"
  55:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
  56:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
  57:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
  58:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** // Macro definition for NULL
  59:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
  60:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
  61:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
  62:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** #ifndef NULL
  63:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** #define NULL                    ((void*)0)
  64:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** #endif
  65:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
  66:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
  67:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
  68:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** // Define for the maximum curve size supported by the PKA module in 32 bit
  69:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** // word.
  70:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** // \note PKA hardware module can support upto 384 bit curve size due to the
  71:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //       2K of PKA RAM.
  72:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
  73:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
  74:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** #define PKA_MAX_CURVE_SIZE_32_BIT_WORD \
  75:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                                 12
  76:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
  77:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
  78:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
  79:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** // Define for the maximum length of the big number supported by the PKA module
  80:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** // in 32 bit word.
  81:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
  82:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
  83:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** #define PKA_MAX_LEN_IN_32_BIT_WORD \
  84:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                                 PKA_MAX_CURVE_SIZE_32_BIT_WORD
  85:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
  86:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
  87:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
  88:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** // Define for the PKA RAM size.
  89:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
  90:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //****************************************************************************
  91:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** #define PKA_RAM_SIZE            2000
  92:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
  93:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
  94:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
  95:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
  96:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Enables the PKA interrupt.
  97:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
  98:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function enables the PKA interrupt.
  99:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 100:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \return None.
 101:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 102:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 103:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** void
 104:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKAEnableInt(void)
 105:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
  25              		.loc 1 105 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29 0000 80B5     		push	{r7, lr}
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 00AF     		add	r7, sp, #0
  34              		.cfi_def_cfa_register 7
 106:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 107:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Enable the PKA interrupt.
 108:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 109:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     IntEnable(INT_PKA);
  35              		.loc 1 109 0
  36 0004 A020     		movs	r0, #160
  37 0006 FFF7FEFF 		bl	IntEnable
 110:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
  38              		.loc 1 110 0
  39 000a 00BF     		nop
  40 000c 80BD     		pop	{r7, pc}
  41              		.cfi_endproc
  42              	.LFE0:
  44              		.align	1
  45              		.global	PKADisableInt
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu softvfp
  51              	PKADisableInt:
  52              	.LFB1:
 111:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 112:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 113:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 114:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Disables the PKA interrupt.
 115:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 116:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function disables the PKA interrupt.
 117:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 118:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \return None.
 119:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 120:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 121:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** void
 122:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKADisableInt( void )
 123:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
  53              		.loc 1 123 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 1, uses_anonymous_args = 0
  57 000e 80B5     		push	{r7, lr}
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 7, -8
  60              		.cfi_offset 14, -4
  61 0010 00AF     		add	r7, sp, #0
  62              		.cfi_def_cfa_register 7
 124:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 125:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Disables the PKA interrupt.
 126:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 127:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     IntDisable(INT_PKA);
  63              		.loc 1 127 0
  64 0012 A020     		movs	r0, #160
  65 0014 FFF7FEFF 		bl	IntDisable
 128:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
  66              		.loc 1 128 0
  67 0018 00BF     		nop
  68 001a 80BD     		pop	{r7, pc}
  69              		.cfi_endproc
  70              	.LFE1:
  72              		.align	1
  73              		.global	PKAClearInt
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu softvfp
  79              	PKAClearInt:
  80              	.LFB2:
 129:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 130:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 131:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 132:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Clears the PKA interrupt.
 133:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 134:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function unpends PKA interrupt.  This will cause any previously
 135:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! generated PKA interrupts that have not been handled yet to be discarded.
 136:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 137:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \return None.
 138:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 139:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 140:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** void
 141:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKAClearInt(void)
 142:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
  81              		.loc 1 142 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 1, uses_anonymous_args = 0
  85 001c 80B5     		push	{r7, lr}
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 001e 00AF     		add	r7, sp, #0
  90              		.cfi_def_cfa_register 7
 143:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 144:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // UnPends the PKA interrupt.
 145:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 146:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     IntPendClear(INT_PKA);
  91              		.loc 1 146 0
  92 0020 A020     		movs	r0, #160
  93 0022 FFF7FEFF 		bl	IntPendClear
 147:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
  94              		.loc 1 147 0
  95 0026 00BF     		nop
  96 0028 80BD     		pop	{r7, pc}
  97              		.cfi_endproc
  98              	.LFE2:
 100              		.align	1
 101              		.global	PKARegInt
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu softvfp
 107              	PKARegInt:
 108              	.LFB3:
 148:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 149:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 150:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 151:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Registers an interrupt handler for PKA interrupt.
 152:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 153:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pfnHandler is a pointer to the function to be called when the
 154:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! PKA interrupt occurs.
 155:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 156:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function does the actual registering of the interrupt handler.  This
 157:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! will not enable the PKA interrupt in the interrupt controller, a call to
 158:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! the function \sa PKAEnableInt() is needed to enable the PKA interrupt.
 159:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 160:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \sa IntRegister() for important information about registering interrupt
 161:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! handlers.
 162:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 163:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \return None.
 164:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 165:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 166:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** void
 167:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKARegInt(void (*pfnHandler)(void))
 168:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 109              		.loc 1 168 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 8
 112              		@ frame_needed = 1, uses_anonymous_args = 0
 113 002a 80B5     		push	{r7, lr}
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 7, -8
 116              		.cfi_offset 14, -4
 117 002c 82B0     		sub	sp, sp, #8
 118              		.cfi_def_cfa_offset 16
 119 002e 00AF     		add	r7, sp, #0
 120              		.cfi_def_cfa_register 7
 121 0030 7860     		str	r0, [r7, #4]
 169:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 170:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Register the interrupt handler.
 171:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 172:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     IntRegister(INT_PKA, pfnHandler);
 122              		.loc 1 172 0
 123 0032 7968     		ldr	r1, [r7, #4]
 124 0034 A020     		movs	r0, #160
 125 0036 FFF7FEFF 		bl	IntRegister
 173:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 126              		.loc 1 173 0
 127 003a 00BF     		nop
 128 003c 0837     		adds	r7, r7, #8
 129              		.cfi_def_cfa_offset 8
 130 003e BD46     		mov	sp, r7
 131              		.cfi_def_cfa_register 13
 132              		@ sp needed
 133 0040 80BD     		pop	{r7, pc}
 134              		.cfi_endproc
 135              	.LFE3:
 137              		.align	1
 138              		.global	PKAUnRegInt
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu softvfp
 144              	PKAUnRegInt:
 145              	.LFB4:
 174:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 175:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 176:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 177:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Unregisters an interrupt handler for the PKA interrupt.
 178:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 179:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function deregisters the interrupt service routine.  This function
 180:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! will not disable the interrupt and an explicit call to \sa PKADisableInt()
 181:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! is needed.
 182:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 183:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \return None.
 184:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 185:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 186:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** void
 187:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKAUnRegInt(void)
 188:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 146              		.loc 1 188 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 1, uses_anonymous_args = 0
 150 0042 80B5     		push	{r7, lr}
 151              		.cfi_def_cfa_offset 8
 152              		.cfi_offset 7, -8
 153              		.cfi_offset 14, -4
 154 0044 00AF     		add	r7, sp, #0
 155              		.cfi_def_cfa_register 7
 189:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 190:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Unregister the interrupt handler.
 191:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 192:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     IntUnregister(INT_PKA);
 156              		.loc 1 192 0
 157 0046 A020     		movs	r0, #160
 158 0048 FFF7FEFF 		bl	IntUnregister
 193:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 159              		.loc 1 193 0
 160 004c 00BF     		nop
 161 004e 80BD     		pop	{r7, pc}
 162              		.cfi_endproc
 163              	.LFE4:
 165              		.align	1
 166              		.global	PKAGetOpsStatus
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 170              		.fpu softvfp
 172              	PKAGetOpsStatus:
 173              	.LFB5:
 194:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 195:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 196:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 197:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Provides the PKA operation status.
 198:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 199:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function provides information on whether any PKA operation is in
 200:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! progress or not. This function allows to check the PKA operation status
 201:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! before starting any new PKA operation.
 202:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 203:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \return Returns: 
 204:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_INPRG if the PKA operation is in progress.
 205:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_NOT_INPRG if the PKA operation is not in progress.
 206:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 207:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 208:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
 209:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKAGetOpsStatus(void)
 210:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 174              		.loc 1 210 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 1, uses_anonymous_args = 0
 178              		@ link register save eliminated.
 179 0050 80B4     		push	{r7}
 180              		.cfi_def_cfa_offset 4
 181              		.cfi_offset 7, -4
 182 0052 00AF     		add	r7, sp, #0
 183              		.cfi_def_cfa_register 7
 211:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 184              		.loc 1 211 0
 185 0054 064B     		ldr	r3, .L9
 186 0056 1B68     		ldr	r3, [r3]
 187 0058 03F40043 		and	r3, r3, #32768
 188 005c 002B     		cmp	r3, #0
 189 005e 01D0     		beq	.L7
 212:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 213:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 190              		.loc 1 213 0
 191 0060 0723     		movs	r3, #7
 192 0062 00E0     		b	.L8
 193              	.L7:
 214:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 215:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     else
 216:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 217:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_NOT_INPRG);
 194              		.loc 1 217 0
 195 0064 0823     		movs	r3, #8
 196              	.L8:
 218:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 219:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 197              		.loc 1 219 0
 198 0066 1846     		mov	r0, r3
 199 0068 BD46     		mov	sp, r7
 200              		.cfi_def_cfa_register 13
 201              		@ sp needed
 202 006a 80BC     		pop	{r7}
 203              		.cfi_restore 7
 204              		.cfi_def_cfa_offset 0
 205 006c 7047     		bx	lr
 206              	.L10:
 207 006e 00BF     		.align	2
 208              	.L9:
 209 0070 1C400044 		.word	1140867100
 210              		.cfi_endproc
 211              	.LFE5:
 213              		.align	1
 214              		.global	PKABigNumModStart
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu softvfp
 220              	PKABigNumModStart:
 221              	.LFB6:
 220:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 221:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 222:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 223:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Starts the big number modulus operation.
 224:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 225:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32BNum is the pointer to the big number on which modulo operation
 226:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! needs to be carried out.
 227:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui8BNSize is the size of the big number \sa pui32BNum in 32-bit
 228:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! word.
 229:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32Modulus is the pointer to the divisor.
 230:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui8ModSize is the size of the divisor \sa pui32Modulus.
 231:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 232:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! which will be set by this function.
 233:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 234:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function starts the modulo operation on the big num \sa pui32BNum
 235:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! using the divisor \sa pui32Modulus.  The PKA RAM location where the result
 236:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! will be available is stored in \sa pui32ResultVector.
 237:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 238:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!\return Returns: 
 239:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 240:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 241:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! some other operation.
 242:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 243:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 244:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
 245:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKABigNumModStart(uint32_t* pui32BNum, uint8_t ui8BNSize,
 246:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                   uint32_t* pui32Modulus, uint8_t ui8ModSize,
 247:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                   uint32_t* pui32ResultVector)
 248:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 222              		.loc 1 248 0
 223              		.cfi_startproc
 224              		@ args = 4, pretend = 0, frame = 32
 225              		@ frame_needed = 1, uses_anonymous_args = 0
 226              		@ link register save eliminated.
 227 0074 80B4     		push	{r7}
 228              		.cfi_def_cfa_offset 4
 229              		.cfi_offset 7, -4
 230 0076 89B0     		sub	sp, sp, #36
 231              		.cfi_def_cfa_offset 40
 232 0078 00AF     		add	r7, sp, #0
 233              		.cfi_def_cfa_register 7
 234 007a F860     		str	r0, [r7, #12]
 235 007c 7A60     		str	r2, [r7, #4]
 236 007e 1A46     		mov	r2, r3
 237 0080 0B46     		mov	r3, r1
 238 0082 FB72     		strb	r3, [r7, #11]
 239 0084 1346     		mov	r3, r2
 240 0086 BB72     		strb	r3, [r7, #10]
 249:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint8_t extraBuf;
 250:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t offset;
 251:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
 252:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 253:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 254:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check the arguments.
 255:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 256:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32BNum);
 257:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32Modulus);
 258:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 259:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 260:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 261:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // make sure no operation is in progress.
 262:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 263:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 241              		.loc 1 263 0
 242 0088 3C4B     		ldr	r3, .L18
 243 008a 1B68     		ldr	r3, [r3]
 244 008c 03F40043 		and	r3, r3, #32768
 245 0090 002B     		cmp	r3, #0
 246 0092 01D0     		beq	.L12
 264:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 265:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 247              		.loc 1 265 0
 248 0094 0723     		movs	r3, #7
 249 0096 6BE0     		b	.L13
 250              	.L12:
 266:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 267:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 268:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 269:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // calculate the extra buffer requirement.
 270:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 271:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     extraBuf = 2 + ui8ModSize % 2;
 251              		.loc 1 271 0
 252 0098 BB7A     		ldrb	r3, [r7, #10]
 253 009a 03F00103 		and	r3, r3, #1
 254 009e DBB2     		uxtb	r3, r3
 255 00a0 0233     		adds	r3, r3, #2
 256 00a2 FB76     		strb	r3, [r7, #27]
 272:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 273:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset = 0;
 257              		.loc 1 273 0
 258 00a4 0023     		movs	r3, #0
 259 00a6 7B61     		str	r3, [r7, #20]
 274:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 275:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 276:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 277:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the number will be stored.
 278:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 279:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_APTR) ) = offset >>2;
 260              		.loc 1 279 0
 261 00a8 354A     		ldr	r2, .L18+4
 262 00aa 7B69     		ldr	r3, [r7, #20]
 263 00ac 9B08     		lsrs	r3, r3, #2
 264 00ae 1360     		str	r3, [r2]
 280:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 281:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 282:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the number in PKA RAM
 283:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 284:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ui8BNSize; i++)
 265              		.loc 1 284 0
 266 00b0 0023     		movs	r3, #0
 267 00b2 FB61     		str	r3, [r7, #28]
 268 00b4 12E0     		b	.L14
 269              	.L15:
 285:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 286:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32BNum[i];
 270              		.loc 1 286 0 discriminator 3
 271 00b6 FB69     		ldr	r3, [r7, #28]
 272 00b8 9B00     		lsls	r3, r3, #2
 273 00ba FA68     		ldr	r2, [r7, #12]
 274 00bc 1A44     		add	r2, r2, r3
 275 00be FB69     		ldr	r3, [r7, #28]
 276 00c0 9B00     		lsls	r3, r3, #2
 277 00c2 1946     		mov	r1, r3
 278 00c4 7B69     		ldr	r3, [r7, #20]
 279 00c6 0B44     		add	r3, r3, r1
 280 00c8 03F18843 		add	r3, r3, #1140850688
 281 00cc 03F5C043 		add	r3, r3, #24576
 282 00d0 1946     		mov	r1, r3
 283 00d2 1368     		ldr	r3, [r2]
 284 00d4 0B60     		str	r3, [r1]
 284:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 285              		.loc 1 284 0 discriminator 3
 286 00d6 FB69     		ldr	r3, [r7, #28]
 287 00d8 0133     		adds	r3, r3, #1
 288 00da FB61     		str	r3, [r7, #28]
 289              	.L14:
 284:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 290              		.loc 1 284 0 is_stmt 0 discriminator 1
 291 00dc FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 292 00de FA69     		ldr	r2, [r7, #28]
 293 00e0 9A42     		cmp	r2, r3
 294 00e2 E8DB     		blt	.L15
 287:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 288:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 289:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 290:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // determine the offset for the next data input.
 291:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 292:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + ui8BNSize % 2);
 295              		.loc 1 292 0 is_stmt 1
 296 00e4 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 297 00e6 03F00102 		and	r2, r3, #1
 298 00ea FB69     		ldr	r3, [r7, #28]
 299 00ec 1344     		add	r3, r3, r2
 300 00ee 9B00     		lsls	r3, r3, #2
 301 00f0 1A46     		mov	r2, r3
 302 00f2 7B69     		ldr	r3, [r7, #20]
 303 00f4 1344     		add	r3, r3, r2
 304 00f6 7B61     		str	r3, [r7, #20]
 293:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 294:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 295:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 296:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the divisor will be stored.
 297:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 298:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 305              		.loc 1 298 0
 306 00f8 224A     		ldr	r2, .L18+8
 307 00fa 7B69     		ldr	r3, [r7, #20]
 308 00fc 9B08     		lsrs	r3, r3, #2
 309 00fe 1360     		str	r3, [r2]
 299:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 300:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 301:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the divisor in PKA RAM.
 302:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 303:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ui8ModSize;  i++)
 310              		.loc 1 303 0
 311 0100 0023     		movs	r3, #0
 312 0102 FB61     		str	r3, [r7, #28]
 313 0104 12E0     		b	.L16
 314              	.L17:
 304:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 305:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32Modulus[i];
 315              		.loc 1 305 0 discriminator 3
 316 0106 FB69     		ldr	r3, [r7, #28]
 317 0108 9B00     		lsls	r3, r3, #2
 318 010a 7A68     		ldr	r2, [r7, #4]
 319 010c 1A44     		add	r2, r2, r3
 320 010e FB69     		ldr	r3, [r7, #28]
 321 0110 9B00     		lsls	r3, r3, #2
 322 0112 1946     		mov	r1, r3
 323 0114 7B69     		ldr	r3, [r7, #20]
 324 0116 0B44     		add	r3, r3, r1
 325 0118 03F18843 		add	r3, r3, #1140850688
 326 011c 03F5C043 		add	r3, r3, #24576
 327 0120 1946     		mov	r1, r3
 328 0122 1368     		ldr	r3, [r2]
 329 0124 0B60     		str	r3, [r1]
 303:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 330              		.loc 1 303 0 discriminator 3
 331 0126 FB69     		ldr	r3, [r7, #28]
 332 0128 0133     		adds	r3, r3, #1
 333 012a FB61     		str	r3, [r7, #28]
 334              	.L16:
 303:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 335              		.loc 1 303 0 is_stmt 0 discriminator 1
 336 012c BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 337 012e FA69     		ldr	r2, [r7, #28]
 338 0130 9A42     		cmp	r2, r3
 339 0132 E8DB     		blt	.L17
 306:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 307:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 308:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 309:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // determine the offset for the next data.
 310:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 311:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 340              		.loc 1 311 0 is_stmt 1
 341 0134 FA7E     		ldrb	r2, [r7, #27]	@ zero_extendqisi2
 342 0136 FB69     		ldr	r3, [r7, #28]
 343 0138 1344     		add	r3, r3, r2
 344 013a 9B00     		lsls	r3, r3, #2
 345 013c 1A46     		mov	r2, r3
 346 013e 7B69     		ldr	r3, [r7, #20]
 347 0140 1344     		add	r3, r3, r2
 348 0142 7B61     		str	r3, [r7, #20]
 312:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 313:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 314:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Copy the result vector address location.
 315:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 316:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 349              		.loc 1 316 0
 350 0144 7B69     		ldr	r3, [r7, #20]
 351 0146 03F18843 		add	r3, r3, #1140850688
 352 014a 03F5C043 		add	r3, r3, #24576
 353 014e BA6A     		ldr	r2, [r7, #40]
 354 0150 1360     		str	r3, [r2]
 317:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 318:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 319:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load C ptr with the result location in PKA RAM
 320:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 321:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_CPTR) ) = offset >> 2;
 355              		.loc 1 321 0
 356 0152 0D4A     		ldr	r2, .L18+12
 357 0154 7B69     		ldr	r3, [r7, #20]
 358 0156 9B08     		lsrs	r3, r3, #2
 359 0158 1360     		str	r3, [r2]
 322:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 323:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 324:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load A length registers with Big number length in 32 bit words.
 325:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 326:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8BNSize;
 360              		.loc 1 326 0
 361 015a 0C4A     		ldr	r2, .L18+16
 362 015c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 363 015e 1360     		str	r3, [r2]
 327:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 328:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 329:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load B length registers  Divisor length in 32-bit words.
 330:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 331:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8ModSize;
 364              		.loc 1 331 0
 365 0160 0B4A     		ldr	r2, .L18+20
 366 0162 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 367 0164 1360     		str	r3, [r2]
 332:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 333:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 334:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Start the PKCP modulo operation by setting the PKA Function register.
 335:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 336:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_MODULO);
 368              		.loc 1 336 0
 369 0166 054B     		ldr	r3, .L18
 370 0168 4FF40242 		mov	r2, #33280
 371 016c 1A60     		str	r2, [r3]
 337:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 338:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     return (PKA_STATUS_SUCCESS);
 372              		.loc 1 338 0
 373 016e 0023     		movs	r3, #0
 374              	.L13:
 339:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 375              		.loc 1 339 0
 376 0170 1846     		mov	r0, r3
 377 0172 2437     		adds	r7, r7, #36
 378              		.cfi_def_cfa_offset 4
 379 0174 BD46     		mov	sp, r7
 380              		.cfi_def_cfa_register 13
 381              		@ sp needed
 382 0176 80BC     		pop	{r7}
 383              		.cfi_restore 7
 384              		.cfi_def_cfa_offset 0
 385 0178 7047     		bx	lr
 386              	.L19:
 387 017a 00BF     		.align	2
 388              	.L18:
 389 017c 1C400044 		.word	1140867100
 390 0180 00400044 		.word	1140867072
 391 0184 04400044 		.word	1140867076
 392 0188 08400044 		.word	1140867080
 393 018c 10400044 		.word	1140867088
 394 0190 14400044 		.word	1140867092
 395              		.cfi_endproc
 396              	.LFE6:
 398              		.align	1
 399              		.global	PKABigNumModGetResult
 400              		.syntax unified
 401              		.thumb
 402              		.thumb_func
 403              		.fpu softvfp
 405              	PKABigNumModGetResult:
 406              	.LFB7:
 340:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 341:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 342:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 343:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Gets the result of the big number modulus operation.
 344:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 345:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result needs to
 346:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! be stored.
 347:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui8Size is the size of the provided buffer in 32 bit size word.
 348:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
 349:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! was provided by the start function \sa PKABigNumModStart().
 350:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 351:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function gets the result of the big number modulus operation which was
 352:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! previously started using the function \sa PKABigNumModStart().
 353:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 354:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \return Returns:
 355:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful.
 356:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 357:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! the operation.
 358:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
 359:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW, if the \e ui8Size is less than the length
 360:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! of the result.
 361:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 362:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 363:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
 364:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKABigNumModGetResult(uint32_t* pui32ResultBuf,uint8_t ui8Size,
 365:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                       uint32_t ui32ResVectorLoc)
 366:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 407              		.loc 1 366 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 32
 410              		@ frame_needed = 1, uses_anonymous_args = 0
 411              		@ link register save eliminated.
 412 0194 80B4     		push	{r7}
 413              		.cfi_def_cfa_offset 4
 414              		.cfi_offset 7, -4
 415 0196 89B0     		sub	sp, sp, #36
 416              		.cfi_def_cfa_offset 40
 417 0198 00AF     		add	r7, sp, #0
 418              		.cfi_def_cfa_register 7
 419 019a F860     		str	r0, [r7, #12]
 420 019c 0B46     		mov	r3, r1
 421 019e 7A60     		str	r2, [r7, #4]
 422 01a0 FB72     		strb	r3, [r7, #11]
 367:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t regMSWVal;
 368:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t len;
 369:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
 370:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 371:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 372:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check the arguments.
 373:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 374:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
 375:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
 376:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
 377:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 378:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 379:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // verify that the operation is complete.
 380:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 381:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 423              		.loc 1 381 0
 424 01a2 204B     		ldr	r3, .L27
 425 01a4 1B68     		ldr	r3, [r3]
 426 01a6 03F40043 		and	r3, r3, #32768
 427 01aa 002B     		cmp	r3, #0
 428 01ac 01D0     		beq	.L21
 382:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 383:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 429              		.loc 1 383 0
 430 01ae 0723     		movs	r3, #7
 431 01b0 32E0     		b	.L22
 432              	.L21:
 384:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 385:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 386:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 387:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //  Get the MSW register value.
 388:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 389:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     regMSWVal = HWREG(PKA_DIVMSW);
 433              		.loc 1 389 0
 434 01b2 1D4B     		ldr	r3, .L27+4
 435 01b4 1B68     		ldr	r3, [r3]
 436 01b6 BB61     		str	r3, [r7, #24]
 390:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 391:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 392:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
 393:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 394:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if(regMSWVal & PKA_DIVMSW_RESULT_IS_ZERO)
 437              		.loc 1 394 0
 438 01b8 BB69     		ldr	r3, [r7, #24]
 439 01ba 03F40043 		and	r3, r3, #32768
 440 01be 002B     		cmp	r3, #0
 441 01c0 01D0     		beq	.L23
 395:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 396:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_RESULT_0);
 442              		.loc 1 396 0
 443 01c2 0423     		movs	r3, #4
 444 01c4 28E0     		b	.L22
 445              	.L23:
 397:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 398:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 399:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 400:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Get the length of the result.
 401:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 402:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     len = ((regMSWVal & PKA_DIVMSW_MSW_ADDRESS_M) + 1) -
 446              		.loc 1 402 0
 447 01c6 BB69     		ldr	r3, [r7, #24]
 448 01c8 C3F30A02 		ubfx	r2, r3, #0, #11
 403:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 449              		.loc 1 403 0
 450 01cc 7B68     		ldr	r3, [r7, #4]
 451 01ce 03F13C43 		add	r3, r3, #-1140850688
 452 01d2 A3F5C043 		sub	r3, r3, #24576
 453 01d6 9B08     		lsrs	r3, r3, #2
 402:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 454              		.loc 1 402 0
 455 01d8 D31A     		subs	r3, r2, r3
 456 01da 0133     		adds	r3, r3, #1
 457 01dc 7B61     		str	r3, [r7, #20]
 404:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 405:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 406:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // If the size of the buffer provided is less than the result length than
 407:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // return error.
 408:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 409:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if(ui8Size < len)
 458              		.loc 1 409 0
 459 01de FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 460 01e0 7A69     		ldr	r2, [r7, #20]
 461 01e2 9A42     		cmp	r2, r3
 462 01e4 01D9     		bls	.L24
 410:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 411:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 463              		.loc 1 411 0
 464 01e6 0323     		movs	r3, #3
 465 01e8 16E0     		b	.L22
 466              	.L24:
 412:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 413:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 414:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 415:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // copy the result from vector C into the pResult.
 416:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 417:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < len; i++)
 467              		.loc 1 417 0
 468 01ea 0023     		movs	r3, #0
 469 01ec FB61     		str	r3, [r7, #28]
 470 01ee 0EE0     		b	.L25
 471              	.L26:
 418:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 419:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         pui32ResultBuf[i]= HWREG( (ui32ResVectorLoc + 4*i) );
 472              		.loc 1 419 0 discriminator 3
 473 01f0 FB69     		ldr	r3, [r7, #28]
 474 01f2 9B00     		lsls	r3, r3, #2
 475 01f4 1A46     		mov	r2, r3
 476 01f6 7B68     		ldr	r3, [r7, #4]
 477 01f8 1344     		add	r3, r3, r2
 478 01fa 1946     		mov	r1, r3
 479 01fc FB69     		ldr	r3, [r7, #28]
 480 01fe 9B00     		lsls	r3, r3, #2
 481 0200 FA68     		ldr	r2, [r7, #12]
 482 0202 1344     		add	r3, r3, r2
 483 0204 0A68     		ldr	r2, [r1]
 484 0206 1A60     		str	r2, [r3]
 417:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 485              		.loc 1 417 0 discriminator 3
 486 0208 FB69     		ldr	r3, [r7, #28]
 487 020a 0133     		adds	r3, r3, #1
 488 020c FB61     		str	r3, [r7, #28]
 489              	.L25:
 417:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 490              		.loc 1 417 0 is_stmt 0 discriminator 1
 491 020e FB69     		ldr	r3, [r7, #28]
 492 0210 7A69     		ldr	r2, [r7, #20]
 493 0212 9A42     		cmp	r2, r3
 494 0214 ECD8     		bhi	.L26
 420:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 421:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 422:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     return (PKA_STATUS_SUCCESS);
 495              		.loc 1 422 0 is_stmt 1
 496 0216 0023     		movs	r3, #0
 497              	.L22:
 423:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** } // PKABigNumModGetResult()
 498              		.loc 1 423 0
 499 0218 1846     		mov	r0, r3
 500 021a 2437     		adds	r7, r7, #36
 501              		.cfi_def_cfa_offset 4
 502 021c BD46     		mov	sp, r7
 503              		.cfi_def_cfa_register 13
 504              		@ sp needed
 505 021e 80BC     		pop	{r7}
 506              		.cfi_restore 7
 507              		.cfi_def_cfa_offset 0
 508 0220 7047     		bx	lr
 509              	.L28:
 510 0222 00BF     		.align	2
 511              	.L27:
 512 0224 1C400044 		.word	1140867100
 513 0228 28400044 		.word	1140867112
 514              		.cfi_endproc
 515              	.LFE7:
 517              		.align	1
 518              		.global	PKABigNumCmpStart
 519              		.syntax unified
 520              		.thumb
 521              		.thumb_func
 522              		.fpu softvfp
 524              	PKABigNumCmpStart:
 525              	.LFB8:
 424:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 425:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 426:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 427:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Starts the comparison of two big numbers.
 428:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 429:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32BNum1 is the pointer to the first big number.
 430:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32BNum2 is the pointer to the second big number.
 431:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui8Size is the size of the big number in 32 bit size word.
 432:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 433:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function starts the comparison of two big numbers pointed by
 434:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \e pui32BNum1 and \e pui32BNum2.
 435:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Note this function expects the size of the two big numbers equal.
 436:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 437:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!\return Returns: 
 438:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 439:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 440:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! some other operation.
 441:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 442:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 443:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
 444:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKABigNumCmpStart(uint32_t* pui32BNum1, uint32_t* pui32BNum2, uint8_t ui8Size)
 445:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 526              		.loc 1 445 0
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 24
 529              		@ frame_needed = 1, uses_anonymous_args = 0
 530              		@ link register save eliminated.
 531 022c 80B4     		push	{r7}
 532              		.cfi_def_cfa_offset 4
 533              		.cfi_offset 7, -4
 534 022e 87B0     		sub	sp, sp, #28
 535              		.cfi_def_cfa_offset 32
 536 0230 00AF     		add	r7, sp, #0
 537              		.cfi_def_cfa_register 7
 538 0232 F860     		str	r0, [r7, #12]
 539 0234 B960     		str	r1, [r7, #8]
 540 0236 1346     		mov	r3, r2
 541 0238 FB71     		strb	r3, [r7, #7]
 446:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t offset;
 447:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
 448:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 449:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 450:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check the arguments.
 451:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 452:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32BNum1);
 453:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32BNum2);
 454:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 455:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset = 0;
 542              		.loc 1 455 0
 543 023a 0023     		movs	r3, #0
 544 023c 3B61     		str	r3, [r7, #16]
 456:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 457:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 458:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Make sure no operation is in progress.
 459:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 460:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 545              		.loc 1 460 0
 546 023e 2D4B     		ldr	r3, .L36
 547 0240 1B68     		ldr	r3, [r3]
 548 0242 03F40043 		and	r3, r3, #32768
 549 0246 002B     		cmp	r3, #0
 550 0248 01D0     		beq	.L30
 461:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 462:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 551              		.loc 1 462 0
 552 024a 0723     		movs	r3, #7
 553 024c 4DE0     		b	.L31
 554              	.L30:
 463:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 464:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 465:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 466:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 467:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the first big number will be stored.
 468:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 469:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_APTR) ) = offset >> 2;
 555              		.loc 1 469 0
 556 024e 2A4A     		ldr	r2, .L36+4
 557 0250 3B69     		ldr	r3, [r7, #16]
 558 0252 9B08     		lsrs	r3, r3, #2
 559 0254 1360     		str	r3, [r2]
 470:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 471:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 472:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the first big number in PKA RAM.
 473:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 474:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ui8Size; i++)
 560              		.loc 1 474 0
 561 0256 0023     		movs	r3, #0
 562 0258 7B61     		str	r3, [r7, #20]
 563 025a 12E0     		b	.L32
 564              	.L33:
 475:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 476:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32BNum1[i];
 565              		.loc 1 476 0 discriminator 3
 566 025c 7B69     		ldr	r3, [r7, #20]
 567 025e 9B00     		lsls	r3, r3, #2
 568 0260 FA68     		ldr	r2, [r7, #12]
 569 0262 1A44     		add	r2, r2, r3
 570 0264 7B69     		ldr	r3, [r7, #20]
 571 0266 9B00     		lsls	r3, r3, #2
 572 0268 1946     		mov	r1, r3
 573 026a 3B69     		ldr	r3, [r7, #16]
 574 026c 0B44     		add	r3, r3, r1
 575 026e 03F18843 		add	r3, r3, #1140850688
 576 0272 03F5C043 		add	r3, r3, #24576
 577 0276 1946     		mov	r1, r3
 578 0278 1368     		ldr	r3, [r2]
 579 027a 0B60     		str	r3, [r1]
 474:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 580              		.loc 1 474 0 discriminator 3
 581 027c 7B69     		ldr	r3, [r7, #20]
 582 027e 0133     		adds	r3, r3, #1
 583 0280 7B61     		str	r3, [r7, #20]
 584              	.L32:
 474:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 585              		.loc 1 474 0 is_stmt 0 discriminator 1
 586 0282 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 587 0284 7A69     		ldr	r2, [r7, #20]
 588 0286 9A42     		cmp	r2, r3
 589 0288 E8DB     		blt	.L33
 477:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 478:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 479:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 480:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next pointer.
 481:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 482:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + ui8Size % 2);
 590              		.loc 1 482 0 is_stmt 1
 591 028a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 592 028c 03F00102 		and	r2, r3, #1
 593 0290 7B69     		ldr	r3, [r7, #20]
 594 0292 1344     		add	r3, r3, r2
 595 0294 9B00     		lsls	r3, r3, #2
 596 0296 1A46     		mov	r2, r3
 597 0298 3B69     		ldr	r3, [r7, #16]
 598 029a 1344     		add	r3, r3, r2
 599 029c 3B61     		str	r3, [r7, #16]
 483:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 484:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 485:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 486:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the second big number will be stored.
 487:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 488:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 600              		.loc 1 488 0
 601 029e 174A     		ldr	r2, .L36+8
 602 02a0 3B69     		ldr	r3, [r7, #16]
 603 02a2 9B08     		lsrs	r3, r3, #2
 604 02a4 1360     		str	r3, [r2]
 489:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 490:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 491:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the second big number in PKA RAM.
 492:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 493:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ui8Size;  i++)
 605              		.loc 1 493 0
 606 02a6 0023     		movs	r3, #0
 607 02a8 7B61     		str	r3, [r7, #20]
 608 02aa 12E0     		b	.L34
 609              	.L35:
 494:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 495:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32BNum2[i];
 610              		.loc 1 495 0 discriminator 3
 611 02ac 7B69     		ldr	r3, [r7, #20]
 612 02ae 9B00     		lsls	r3, r3, #2
 613 02b0 BA68     		ldr	r2, [r7, #8]
 614 02b2 1A44     		add	r2, r2, r3
 615 02b4 7B69     		ldr	r3, [r7, #20]
 616 02b6 9B00     		lsls	r3, r3, #2
 617 02b8 1946     		mov	r1, r3
 618 02ba 3B69     		ldr	r3, [r7, #16]
 619 02bc 0B44     		add	r3, r3, r1
 620 02be 03F18843 		add	r3, r3, #1140850688
 621 02c2 03F5C043 		add	r3, r3, #24576
 622 02c6 1946     		mov	r1, r3
 623 02c8 1368     		ldr	r3, [r2]
 624 02ca 0B60     		str	r3, [r1]
 493:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 625              		.loc 1 493 0 discriminator 3
 626 02cc 7B69     		ldr	r3, [r7, #20]
 627 02ce 0133     		adds	r3, r3, #1
 628 02d0 7B61     		str	r3, [r7, #20]
 629              	.L34:
 493:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 630              		.loc 1 493 0 is_stmt 0 discriminator 1
 631 02d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 632 02d4 7A69     		ldr	r2, [r7, #20]
 633 02d6 9A42     		cmp	r2, r3
 634 02d8 E8DB     		blt	.L35
 496:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 497:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 498:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 499:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load length registers in 32 bit word size.
 500:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 501:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8Size;
 635              		.loc 1 501 0 is_stmt 1
 636 02da 094A     		ldr	r2, .L36+12
 637 02dc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 638 02de 1360     		str	r3, [r2]
 502:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 503:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 504:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Set the PKA Function register for the Compare operation
 505:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // and start the operation.
 506:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 507:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_COMPARE);
 639              		.loc 1 507 0
 640 02e0 044B     		ldr	r3, .L36
 641 02e2 4FF40442 		mov	r2, #33792
 642 02e6 1A60     		str	r2, [r3]
 508:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 509:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     return (PKA_STATUS_SUCCESS);
 643              		.loc 1 509 0
 644 02e8 0023     		movs	r3, #0
 645              	.L31:
 510:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 646              		.loc 1 510 0
 647 02ea 1846     		mov	r0, r3
 648 02ec 1C37     		adds	r7, r7, #28
 649              		.cfi_def_cfa_offset 4
 650 02ee BD46     		mov	sp, r7
 651              		.cfi_def_cfa_register 13
 652              		@ sp needed
 653 02f0 80BC     		pop	{r7}
 654              		.cfi_restore 7
 655              		.cfi_def_cfa_offset 0
 656 02f2 7047     		bx	lr
 657              	.L37:
 658              		.align	2
 659              	.L36:
 660 02f4 1C400044 		.word	1140867100
 661 02f8 00400044 		.word	1140867072
 662 02fc 04400044 		.word	1140867076
 663 0300 10400044 		.word	1140867088
 664              		.cfi_endproc
 665              	.LFE8:
 667              		.align	1
 668              		.global	PKABigNumCmpGetResult
 669              		.syntax unified
 670              		.thumb
 671              		.thumb_func
 672              		.fpu softvfp
 674              	PKABigNumCmpGetResult:
 675              	.LFB9:
 511:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 512:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 513:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 514:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Gets the result of the comparison operation of two big numbers.
 515:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 516:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function provides the results of the comparison of two big numbers
 517:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! which was started using the \sa PKABigNumCmpStart().
 518:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 519:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \return Returns:
 520:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG if the operation is in progress.
 521:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the two big numbers are equal.
 522:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_A_GR_B  if the first number is greater than the second.
 523:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_A_LT_B if the first number is less than the second.
 524:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 525:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 526:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
 527:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKABigNumCmpGetResult(void)
 528:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 676              		.loc 1 528 0
 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 8
 679              		@ frame_needed = 1, uses_anonymous_args = 0
 680              		@ link register save eliminated.
 681 0304 80B4     		push	{r7}
 682              		.cfi_def_cfa_offset 4
 683              		.cfi_offset 7, -4
 684 0306 83B0     		sub	sp, sp, #12
 685              		.cfi_def_cfa_offset 16
 686 0308 00AF     		add	r7, sp, #0
 687              		.cfi_def_cfa_register 7
 529:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     tPKAStatus status;
 530:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 531:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 532:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // verify that the operation is complete.
 533:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 534:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 688              		.loc 1 534 0
 689 030a 124B     		ldr	r3, .L47
 690 030c 1B68     		ldr	r3, [r3]
 691 030e 03F40043 		and	r3, r3, #32768
 692 0312 002B     		cmp	r3, #0
 693 0314 03D0     		beq	.L39
 535:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 536:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         status = PKA_STATUS_OPERATION_INPRG;
 694              		.loc 1 536 0
 695 0316 0723     		movs	r3, #7
 696 0318 FB71     		strb	r3, [r7, #7]
 537:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (status);
 697              		.loc 1 537 0
 698 031a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 699 031c 14E0     		b	.L40
 700              	.L39:
 538:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 539:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 540:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 541:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check the COMPARE register.
 542:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 543:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     switch(HWREG(PKA_COMPARE))
 701              		.loc 1 543 0
 702 031e 0E4B     		ldr	r3, .L47+4
 703 0320 1B68     		ldr	r3, [r3]
 704 0322 022B     		cmp	r3, #2
 705 0324 09D0     		beq	.L42
 706 0326 042B     		cmp	r3, #4
 707 0328 04D0     		beq	.L43
 708 032a 012B     		cmp	r3, #1
 709 032c 08D1     		bne	.L46
 544:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 545:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         case PKA_COMPARE_A_EQUALS_B:
 546:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             status = PKA_STATUS_SUCCESS;
 710              		.loc 1 546 0
 711 032e 0023     		movs	r3, #0
 712 0330 FB71     		strb	r3, [r7, #7]
 547:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             break;
 713              		.loc 1 547 0
 714 0332 08E0     		b	.L45
 715              	.L43:
 548:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 549:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         case PKA_COMPARE_A_GREATER_THAN_B:
 550:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             status = PKA_STATUS_A_GR_B;
 716              		.loc 1 550 0
 717 0334 0523     		movs	r3, #5
 718 0336 FB71     		strb	r3, [r7, #7]
 551:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             break;
 719              		.loc 1 551 0
 720 0338 05E0     		b	.L45
 721              	.L42:
 552:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 553:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         case PKA_COMPARE_A_LESS_THAN_B:
 554:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             status = PKA_STATUS_A_LT_B;
 722              		.loc 1 554 0
 723 033a 0623     		movs	r3, #6
 724 033c FB71     		strb	r3, [r7, #7]
 555:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             break;
 725              		.loc 1 555 0
 726 033e 02E0     		b	.L45
 727              	.L46:
 556:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 557:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         default:
 558:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             status = PKA_STATUS_FAILURE;
 728              		.loc 1 558 0
 729 0340 0123     		movs	r3, #1
 730 0342 FB71     		strb	r3, [r7, #7]
 559:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             break;
 731              		.loc 1 559 0
 732 0344 00BF     		nop
 733              	.L45:
 560:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 561:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 562:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     return (status);
 734              		.loc 1 562 0
 735 0346 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 736              	.L40:
 563:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 737              		.loc 1 563 0
 738 0348 1846     		mov	r0, r3
 739 034a 0C37     		adds	r7, r7, #12
 740              		.cfi_def_cfa_offset 4
 741 034c BD46     		mov	sp, r7
 742              		.cfi_def_cfa_register 13
 743              		@ sp needed
 744 034e 80BC     		pop	{r7}
 745              		.cfi_restore 7
 746              		.cfi_def_cfa_offset 0
 747 0350 7047     		bx	lr
 748              	.L48:
 749 0352 00BF     		.align	2
 750              	.L47:
 751 0354 1C400044 		.word	1140867100
 752 0358 20400044 		.word	1140867104
 753              		.cfi_endproc
 754              	.LFE9:
 756              		.align	1
 757              		.global	PKABigNumInvModStart
 758              		.syntax unified
 759              		.thumb
 760              		.thumb_func
 761              		.fpu softvfp
 763              	PKABigNumInvModStart:
 764              	.LFB10:
 564:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 565:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 566:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 567:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Starts the big number inverse modulo operation.
 568:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 569:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32BNum is the pointer to the buffer containing the big number
 570:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! (dividend).
 571:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui8BNSize is the size of the \e pui32BNum in 32 bit word.
 572:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32Modulus is the pointer to the buffer containing the divisor.
 573:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui8Size is the size of the divisor in 32 bit word.
 574:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 575:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! which will be set by this function.
 576:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 577:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function starts the the inverse modulo operation on \e pui32BNum
 578:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! using the divisor \e pui32Modulus.
 579:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 580:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!\return Returns: 
 581:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 582:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 583:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! some other operation.
 584:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 585:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 586:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
 587:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKABigNumInvModStart(uint32_t* pui32BNum, uint8_t ui8BNSize,
 588:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                      uint32_t* pui32Modulus, uint8_t ui8Size,
 589:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                      uint32_t* pui32ResultVector)
 590:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 765              		.loc 1 590 0
 766              		.cfi_startproc
 767              		@ args = 4, pretend = 0, frame = 24
 768              		@ frame_needed = 1, uses_anonymous_args = 0
 769              		@ link register save eliminated.
 770 035c 80B4     		push	{r7}
 771              		.cfi_def_cfa_offset 4
 772              		.cfi_offset 7, -4
 773 035e 87B0     		sub	sp, sp, #28
 774              		.cfi_def_cfa_offset 32
 775 0360 00AF     		add	r7, sp, #0
 776              		.cfi_def_cfa_register 7
 777 0362 F860     		str	r0, [r7, #12]
 778 0364 7A60     		str	r2, [r7, #4]
 779 0366 1A46     		mov	r2, r3
 780 0368 0B46     		mov	r3, r1
 781 036a FB72     		strb	r3, [r7, #11]
 782 036c 1346     		mov	r3, r2
 783 036e BB72     		strb	r3, [r7, #10]
 591:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t offset;
 592:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
 593:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 594:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 595:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check the arguments.
 596:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 597:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32BNum);
 598:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32Modulus);
 599:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 600:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 601:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset = 0;
 784              		.loc 1 601 0
 785 0370 0023     		movs	r3, #0
 786 0372 3B61     		str	r3, [r7, #16]
 602:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 603:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 604:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Make sure no operation is in progress.
 605:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 606:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 787              		.loc 1 606 0
 788 0374 394B     		ldr	r3, .L56
 789 0376 1B68     		ldr	r3, [r3]
 790 0378 03F40043 		and	r3, r3, #32768
 791 037c 002B     		cmp	r3, #0
 792 037e 01D0     		beq	.L50
 607:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 608:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 793              		.loc 1 608 0
 794 0380 0723     		movs	r3, #7
 795 0382 65E0     		b	.L51
 796              	.L50:
 609:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 610:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 611:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 612:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 613:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the number will be stored.
 614:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 615:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_APTR) ) = offset >>2;
 797              		.loc 1 615 0
 798 0384 364A     		ldr	r2, .L56+4
 799 0386 3B69     		ldr	r3, [r7, #16]
 800 0388 9B08     		lsrs	r3, r3, #2
 801 038a 1360     		str	r3, [r2]
 616:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 617:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 618:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the \e pui32BNum number in PKA RAM.
 619:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 620:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ui8BNSize; i++)
 802              		.loc 1 620 0
 803 038c 0023     		movs	r3, #0
 804 038e 7B61     		str	r3, [r7, #20]
 805 0390 12E0     		b	.L52
 806              	.L53:
 621:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 622:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32BNum[i];
 807              		.loc 1 622 0 discriminator 3
 808 0392 7B69     		ldr	r3, [r7, #20]
 809 0394 9B00     		lsls	r3, r3, #2
 810 0396 FA68     		ldr	r2, [r7, #12]
 811 0398 1A44     		add	r2, r2, r3
 812 039a 7B69     		ldr	r3, [r7, #20]
 813 039c 9B00     		lsls	r3, r3, #2
 814 039e 1946     		mov	r1, r3
 815 03a0 3B69     		ldr	r3, [r7, #16]
 816 03a2 0B44     		add	r3, r3, r1
 817 03a4 03F18843 		add	r3, r3, #1140850688
 818 03a8 03F5C043 		add	r3, r3, #24576
 819 03ac 1946     		mov	r1, r3
 820 03ae 1368     		ldr	r3, [r2]
 821 03b0 0B60     		str	r3, [r1]
 620:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 822              		.loc 1 620 0 discriminator 3
 823 03b2 7B69     		ldr	r3, [r7, #20]
 824 03b4 0133     		adds	r3, r3, #1
 825 03b6 7B61     		str	r3, [r7, #20]
 826              	.L52:
 620:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 827              		.loc 1 620 0 is_stmt 0 discriminator 1
 828 03b8 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 829 03ba 7A69     		ldr	r2, [r7, #20]
 830 03bc 9A42     		cmp	r2, r3
 831 03be E8DB     		blt	.L53
 623:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 624:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 625:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 626:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset for next data.
 627:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 628:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + ui8BNSize % 2);
 832              		.loc 1 628 0 is_stmt 1
 833 03c0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 834 03c2 03F00102 		and	r2, r3, #1
 835 03c6 7B69     		ldr	r3, [r7, #20]
 836 03c8 1344     		add	r3, r3, r2
 837 03ca 9B00     		lsls	r3, r3, #2
 838 03cc 1A46     		mov	r2, r3
 839 03ce 3B69     		ldr	r3, [r7, #16]
 840 03d0 1344     		add	r3, r3, r2
 841 03d2 3B61     		str	r3, [r7, #16]
 629:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 630:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 631:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 632:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the modulus will be stored.
 633:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 634:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 842              		.loc 1 634 0
 843 03d4 234A     		ldr	r2, .L56+8
 844 03d6 3B69     		ldr	r3, [r7, #16]
 845 03d8 9B08     		lsrs	r3, r3, #2
 846 03da 1360     		str	r3, [r2]
 635:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 636:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 637:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the \e pui32Modulus divisor in PKA RAM.
 638:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 639:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ui8Size;  i++)
 847              		.loc 1 639 0
 848 03dc 0023     		movs	r3, #0
 849 03de 7B61     		str	r3, [r7, #20]
 850 03e0 12E0     		b	.L54
 851              	.L55:
 640:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 641:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32Modulus[i];
 852              		.loc 1 641 0 discriminator 3
 853 03e2 7B69     		ldr	r3, [r7, #20]
 854 03e4 9B00     		lsls	r3, r3, #2
 855 03e6 7A68     		ldr	r2, [r7, #4]
 856 03e8 1A44     		add	r2, r2, r3
 857 03ea 7B69     		ldr	r3, [r7, #20]
 858 03ec 9B00     		lsls	r3, r3, #2
 859 03ee 1946     		mov	r1, r3
 860 03f0 3B69     		ldr	r3, [r7, #16]
 861 03f2 0B44     		add	r3, r3, r1
 862 03f4 03F18843 		add	r3, r3, #1140850688
 863 03f8 03F5C043 		add	r3, r3, #24576
 864 03fc 1946     		mov	r1, r3
 865 03fe 1368     		ldr	r3, [r2]
 866 0400 0B60     		str	r3, [r1]
 639:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 867              		.loc 1 639 0 discriminator 3
 868 0402 7B69     		ldr	r3, [r7, #20]
 869 0404 0133     		adds	r3, r3, #1
 870 0406 7B61     		str	r3, [r7, #20]
 871              	.L54:
 639:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 872              		.loc 1 639 0 is_stmt 0 discriminator 1
 873 0408 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 874 040a 7A69     		ldr	r2, [r7, #20]
 875 040c 9A42     		cmp	r2, r3
 876 040e E8DB     		blt	.L55
 642:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 643:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 644:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 645:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset for result data.
 646:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 647:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + ui8Size % 2);
 877              		.loc 1 647 0 is_stmt 1
 878 0410 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 879 0412 03F00102 		and	r2, r3, #1
 880 0416 7B69     		ldr	r3, [r7, #20]
 881 0418 1344     		add	r3, r3, r2
 882 041a 9B00     		lsls	r3, r3, #2
 883 041c 1A46     		mov	r2, r3
 884 041e 3B69     		ldr	r3, [r7, #16]
 885 0420 1344     		add	r3, r3, r2
 886 0422 3B61     		str	r3, [r7, #16]
 648:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 649:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 650:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Copy the result vector address location.
 651:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 652:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 887              		.loc 1 652 0
 888 0424 3B69     		ldr	r3, [r7, #16]
 889 0426 03F18843 		add	r3, r3, #1140850688
 890 042a 03F5C043 		add	r3, r3, #24576
 891 042e 3A6A     		ldr	r2, [r7, #32]
 892 0430 1360     		str	r3, [r2]
 653:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 654:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 655:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load D ptr with the result location in PKA RAM.
 656:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 657:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_DPTR) ) = offset >> 2;
 893              		.loc 1 657 0
 894 0432 0D4A     		ldr	r2, .L56+12
 895 0434 3B69     		ldr	r3, [r7, #16]
 896 0436 9B08     		lsrs	r3, r3, #2
 897 0438 1360     		str	r3, [r2]
 658:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 659:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 660:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the respective length registers.
 661:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 662:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8BNSize;
 898              		.loc 1 662 0
 899 043a 0C4A     		ldr	r2, .L56+16
 900 043c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 901 043e 1360     		str	r3, [r2]
 663:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8Size;
 902              		.loc 1 663 0
 903 0440 0B4A     		ldr	r2, .L56+20
 904 0442 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 905 0444 1360     		str	r3, [r2]
 664:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 665:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 666:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // set the PKA function to InvMod operation and the start the operation.
 667:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 668:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_FUNCTION) ) = 0x0000F000;
 906              		.loc 1 668 0
 907 0446 054B     		ldr	r3, .L56
 908 0448 4FF47042 		mov	r2, #61440
 909 044c 1A60     		str	r2, [r3]
 669:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 670:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     return (PKA_STATUS_SUCCESS);
 910              		.loc 1 670 0
 911 044e 0023     		movs	r3, #0
 912              	.L51:
 671:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 913              		.loc 1 671 0
 914 0450 1846     		mov	r0, r3
 915 0452 1C37     		adds	r7, r7, #28
 916              		.cfi_def_cfa_offset 4
 917 0454 BD46     		mov	sp, r7
 918              		.cfi_def_cfa_register 13
 919              		@ sp needed
 920 0456 80BC     		pop	{r7}
 921              		.cfi_restore 7
 922              		.cfi_def_cfa_offset 0
 923 0458 7047     		bx	lr
 924              	.L57:
 925 045a 00BF     		.align	2
 926              	.L56:
 927 045c 1C400044 		.word	1140867100
 928 0460 00400044 		.word	1140867072
 929 0464 04400044 		.word	1140867076
 930 0468 0C400044 		.word	1140867084
 931 046c 10400044 		.word	1140867088
 932 0470 14400044 		.word	1140867092
 933              		.cfi_endproc
 934              	.LFE10:
 936              		.align	1
 937              		.global	PKABigNumInvModGetResult
 938              		.syntax unified
 939              		.thumb
 940              		.thumb_func
 941              		.fpu softvfp
 943              	PKABigNumInvModGetResult:
 944              	.LFB11:
 672:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 673:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 674:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 675:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Gets the result of the big number inverse modulo operation.
 676:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 677:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result needs to be
 678:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! stored.
 679:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui8Size is the size of the provided buffer in 32 bit ui8Size
 680:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! word.
 681:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
 682:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! was provided by the start function \sa PKABigNumInvModStart().
 683:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 684:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function gets the result of the big number inverse modulo operation
 685:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! previously started using the function \sa PKABigNumInvModStart().
 686:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 687:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \return Returns:
 688:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
 689:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
 690:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! the operation.
 691:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
 692:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW if the length of the provided buffer is less
 693:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! then the result. 
 694:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 695:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 696:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
 697:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKABigNumInvModGetResult(uint32_t* pui32ResultBuf, uint8_t ui8Size,
 698:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                          uint32_t ui32ResVectorLoc)
 699:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 945              		.loc 1 699 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 32
 948              		@ frame_needed = 1, uses_anonymous_args = 0
 949              		@ link register save eliminated.
 950 0474 80B4     		push	{r7}
 951              		.cfi_def_cfa_offset 4
 952              		.cfi_offset 7, -4
 953 0476 89B0     		sub	sp, sp, #36
 954              		.cfi_def_cfa_offset 40
 955 0478 00AF     		add	r7, sp, #0
 956              		.cfi_def_cfa_register 7
 957 047a F860     		str	r0, [r7, #12]
 958 047c 0B46     		mov	r3, r1
 959 047e 7A60     		str	r2, [r7, #4]
 960 0480 FB72     		strb	r3, [r7, #11]
 700:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t regMSWVal;
 701:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t len;
 702:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
 703:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 704:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 705:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check the arguments.
 706:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 707:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
 708:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
 709:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
 710:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 711:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 712:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Verify that the operation is complete.
 713:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 714:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 961              		.loc 1 714 0
 962 0482 204B     		ldr	r3, .L65
 963 0484 1B68     		ldr	r3, [r3]
 964 0486 03F40043 		and	r3, r3, #32768
 965 048a 002B     		cmp	r3, #0
 966 048c 01D0     		beq	.L59
 715:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 716:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 967              		.loc 1 716 0
 968 048e 0723     		movs	r3, #7
 969 0490 32E0     		b	.L60
 970              	.L59:
 717:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 718:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 719:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 720:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Get the MSW register value.
 721:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 722:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     regMSWVal = HWREG(PKA_MSW);
 971              		.loc 1 722 0
 972 0492 1D4B     		ldr	r3, .L65+4
 973 0494 1B68     		ldr	r3, [r3]
 974 0496 BB61     		str	r3, [r7, #24]
 723:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 724:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 725:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
 726:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 727:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 975              		.loc 1 727 0
 976 0498 BB69     		ldr	r3, [r7, #24]
 977 049a 03F40043 		and	r3, r3, #32768
 978 049e 002B     		cmp	r3, #0
 979 04a0 01D0     		beq	.L61
 728:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 729:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_RESULT_0);
 980              		.loc 1 729 0
 981 04a2 0423     		movs	r3, #4
 982 04a4 28E0     		b	.L60
 983              	.L61:
 730:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 731:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 732:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 733:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Get the length of the result
 734:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 735:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 984              		.loc 1 735 0
 985 04a6 BB69     		ldr	r3, [r7, #24]
 986 04a8 C3F30A02 		ubfx	r2, r3, #0, #11
 736:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 987              		.loc 1 736 0
 988 04ac 7B68     		ldr	r3, [r7, #4]
 989 04ae 03F13C43 		add	r3, r3, #-1140850688
 990 04b2 A3F5C043 		sub	r3, r3, #24576
 991 04b6 9B08     		lsrs	r3, r3, #2
 735:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 992              		.loc 1 735 0
 993 04b8 D31A     		subs	r3, r2, r3
 994 04ba 0133     		adds	r3, r3, #1
 995 04bc 7B61     		str	r3, [r7, #20]
 737:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 738:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 739:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check if the provided buffer length is adequate to store the result
 740:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // data.
 741:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 742:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if(ui8Size < len)
 996              		.loc 1 742 0
 997 04be FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 998 04c0 7A69     		ldr	r2, [r7, #20]
 999 04c2 9A42     		cmp	r2, r3
 1000 04c4 01D9     		bls	.L62
 743:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 744:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 1001              		.loc 1 744 0
 1002 04c6 0323     		movs	r3, #3
 1003 04c8 16E0     		b	.L60
 1004              	.L62:
 745:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 746:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 747:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 748:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Copy the result from vector C into the \e pui32ResultBuf.
 749:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < len; i++)
 1005              		.loc 1 749 0
 1006 04ca 0023     		movs	r3, #0
 1007 04cc FB61     		str	r3, [r7, #28]
 1008 04ce 0EE0     		b	.L63
 1009              	.L64:
 750:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 751:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         pui32ResultBuf[i]= HWREG( (ui32ResVectorLoc + 4*i) );
 1010              		.loc 1 751 0 discriminator 3
 1011 04d0 FB69     		ldr	r3, [r7, #28]
 1012 04d2 9B00     		lsls	r3, r3, #2
 1013 04d4 1A46     		mov	r2, r3
 1014 04d6 7B68     		ldr	r3, [r7, #4]
 1015 04d8 1344     		add	r3, r3, r2
 1016 04da 1946     		mov	r1, r3
 1017 04dc FB69     		ldr	r3, [r7, #28]
 1018 04de 9B00     		lsls	r3, r3, #2
 1019 04e0 FA68     		ldr	r2, [r7, #12]
 1020 04e2 1344     		add	r3, r3, r2
 1021 04e4 0A68     		ldr	r2, [r1]
 1022 04e6 1A60     		str	r2, [r3]
 749:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1023              		.loc 1 749 0 discriminator 3
 1024 04e8 FB69     		ldr	r3, [r7, #28]
 1025 04ea 0133     		adds	r3, r3, #1
 1026 04ec FB61     		str	r3, [r7, #28]
 1027              	.L63:
 749:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1028              		.loc 1 749 0 is_stmt 0 discriminator 1
 1029 04ee FB69     		ldr	r3, [r7, #28]
 1030 04f0 7A69     		ldr	r2, [r7, #20]
 1031 04f2 9A42     		cmp	r2, r3
 1032 04f4 ECD8     		bhi	.L64
 752:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 753:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 754:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1033              		.loc 1 754 0 is_stmt 1
 1034 04f6 0023     		movs	r3, #0
 1035              	.L60:
 755:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 1036              		.loc 1 755 0
 1037 04f8 1846     		mov	r0, r3
 1038 04fa 2437     		adds	r7, r7, #36
 1039              		.cfi_def_cfa_offset 4
 1040 04fc BD46     		mov	sp, r7
 1041              		.cfi_def_cfa_register 13
 1042              		@ sp needed
 1043 04fe 80BC     		pop	{r7}
 1044              		.cfi_restore 7
 1045              		.cfi_def_cfa_offset 0
 1046 0500 7047     		bx	lr
 1047              	.L66:
 1048 0502 00BF     		.align	2
 1049              	.L65:
 1050 0504 1C400044 		.word	1140867100
 1051 0508 24400044 		.word	1140867108
 1052              		.cfi_endproc
 1053              	.LFE11:
 1055              		.align	1
 1056              		.global	PKABigNumMultiplyStart
 1057              		.syntax unified
 1058              		.thumb
 1059              		.thumb_func
 1060              		.fpu softvfp
 1062              	PKABigNumMultiplyStart:
 1063              	.LFB12:
 756:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 757:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 758:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 759:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Starts the big number multiplication.
 760:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 761:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32Xplicand is the pointer to the buffer containing the big
 762:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! number multiplicand.
 763:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui8XplicandSize is the size of the multiplicand in 32-bit word.
 764:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32Xplier is the pointer to the buffer containing the big
 765:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! number multiplier.
 766:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui8XplierSize is the size of the multiplier in 32-bit word.
 767:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 768:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! which will be set by this function.
 769:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 770:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function starts the multiplication of the two big numbers.
 771:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 772:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!\return Returns: 
 773:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 774:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 775:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! some other operation.
 776:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 777:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 778:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
 779:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKABigNumMultiplyStart(uint32_t* pui32Xplicand, uint8_t ui8XplicandSize,
 780:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                        uint32_t* pui32Xplier, uint8_t ui8XplierSize,
 781:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                        uint32_t* pui32ResultVector)
 782:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 1064              		.loc 1 782 0
 1065              		.cfi_startproc
 1066              		@ args = 4, pretend = 0, frame = 24
 1067              		@ frame_needed = 1, uses_anonymous_args = 0
 1068              		@ link register save eliminated.
 1069 050c 80B4     		push	{r7}
 1070              		.cfi_def_cfa_offset 4
 1071              		.cfi_offset 7, -4
 1072 050e 87B0     		sub	sp, sp, #28
 1073              		.cfi_def_cfa_offset 32
 1074 0510 00AF     		add	r7, sp, #0
 1075              		.cfi_def_cfa_register 7
 1076 0512 F860     		str	r0, [r7, #12]
 1077 0514 7A60     		str	r2, [r7, #4]
 1078 0516 1A46     		mov	r2, r3
 1079 0518 0B46     		mov	r3, r1
 1080 051a FB72     		strb	r3, [r7, #11]
 1081 051c 1346     		mov	r3, r2
 1082 051e BB72     		strb	r3, [r7, #10]
 783:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t offset;
 784:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
 785:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 786:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 787:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check for the arguments.
 788:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 789:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32Xplicand);
 790:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32Xplier);
 791:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 792:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 793:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset = 0;
 1083              		.loc 1 793 0
 1084 0520 0023     		movs	r3, #0
 1085 0522 3B61     		str	r3, [r7, #16]
 794:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 795:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 796:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Make sure no operation is in progress.
 797:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 798:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1086              		.loc 1 798 0
 1087 0524 394B     		ldr	r3, .L74
 1088 0526 1B68     		ldr	r3, [r3]
 1089 0528 03F40043 		and	r3, r3, #32768
 1090 052c 002B     		cmp	r3, #0
 1091 052e 01D0     		beq	.L68
 799:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 800:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1092              		.loc 1 800 0
 1093 0530 0723     		movs	r3, #7
 1094 0532 65E0     		b	.L69
 1095              	.L68:
 801:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 802:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 803:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 804:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 805:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the multiplicand will be stored.
 806:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 807:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_APTR) ) = offset >> 2;
 1096              		.loc 1 807 0
 1097 0534 364A     		ldr	r2, .L74+4
 1098 0536 3B69     		ldr	r3, [r7, #16]
 1099 0538 9B08     		lsrs	r3, r3, #2
 1100 053a 1360     		str	r3, [r2]
 808:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 809:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 810:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the multiplicand in PKA RAM.
 811:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 812:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ui8XplicandSize; i++)
 1101              		.loc 1 812 0
 1102 053c 0023     		movs	r3, #0
 1103 053e 7B61     		str	r3, [r7, #20]
 1104 0540 12E0     		b	.L70
 1105              	.L71:
 813:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 814:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = *pui32Xplicand;
 1106              		.loc 1 814 0 discriminator 3
 1107 0542 7B69     		ldr	r3, [r7, #20]
 1108 0544 9B00     		lsls	r3, r3, #2
 1109 0546 1A46     		mov	r2, r3
 1110 0548 3B69     		ldr	r3, [r7, #16]
 1111 054a 1344     		add	r3, r3, r2
 1112 054c 03F18843 		add	r3, r3, #1140850688
 1113 0550 03F5C043 		add	r3, r3, #24576
 1114 0554 1A46     		mov	r2, r3
 1115 0556 FB68     		ldr	r3, [r7, #12]
 1116 0558 1B68     		ldr	r3, [r3]
 1117 055a 1360     		str	r3, [r2]
 815:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         pui32Xplicand++;
 1118              		.loc 1 815 0 discriminator 3
 1119 055c FB68     		ldr	r3, [r7, #12]
 1120 055e 0433     		adds	r3, r3, #4
 1121 0560 FB60     		str	r3, [r7, #12]
 812:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1122              		.loc 1 812 0 discriminator 3
 1123 0562 7B69     		ldr	r3, [r7, #20]
 1124 0564 0133     		adds	r3, r3, #1
 1125 0566 7B61     		str	r3, [r7, #20]
 1126              	.L70:
 812:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1127              		.loc 1 812 0 is_stmt 0 discriminator 1
 1128 0568 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1129 056a 7A69     		ldr	r2, [r7, #20]
 1130 056c 9A42     		cmp	r2, r3
 1131 056e E8DB     		blt	.L71
 816:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 817:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 818:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 819:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset for the next data.
 820:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 821:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + (ui8XplicandSize % 2));
 1132              		.loc 1 821 0 is_stmt 1
 1133 0570 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1134 0572 03F00102 		and	r2, r3, #1
 1135 0576 7B69     		ldr	r3, [r7, #20]
 1136 0578 1344     		add	r3, r3, r2
 1137 057a 9B00     		lsls	r3, r3, #2
 1138 057c 1A46     		mov	r2, r3
 1139 057e 3B69     		ldr	r3, [r7, #16]
 1140 0580 1344     		add	r3, r3, r2
 1141 0582 3B61     		str	r3, [r7, #16]
 822:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 823:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 824:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 825:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the multiplier will be stored.
 826:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 827:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 1142              		.loc 1 827 0
 1143 0584 234A     		ldr	r2, .L74+8
 1144 0586 3B69     		ldr	r3, [r7, #16]
 1145 0588 9B08     		lsrs	r3, r3, #2
 1146 058a 1360     		str	r3, [r2]
 828:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 829:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 830:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the multiplier in PKA RAM.
 831:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 832:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ui8XplierSize; i++)
 1147              		.loc 1 832 0
 1148 058c 0023     		movs	r3, #0
 1149 058e 7B61     		str	r3, [r7, #20]
 1150 0590 12E0     		b	.L72
 1151              	.L73:
 833:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 834:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = *pui32Xplier;
 1152              		.loc 1 834 0 discriminator 3
 1153 0592 7B69     		ldr	r3, [r7, #20]
 1154 0594 9B00     		lsls	r3, r3, #2
 1155 0596 1A46     		mov	r2, r3
 1156 0598 3B69     		ldr	r3, [r7, #16]
 1157 059a 1344     		add	r3, r3, r2
 1158 059c 03F18843 		add	r3, r3, #1140850688
 1159 05a0 03F5C043 		add	r3, r3, #24576
 1160 05a4 1A46     		mov	r2, r3
 1161 05a6 7B68     		ldr	r3, [r7, #4]
 1162 05a8 1B68     		ldr	r3, [r3]
 1163 05aa 1360     		str	r3, [r2]
 835:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         pui32Xplier++;
 1164              		.loc 1 835 0 discriminator 3
 1165 05ac 7B68     		ldr	r3, [r7, #4]
 1166 05ae 0433     		adds	r3, r3, #4
 1167 05b0 7B60     		str	r3, [r7, #4]
 832:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1168              		.loc 1 832 0 discriminator 3
 1169 05b2 7B69     		ldr	r3, [r7, #20]
 1170 05b4 0133     		adds	r3, r3, #1
 1171 05b6 7B61     		str	r3, [r7, #20]
 1172              	.L72:
 832:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1173              		.loc 1 832 0 is_stmt 0 discriminator 1
 1174 05b8 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1175 05ba 7A69     		ldr	r2, [r7, #20]
 1176 05bc 9A42     		cmp	r2, r3
 1177 05be E8DB     		blt	.L73
 836:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 837:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 838:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 839:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset for the next data.
 840:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 841:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + (ui8XplierSize % 2));
 1178              		.loc 1 841 0 is_stmt 1
 1179 05c0 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1180 05c2 03F00102 		and	r2, r3, #1
 1181 05c6 7B69     		ldr	r3, [r7, #20]
 1182 05c8 1344     		add	r3, r3, r2
 1183 05ca 9B00     		lsls	r3, r3, #2
 1184 05cc 1A46     		mov	r2, r3
 1185 05ce 3B69     		ldr	r3, [r7, #16]
 1186 05d0 1344     		add	r3, r3, r2
 1187 05d2 3B61     		str	r3, [r7, #16]
 842:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 843:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 844:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Copy the result vector address location.
 845:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 846:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 1188              		.loc 1 846 0
 1189 05d4 3B69     		ldr	r3, [r7, #16]
 1190 05d6 03F18843 		add	r3, r3, #1140850688
 1191 05da 03F5C043 		add	r3, r3, #24576
 1192 05de 3A6A     		ldr	r2, [r7, #32]
 1193 05e0 1360     		str	r3, [r2]
 847:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 848:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 849:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load C ptr with the result location in PKA RAM.
 850:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 851:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_CPTR) ) = offset >> 2;
 1194              		.loc 1 851 0
 1195 05e2 0D4A     		ldr	r2, .L74+12
 1196 05e4 3B69     		ldr	r3, [r7, #16]
 1197 05e6 9B08     		lsrs	r3, r3, #2
 1198 05e8 1360     		str	r3, [r2]
 852:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 853:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 854:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the respective length registers.
 855:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 856:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8XplicandSize;
 1199              		.loc 1 856 0
 1200 05ea 0C4A     		ldr	r2, .L74+16
 1201 05ec FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1202 05ee 1360     		str	r3, [r2]
 857:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8XplierSize;
 1203              		.loc 1 857 0
 1204 05f0 0B4A     		ldr	r2, .L74+20
 1205 05f2 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1206 05f4 1360     		str	r3, [r2]
 858:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 859:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 860:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Set the PKA function to the multiplication and start it.
 861:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 862:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_MULTIPLY);
 1207              		.loc 1 862 0
 1208 05f6 054B     		ldr	r3, .L74
 1209 05f8 48F20102 		movw	r2, #32769
 1210 05fc 1A60     		str	r2, [r3]
 863:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 864:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1211              		.loc 1 864 0
 1212 05fe 0023     		movs	r3, #0
 1213              	.L69:
 865:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 1214              		.loc 1 865 0
 1215 0600 1846     		mov	r0, r3
 1216 0602 1C37     		adds	r7, r7, #28
 1217              		.cfi_def_cfa_offset 4
 1218 0604 BD46     		mov	sp, r7
 1219              		.cfi_def_cfa_register 13
 1220              		@ sp needed
 1221 0606 80BC     		pop	{r7}
 1222              		.cfi_restore 7
 1223              		.cfi_def_cfa_offset 0
 1224 0608 7047     		bx	lr
 1225              	.L75:
 1226 060a 00BF     		.align	2
 1227              	.L74:
 1228 060c 1C400044 		.word	1140867100
 1229 0610 00400044 		.word	1140867072
 1230 0614 04400044 		.word	1140867076
 1231 0618 08400044 		.word	1140867080
 1232 061c 10400044 		.word	1140867088
 1233 0620 14400044 		.word	1140867092
 1234              		.cfi_endproc
 1235              	.LFE12:
 1237              		.align	1
 1238              		.global	PKABigNumMultGetResult
 1239              		.syntax unified
 1240              		.thumb
 1241              		.thumb_func
 1242              		.fpu softvfp
 1244              	PKABigNumMultGetResult:
 1245              	.LFB13:
 866:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 867:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 868:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 869:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Gets the results of the big number multiplication.
 870:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 871:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result needs to be
 872:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! stored.
 873:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32Len is the address of the variable containing the length of the
 874:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! buffer.  After the operation, the actual length of the resultant is stored
 875:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! at this address.
 876:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
 877:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! was provided by the start function \sa PKABigNumMultiplyStart().
 878:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 879:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function gets the result of the multiplication of two big numbers
 880:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! operation previously started using the function \sa
 881:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! PKABigNumMultiplyStart().
 882:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 883:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \return Returns:
 884:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
 885:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
 886:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! the operation.
 887:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
 888:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
 889:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW if the length of the provided buffer is less
 890:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! then the length of the result. 
 891:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 892:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 893:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
 894:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKABigNumMultGetResult(uint32_t* pui32ResultBuf, uint32_t* pui32Len,
 895:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                        uint32_t ui32ResVectorLoc)
 896:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 1246              		.loc 1 896 0
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 32
 1249              		@ frame_needed = 1, uses_anonymous_args = 0
 1250              		@ link register save eliminated.
 1251 0624 80B4     		push	{r7}
 1252              		.cfi_def_cfa_offset 4
 1253              		.cfi_offset 7, -4
 1254 0626 89B0     		sub	sp, sp, #36
 1255              		.cfi_def_cfa_offset 40
 1256 0628 00AF     		add	r7, sp, #0
 1257              		.cfi_def_cfa_register 7
 1258 062a F860     		str	r0, [r7, #12]
 1259 062c B960     		str	r1, [r7, #8]
 1260 062e 7A60     		str	r2, [r7, #4]
 897:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t regMSWVal;
 898:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t len;
 899:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
 900:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 901:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 902:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check for arguments.
 903:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 904:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
 905:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32Len);
 906:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
 907:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
 908:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 909:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 910:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Verify that the operation is complete.
 911:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 912:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1261              		.loc 1 912 0
 1262 0630 224B     		ldr	r3, .L83
 1263 0632 1B68     		ldr	r3, [r3]
 1264 0634 03F40043 		and	r3, r3, #32768
 1265 0638 002B     		cmp	r3, #0
 1266 063a 01D0     		beq	.L77
 913:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 914:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1267              		.loc 1 914 0
 1268 063c 0723     		movs	r3, #7
 1269 063e 37E0     		b	.L78
 1270              	.L77:
 915:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 916:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 917:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 918:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Get the MSW register value.
 919:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 920:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     regMSWVal = HWREG(PKA_MSW);
 1271              		.loc 1 920 0
 1272 0640 1F4B     		ldr	r3, .L83+4
 1273 0642 1B68     		ldr	r3, [r3]
 1274 0644 BB61     		str	r3, [r7, #24]
 921:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 922:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 923:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
 924:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 925:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 1275              		.loc 1 925 0
 1276 0646 BB69     		ldr	r3, [r7, #24]
 1277 0648 03F40043 		and	r3, r3, #32768
 1278 064c 002B     		cmp	r3, #0
 1279 064e 01D0     		beq	.L79
 926:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 927:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_RESULT_0);
 1280              		.loc 1 927 0
 1281 0650 0423     		movs	r3, #4
 1282 0652 2DE0     		b	.L78
 1283              	.L79:
 928:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 929:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 930:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 931:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Get the length of the result.
 932:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 933:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 1284              		.loc 1 933 0
 1285 0654 BB69     		ldr	r3, [r7, #24]
 1286 0656 C3F30A02 		ubfx	r2, r3, #0, #11
 934:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1287              		.loc 1 934 0
 1288 065a 7B68     		ldr	r3, [r7, #4]
 1289 065c 03F13C43 		add	r3, r3, #-1140850688
 1290 0660 A3F5C043 		sub	r3, r3, #24576
 1291 0664 9B08     		lsrs	r3, r3, #2
 933:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1292              		.loc 1 933 0
 1293 0666 D31A     		subs	r3, r2, r3
 1294 0668 0133     		adds	r3, r3, #1
 1295 066a 7B61     		str	r3, [r7, #20]
 935:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 936:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 937:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Make sure that the length of the supplied result buffer is adequate
 938:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // to store the resultant.
 939:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 940:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if(*pui32Len < len)
 1296              		.loc 1 940 0
 1297 066c BB68     		ldr	r3, [r7, #8]
 1298 066e 1B68     		ldr	r3, [r3]
 1299 0670 7A69     		ldr	r2, [r7, #20]
 1300 0672 9A42     		cmp	r2, r3
 1301 0674 01D9     		bls	.L80
 941:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 942:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 1302              		.loc 1 942 0
 1303 0676 0323     		movs	r3, #3
 1304 0678 1AE0     		b	.L78
 1305              	.L80:
 943:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 944:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 945:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 946:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Copy the resultant length.
 947:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 948:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     *pui32Len = len;
 1306              		.loc 1 948 0
 1307 067a BB68     		ldr	r3, [r7, #8]
 1308 067c 7A69     		ldr	r2, [r7, #20]
 1309 067e 1A60     		str	r2, [r3]
 949:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 950:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 951:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Copy the result from vector C into the pResult.
 952:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 953:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < *pui32Len; i++)
 1310              		.loc 1 953 0
 1311 0680 0023     		movs	r3, #0
 1312 0682 FB61     		str	r3, [r7, #28]
 1313 0684 0EE0     		b	.L81
 1314              	.L82:
 954:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 955:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         pui32ResultBuf[i]= HWREG( (ui32ResVectorLoc + 4*i) );
 1315              		.loc 1 955 0 discriminator 3
 1316 0686 FB69     		ldr	r3, [r7, #28]
 1317 0688 9B00     		lsls	r3, r3, #2
 1318 068a 1A46     		mov	r2, r3
 1319 068c 7B68     		ldr	r3, [r7, #4]
 1320 068e 1344     		add	r3, r3, r2
 1321 0690 1946     		mov	r1, r3
 1322 0692 FB69     		ldr	r3, [r7, #28]
 1323 0694 9B00     		lsls	r3, r3, #2
 1324 0696 FA68     		ldr	r2, [r7, #12]
 1325 0698 1344     		add	r3, r3, r2
 1326 069a 0A68     		ldr	r2, [r1]
 1327 069c 1A60     		str	r2, [r3]
 953:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1328              		.loc 1 953 0 discriminator 3
 1329 069e FB69     		ldr	r3, [r7, #28]
 1330 06a0 0133     		adds	r3, r3, #1
 1331 06a2 FB61     		str	r3, [r7, #28]
 1332              	.L81:
 953:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1333              		.loc 1 953 0 is_stmt 0 discriminator 1
 1334 06a4 BB68     		ldr	r3, [r7, #8]
 1335 06a6 1A68     		ldr	r2, [r3]
 1336 06a8 FB69     		ldr	r3, [r7, #28]
 1337 06aa 9A42     		cmp	r2, r3
 1338 06ac EBD8     		bhi	.L82
 956:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
 957:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 958:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1339              		.loc 1 958 0 is_stmt 1
 1340 06ae 0023     		movs	r3, #0
 1341              	.L78:
 959:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 1342              		.loc 1 959 0
 1343 06b0 1846     		mov	r0, r3
 1344 06b2 2437     		adds	r7, r7, #36
 1345              		.cfi_def_cfa_offset 4
 1346 06b4 BD46     		mov	sp, r7
 1347              		.cfi_def_cfa_register 13
 1348              		@ sp needed
 1349 06b6 80BC     		pop	{r7}
 1350              		.cfi_restore 7
 1351              		.cfi_def_cfa_offset 0
 1352 06b8 7047     		bx	lr
 1353              	.L84:
 1354 06ba 00BF     		.align	2
 1355              	.L83:
 1356 06bc 1C400044 		.word	1140867100
 1357 06c0 24400044 		.word	1140867108
 1358              		.cfi_endproc
 1359              	.LFE13:
 1361              		.align	1
 1362              		.global	PKABigNumAddStart
 1363              		.syntax unified
 1364              		.thumb
 1365              		.thumb_func
 1366              		.fpu softvfp
 1368              	PKABigNumAddStart:
 1369              	.LFB14:
 960:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 961:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 962:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 963:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Starts the addition of two big number.
 964:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 965:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32BN1 is the pointer to the buffer containing the first
 966:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! big mumber.
 967:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui8BN1Size is the size of the first big number in 32-bit word.
 968:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32BN2 is the pointer to the buffer containing the second
 969:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! big number.
 970:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui8BN2Size is the size of the second big number in 32-bit word.
 971:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 972:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! which will be set by this function.
 973:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 974:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function starts the addition of the two big numbers.
 975:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
 976:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!\return Returns: 
 977:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 978:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 979:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! some other operation.
 980:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
 981:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
 982:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
 983:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKABigNumAddStart(uint32_t* pui32BN1, uint8_t ui8BN1Size,
 984:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                   uint32_t* pui32BN2, uint8_t ui8BN2Size,
 985:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                   uint32_t* pui32ResultVector)
 986:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 1370              		.loc 1 986 0
 1371              		.cfi_startproc
 1372              		@ args = 4, pretend = 0, frame = 24
 1373              		@ frame_needed = 1, uses_anonymous_args = 0
 1374              		@ link register save eliminated.
 1375 06c4 80B4     		push	{r7}
 1376              		.cfi_def_cfa_offset 4
 1377              		.cfi_offset 7, -4
 1378 06c6 87B0     		sub	sp, sp, #28
 1379              		.cfi_def_cfa_offset 32
 1380 06c8 00AF     		add	r7, sp, #0
 1381              		.cfi_def_cfa_register 7
 1382 06ca F860     		str	r0, [r7, #12]
 1383 06cc 7A60     		str	r2, [r7, #4]
 1384 06ce 1A46     		mov	r2, r3
 1385 06d0 0B46     		mov	r3, r1
 1386 06d2 FB72     		strb	r3, [r7, #11]
 1387 06d4 1346     		mov	r3, r2
 1388 06d6 BB72     		strb	r3, [r7, #10]
 987:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t offset;
 988:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
 989:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 990:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 991:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check for arguments.
 992:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
 993:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32BN1);
 994:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32BN2);
 995:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 996:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 997:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset = 0;
 1389              		.loc 1 997 0
 1390 06d8 0023     		movs	r3, #0
 1391 06da 3B61     		str	r3, [r7, #16]
 998:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
 999:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1000:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Make sure no operation is in progress.
1001:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1002:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1392              		.loc 1 1002 0
 1393 06dc 394B     		ldr	r3, .L92
 1394 06de 1B68     		ldr	r3, [r3]
 1395 06e0 03F40043 		and	r3, r3, #32768
 1396 06e4 002B     		cmp	r3, #0
 1397 06e6 01D0     		beq	.L86
1003:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1004:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1398              		.loc 1 1004 0
 1399 06e8 0723     		movs	r3, #7
 1400 06ea 65E0     		b	.L87
 1401              	.L86:
1005:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1006:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1007:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1008:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1009:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the big number 1 will be stored.
1010:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1011:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_APTR) ) = offset >> 2;
 1402              		.loc 1 1011 0
 1403 06ec 364A     		ldr	r2, .L92+4
 1404 06ee 3B69     		ldr	r3, [r7, #16]
 1405 06f0 9B08     		lsrs	r3, r3, #2
 1406 06f2 1360     		str	r3, [r2]
1012:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1013:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1014:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the big number 1 in PKA RAM.
1015:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1016:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ui8BN1Size; i++)
 1407              		.loc 1 1016 0
 1408 06f4 0023     		movs	r3, #0
 1409 06f6 7B61     		str	r3, [r7, #20]
 1410 06f8 12E0     		b	.L88
 1411              	.L89:
1017:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1018:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32BN1[i];
 1412              		.loc 1 1018 0 discriminator 3
 1413 06fa 7B69     		ldr	r3, [r7, #20]
 1414 06fc 9B00     		lsls	r3, r3, #2
 1415 06fe FA68     		ldr	r2, [r7, #12]
 1416 0700 1A44     		add	r2, r2, r3
 1417 0702 7B69     		ldr	r3, [r7, #20]
 1418 0704 9B00     		lsls	r3, r3, #2
 1419 0706 1946     		mov	r1, r3
 1420 0708 3B69     		ldr	r3, [r7, #16]
 1421 070a 0B44     		add	r3, r3, r1
 1422 070c 03F18843 		add	r3, r3, #1140850688
 1423 0710 03F5C043 		add	r3, r3, #24576
 1424 0714 1946     		mov	r1, r3
 1425 0716 1368     		ldr	r3, [r2]
 1426 0718 0B60     		str	r3, [r1]
1016:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1427              		.loc 1 1016 0 discriminator 3
 1428 071a 7B69     		ldr	r3, [r7, #20]
 1429 071c 0133     		adds	r3, r3, #1
 1430 071e 7B61     		str	r3, [r7, #20]
 1431              	.L88:
1016:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1432              		.loc 1 1016 0 is_stmt 0 discriminator 1
 1433 0720 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1434 0722 7A69     		ldr	r2, [r7, #20]
 1435 0724 9A42     		cmp	r2, r3
 1436 0726 E8DB     		blt	.L89
1019:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1020:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1021:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1022:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1023:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1024:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + (ui8BN1Size % 2));
 1437              		.loc 1 1024 0 is_stmt 1
 1438 0728 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1439 072a 03F00102 		and	r2, r3, #1
 1440 072e 7B69     		ldr	r3, [r7, #20]
 1441 0730 1344     		add	r3, r3, r2
 1442 0732 9B00     		lsls	r3, r3, #2
 1443 0734 1A46     		mov	r2, r3
 1444 0736 3B69     		ldr	r3, [r7, #16]
 1445 0738 1344     		add	r3, r3, r2
 1446 073a 3B61     		str	r3, [r7, #16]
1025:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1026:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1027:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1028:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the big number 2 will be stored.
1029:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1030:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 1447              		.loc 1 1030 0
 1448 073c 234A     		ldr	r2, .L92+8
 1449 073e 3B69     		ldr	r3, [r7, #16]
 1450 0740 9B08     		lsrs	r3, r3, #2
 1451 0742 1360     		str	r3, [r2]
1031:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1032:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1033:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the big number 2 in PKA RAM.
1034:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1035:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ui8BN2Size; i++)
 1452              		.loc 1 1035 0
 1453 0744 0023     		movs	r3, #0
 1454 0746 7B61     		str	r3, [r7, #20]
 1455 0748 12E0     		b	.L90
 1456              	.L91:
1036:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1037:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32BN2[i];
 1457              		.loc 1 1037 0 discriminator 3
 1458 074a 7B69     		ldr	r3, [r7, #20]
 1459 074c 9B00     		lsls	r3, r3, #2
 1460 074e 7A68     		ldr	r2, [r7, #4]
 1461 0750 1A44     		add	r2, r2, r3
 1462 0752 7B69     		ldr	r3, [r7, #20]
 1463 0754 9B00     		lsls	r3, r3, #2
 1464 0756 1946     		mov	r1, r3
 1465 0758 3B69     		ldr	r3, [r7, #16]
 1466 075a 0B44     		add	r3, r3, r1
 1467 075c 03F18843 		add	r3, r3, #1140850688
 1468 0760 03F5C043 		add	r3, r3, #24576
 1469 0764 1946     		mov	r1, r3
 1470 0766 1368     		ldr	r3, [r2]
 1471 0768 0B60     		str	r3, [r1]
1035:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1472              		.loc 1 1035 0 discriminator 3
 1473 076a 7B69     		ldr	r3, [r7, #20]
 1474 076c 0133     		adds	r3, r3, #1
 1475 076e 7B61     		str	r3, [r7, #20]
 1476              	.L90:
1035:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1477              		.loc 1 1035 0 is_stmt 0 discriminator 1
 1478 0770 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1479 0772 7A69     		ldr	r2, [r7, #20]
 1480 0774 9A42     		cmp	r2, r3
 1481 0776 E8DB     		blt	.L91
1038:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1039:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1040:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1041:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1042:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1043:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + (ui8BN2Size % 2));
 1482              		.loc 1 1043 0 is_stmt 1
 1483 0778 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1484 077a 03F00102 		and	r2, r3, #1
 1485 077e 7B69     		ldr	r3, [r7, #20]
 1486 0780 1344     		add	r3, r3, r2
 1487 0782 9B00     		lsls	r3, r3, #2
 1488 0784 1A46     		mov	r2, r3
 1489 0786 3B69     		ldr	r3, [r7, #16]
 1490 0788 1344     		add	r3, r3, r2
 1491 078a 3B61     		str	r3, [r7, #16]
1044:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1045:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1046:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Copy the result vector address location.
1047:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1048:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 1492              		.loc 1 1048 0
 1493 078c 3B69     		ldr	r3, [r7, #16]
 1494 078e 03F18843 		add	r3, r3, #1140850688
 1495 0792 03F5C043 		add	r3, r3, #24576
 1496 0796 3A6A     		ldr	r2, [r7, #32]
 1497 0798 1360     		str	r3, [r2]
1049:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1050:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1051:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load C ptr with the result location in PKA RAM.
1052:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1053:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_CPTR) ) = offset >> 2;
 1498              		.loc 1 1053 0
 1499 079a 0D4A     		ldr	r2, .L92+12
 1500 079c 3B69     		ldr	r3, [r7, #16]
 1501 079e 9B08     		lsrs	r3, r3, #2
 1502 07a0 1360     		str	r3, [r2]
1054:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1055:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1056:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load respective length registers.
1057:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1058:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8BN1Size;
 1503              		.loc 1 1058 0
 1504 07a2 0C4A     		ldr	r2, .L92+16
 1505 07a4 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1506 07a6 1360     		str	r3, [r2]
1059:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8BN2Size;
 1507              		.loc 1 1059 0
 1508 07a8 0B4A     		ldr	r2, .L92+20
 1509 07aa BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1510 07ac 1360     		str	r3, [r2]
1060:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1061:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1062:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Set the function for the add operation and start the operation.
1063:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1064:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_ADD);
 1511              		.loc 1 1064 0
 1512 07ae 054B     		ldr	r3, .L92
 1513 07b0 48F21002 		movw	r2, #32784
 1514 07b4 1A60     		str	r2, [r3]
1065:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1066:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1515              		.loc 1 1066 0
 1516 07b6 0023     		movs	r3, #0
 1517              	.L87:
1067:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 1518              		.loc 1 1067 0
 1519 07b8 1846     		mov	r0, r3
 1520 07ba 1C37     		adds	r7, r7, #28
 1521              		.cfi_def_cfa_offset 4
 1522 07bc BD46     		mov	sp, r7
 1523              		.cfi_def_cfa_register 13
 1524              		@ sp needed
 1525 07be 80BC     		pop	{r7}
 1526              		.cfi_restore 7
 1527              		.cfi_def_cfa_offset 0
 1528 07c0 7047     		bx	lr
 1529              	.L93:
 1530 07c2 00BF     		.align	2
 1531              	.L92:
 1532 07c4 1C400044 		.word	1140867100
 1533 07c8 00400044 		.word	1140867072
 1534 07cc 04400044 		.word	1140867076
 1535 07d0 08400044 		.word	1140867080
 1536 07d4 10400044 		.word	1140867088
 1537 07d8 14400044 		.word	1140867092
 1538              		.cfi_endproc
 1539              	.LFE14:
 1541              		.align	1
 1542              		.global	PKABigNumAddGetResult
 1543              		.syntax unified
 1544              		.thumb
 1545              		.thumb_func
 1546              		.fpu softvfp
 1548              	PKABigNumAddGetResult:
 1549              	.LFB15:
1068:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1069:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
1070:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
1071:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Gets the result of the addition operation on two big number.
1072:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1073:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result
1074:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! needs to be stored.
1075:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32Len is the address of the variable containing the length of
1076:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! the buffer.  After the operation the actual length of the resultant is
1077:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! stored at this address.
1078:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1079:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! was provided by the start function \sa PKABigNumAddStart().
1080:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1081:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function gets the result of the addition operation on two big numbers,
1082:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! previously started using the function \sa PKABigNumAddStart().
1083:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1084:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \return Returns:
1085:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1086:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1087:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! the operation.
1088:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1089:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1090:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW if the length of the provided buffer is less
1091:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! then the length of the result. 
1092:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
1093:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
1094:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
1095:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKABigNumAddGetResult(uint32_t* pui32ResultBuf, uint32_t* pui32Len,
1096:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                       uint32_t ui32ResVectorLoc)
1097:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 1550              		.loc 1 1097 0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 32
 1553              		@ frame_needed = 1, uses_anonymous_args = 0
 1554              		@ link register save eliminated.
 1555 07dc 80B4     		push	{r7}
 1556              		.cfi_def_cfa_offset 4
 1557              		.cfi_offset 7, -4
 1558 07de 89B0     		sub	sp, sp, #36
 1559              		.cfi_def_cfa_offset 40
 1560 07e0 00AF     		add	r7, sp, #0
 1561              		.cfi_def_cfa_register 7
 1562 07e2 F860     		str	r0, [r7, #12]
 1563 07e4 B960     		str	r1, [r7, #8]
 1564 07e6 7A60     		str	r2, [r7, #4]
1098:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t regMSWVal;
1099:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t len;
1100:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
1101:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1102:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1103:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check for the arguments.
1104:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1105:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
1106:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32Len);
1107:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1108:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1109:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1110:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1111:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Verify that the operation is complete.
1112:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1113:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1565              		.loc 1 1113 0
 1566 07e8 224B     		ldr	r3, .L101
 1567 07ea 1B68     		ldr	r3, [r3]
 1568 07ec 03F40043 		and	r3, r3, #32768
 1569 07f0 002B     		cmp	r3, #0
 1570 07f2 01D0     		beq	.L95
1114:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1115:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1571              		.loc 1 1115 0
 1572 07f4 0723     		movs	r3, #7
 1573 07f6 37E0     		b	.L96
 1574              	.L95:
1116:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1117:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1118:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1119:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Get the MSW register value.
1120:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1121:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     regMSWVal = HWREG(PKA_MSW);
 1575              		.loc 1 1121 0
 1576 07f8 1F4B     		ldr	r3, .L101+4
 1577 07fa 1B68     		ldr	r3, [r3]
 1578 07fc BB61     		str	r3, [r7, #24]
1122:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1123:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1124:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
1125:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1126:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 1579              		.loc 1 1126 0
 1580 07fe BB69     		ldr	r3, [r7, #24]
 1581 0800 03F40043 		and	r3, r3, #32768
 1582 0804 002B     		cmp	r3, #0
 1583 0806 01D0     		beq	.L97
1127:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1128:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_RESULT_0);
 1584              		.loc 1 1128 0
 1585 0808 0423     		movs	r3, #4
 1586 080a 2DE0     		b	.L96
 1587              	.L97:
1129:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1130:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1131:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1132:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Get the length of the result.
1133:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1134:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 1588              		.loc 1 1134 0
 1589 080c BB69     		ldr	r3, [r7, #24]
 1590 080e C3F30A02 		ubfx	r2, r3, #0, #11
1135:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1591              		.loc 1 1135 0
 1592 0812 7B68     		ldr	r3, [r7, #4]
 1593 0814 03F13C43 		add	r3, r3, #-1140850688
 1594 0818 A3F5C043 		sub	r3, r3, #24576
 1595 081c 9B08     		lsrs	r3, r3, #2
1134:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1596              		.loc 1 1134 0
 1597 081e D31A     		subs	r3, r2, r3
 1598 0820 0133     		adds	r3, r3, #1
 1599 0822 7B61     		str	r3, [r7, #20]
1136:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1137:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1138:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Make sure that the supplied result buffer is adequate to store the
1139:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // resultant data.
1140:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1141:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if(*pui32Len < len)
 1600              		.loc 1 1141 0
 1601 0824 BB68     		ldr	r3, [r7, #8]
 1602 0826 1B68     		ldr	r3, [r3]
 1603 0828 7A69     		ldr	r2, [r7, #20]
 1604 082a 9A42     		cmp	r2, r3
 1605 082c 01D9     		bls	.L98
1142:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1143:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 1606              		.loc 1 1143 0
 1607 082e 0323     		movs	r3, #3
 1608 0830 1AE0     		b	.L96
 1609              	.L98:
1144:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1145:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1146:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1147:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Copy the length.
1148:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1149:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     *pui32Len = len;
 1610              		.loc 1 1149 0
 1611 0832 BB68     		ldr	r3, [r7, #8]
 1612 0834 7A69     		ldr	r2, [r7, #20]
 1613 0836 1A60     		str	r2, [r3]
1150:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1151:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1152:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Copy the result from vector C into the provided buffer.
1153:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < *pui32Len; i++)
 1614              		.loc 1 1153 0
 1615 0838 0023     		movs	r3, #0
 1616 083a FB61     		str	r3, [r7, #28]
 1617 083c 0EE0     		b	.L99
 1618              	.L100:
1154:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1155:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         pui32ResultBuf[i] = HWREG( (ui32ResVectorLoc +  4*i) );
 1619              		.loc 1 1155 0 discriminator 3
 1620 083e FB69     		ldr	r3, [r7, #28]
 1621 0840 9B00     		lsls	r3, r3, #2
 1622 0842 1A46     		mov	r2, r3
 1623 0844 7B68     		ldr	r3, [r7, #4]
 1624 0846 1344     		add	r3, r3, r2
 1625 0848 1946     		mov	r1, r3
 1626 084a FB69     		ldr	r3, [r7, #28]
 1627 084c 9B00     		lsls	r3, r3, #2
 1628 084e FA68     		ldr	r2, [r7, #12]
 1629 0850 1344     		add	r3, r3, r2
 1630 0852 0A68     		ldr	r2, [r1]
 1631 0854 1A60     		str	r2, [r3]
1153:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1632              		.loc 1 1153 0 discriminator 3
 1633 0856 FB69     		ldr	r3, [r7, #28]
 1634 0858 0133     		adds	r3, r3, #1
 1635 085a FB61     		str	r3, [r7, #28]
 1636              	.L99:
1153:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1637              		.loc 1 1153 0 is_stmt 0 discriminator 1
 1638 085c BB68     		ldr	r3, [r7, #8]
 1639 085e 1A68     		ldr	r2, [r3]
 1640 0860 FB69     		ldr	r3, [r7, #28]
 1641 0862 9A42     		cmp	r2, r3
 1642 0864 EBD8     		bhi	.L100
1156:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1157:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1158:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1643              		.loc 1 1158 0 is_stmt 1
 1644 0866 0023     		movs	r3, #0
 1645              	.L96:
1159:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 1646              		.loc 1 1159 0
 1647 0868 1846     		mov	r0, r3
 1648 086a 2437     		adds	r7, r7, #36
 1649              		.cfi_def_cfa_offset 4
 1650 086c BD46     		mov	sp, r7
 1651              		.cfi_def_cfa_register 13
 1652              		@ sp needed
 1653 086e 80BC     		pop	{r7}
 1654              		.cfi_restore 7
 1655              		.cfi_def_cfa_offset 0
 1656 0870 7047     		bx	lr
 1657              	.L102:
 1658 0872 00BF     		.align	2
 1659              	.L101:
 1660 0874 1C400044 		.word	1140867100
 1661 0878 24400044 		.word	1140867108
 1662              		.cfi_endproc
 1663              	.LFE15:
 1665              		.align	1
 1666              		.global	PKAECCMultiplyStart
 1667              		.syntax unified
 1668              		.thumb
 1669              		.thumb_func
 1670              		.fpu softvfp
 1672              	PKAECCMultiplyStart:
 1673              	.LFB16:
1160:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1161:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
1162:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
1163:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Starts ECC Multiplication.
1164:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1165:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32Scalar is pointer to the buffer containing the scalar
1166:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! value to be multiplied.
1167:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ptEcPt is the pointer to the structure containing the
1168:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! elliptic curve point to be multiplied.  The point should be on the given
1169:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! curve.
1170:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ptCurve is the pointer to the structure containing the curve
1171:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! info.
1172:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
1173:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! which will be set by this function.
1174:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1175:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function starts the Elliptical curve cryptography (ECC) point
1176:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! multiplication operation on the EC point and the scalar value.
1177:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1178:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!\return Returns: 
1179:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
1180:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
1181:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! some other operation.
1182:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
1183:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
1184:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
1185:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKAECCMultiplyStart(uint32_t* pui32Scalar, tECPt* ptEcPt,
1186:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                     tECCCurveInfo* ptCurve, uint32_t* pui32ResultVector)
1187:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 1674              		.loc 1 1187 0
 1675              		.cfi_startproc
 1676              		@ args = 0, pretend = 0, frame = 32
 1677              		@ frame_needed = 1, uses_anonymous_args = 0
 1678              		@ link register save eliminated.
 1679 087c 80B4     		push	{r7}
 1680              		.cfi_def_cfa_offset 4
 1681              		.cfi_offset 7, -4
 1682 087e 89B0     		sub	sp, sp, #36
 1683              		.cfi_def_cfa_offset 40
 1684 0880 00AF     		add	r7, sp, #0
 1685              		.cfi_def_cfa_register 7
 1686 0882 F860     		str	r0, [r7, #12]
 1687 0884 B960     		str	r1, [r7, #8]
 1688 0886 7A60     		str	r2, [r7, #4]
 1689 0888 3B60     		str	r3, [r7]
1188:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint8_t extraBuf;
1189:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t offset;
1190:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
1191:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1192:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1193:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check for the arguments.
1194:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1195:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32Scalar);
1196:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptEcPt);
1197:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptEcPt->pui32X);
1198:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptEcPt->pui32Y);
1199:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptCurve);
1200:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(ptCurve->ui8Size <= PKA_MAX_CURVE_SIZE_32_BIT_WORD);
1201:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32ResultVector);
1202:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1203:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset = 0;
 1690              		.loc 1 1203 0
 1691 088a 0023     		movs	r3, #0
 1692 088c BB61     		str	r3, [r7, #24]
1204:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1205:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1206:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Make sure no PKA operation is in progress.
1207:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1208:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1693              		.loc 1 1208 0
 1694 088e 8B4B     		ldr	r3, .L118
 1695 0890 1B68     		ldr	r3, [r3]
 1696 0892 03F40043 		and	r3, r3, #32768
 1697 0896 002B     		cmp	r3, #0
 1698 0898 01D0     		beq	.L104
1209:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1210:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1699              		.loc 1 1210 0
 1700 089a 0723     		movs	r3, #7
 1701 089c 09E1     		b	.L105
 1702              	.L104:
1211:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1212:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1213:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1214:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Calculate the extra buffer requirement.
1215:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1216:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     extraBuf = 2 + ptCurve->ui8Size % 2;
 1703              		.loc 1 1216 0
 1704 089e 7B68     		ldr	r3, [r7, #4]
 1705 08a0 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1706 08a2 03F00103 		and	r3, r3, #1
 1707 08a6 DBB2     		uxtb	r3, r3
 1708 08a8 0233     		adds	r3, r3, #2
 1709 08aa FB75     		strb	r3, [r7, #23]
1217:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1218:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1219:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1220:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the scalar will be stored.
1221:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1222:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG((PKA_APTR)) = offset >> 2;
 1710              		.loc 1 1222 0
 1711 08ac 844A     		ldr	r2, .L118+4
 1712 08ae BB69     		ldr	r3, [r7, #24]
 1713 08b0 9B08     		lsrs	r3, r3, #2
 1714 08b2 1360     		str	r3, [r2]
1223:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1224:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1225:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the scalar in PKA RAM.
1226:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1227:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1715              		.loc 1 1227 0
 1716 08b4 0023     		movs	r3, #0
 1717 08b6 FB61     		str	r3, [r7, #28]
 1718 08b8 11E0     		b	.L106
 1719              	.L107:
1228:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1229:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = *pui32Scalar++;
 1720              		.loc 1 1229 0 discriminator 3
 1721 08ba FA68     		ldr	r2, [r7, #12]
 1722 08bc 131D     		adds	r3, r2, #4
 1723 08be FB60     		str	r3, [r7, #12]
 1724 08c0 FB69     		ldr	r3, [r7, #28]
 1725 08c2 9B00     		lsls	r3, r3, #2
 1726 08c4 1946     		mov	r1, r3
 1727 08c6 BB69     		ldr	r3, [r7, #24]
 1728 08c8 0B44     		add	r3, r3, r1
 1729 08ca 03F18843 		add	r3, r3, #1140850688
 1730 08ce 03F5C043 		add	r3, r3, #24576
 1731 08d2 1946     		mov	r1, r3
 1732 08d4 1368     		ldr	r3, [r2]
 1733 08d6 0B60     		str	r3, [r1]
1227:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1734              		.loc 1 1227 0 discriminator 3
 1735 08d8 FB69     		ldr	r3, [r7, #28]
 1736 08da 0133     		adds	r3, r3, #1
 1737 08dc FB61     		str	r3, [r7, #28]
 1738              	.L106:
1227:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1739              		.loc 1 1227 0 is_stmt 0 discriminator 1
 1740 08de 7B68     		ldr	r3, [r7, #4]
 1741 08e0 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1742 08e2 1A46     		mov	r2, r3
 1743 08e4 FB69     		ldr	r3, [r7, #28]
 1744 08e6 9342     		cmp	r3, r2
 1745 08e8 E7DB     		blt	.L107
1230:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1231:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1232:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1233:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset for the next data.
1234:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1235:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + (ptCurve->ui8Size % 2));
 1746              		.loc 1 1235 0 is_stmt 1
 1747 08ea 7B68     		ldr	r3, [r7, #4]
 1748 08ec 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1749 08ee 03F00102 		and	r2, r3, #1
 1750 08f2 FB69     		ldr	r3, [r7, #28]
 1751 08f4 1344     		add	r3, r3, r2
 1752 08f6 9B00     		lsls	r3, r3, #2
 1753 08f8 1A46     		mov	r2, r3
 1754 08fa BB69     		ldr	r3, [r7, #24]
 1755 08fc 1344     		add	r3, r3, r2
 1756 08fe BB61     		str	r3, [r7, #24]
1236:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1237:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1238:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1239:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the curve parameters will be stored.
1240:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1241:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG((PKA_BPTR)) = offset >> 2;
 1757              		.loc 1 1241 0
 1758 0900 704A     		ldr	r2, .L118+8
 1759 0902 BB69     		ldr	r3, [r7, #24]
 1760 0904 9B08     		lsrs	r3, r3, #2
 1761 0906 1360     		str	r3, [r2]
1242:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1243:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1244:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Write curve parameter 'p' as 1st part of vector B immediately
1245:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // following vector A at PKA RAM
1246:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1247:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1762              		.loc 1 1247 0
 1763 0908 0023     		movs	r3, #0
 1764 090a FB61     		str	r3, [r7, #28]
 1765 090c 13E0     		b	.L108
 1766              	.L109:
1248:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1249:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) =
1250:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 1767              		.loc 1 1250 0 discriminator 3
 1768 090e 7B68     		ldr	r3, [r7, #4]
 1769 0910 9A68     		ldr	r2, [r3, #8]
 1770 0912 FB69     		ldr	r3, [r7, #28]
 1771 0914 9B00     		lsls	r3, r3, #2
 1772 0916 1A44     		add	r2, r2, r3
1249:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 1773              		.loc 1 1249 0 discriminator 3
 1774 0918 FB69     		ldr	r3, [r7, #28]
 1775 091a 9B00     		lsls	r3, r3, #2
 1776 091c 1946     		mov	r1, r3
 1777 091e BB69     		ldr	r3, [r7, #24]
 1778 0920 0B44     		add	r3, r3, r1
 1779 0922 03F18843 		add	r3, r3, #1140850688
 1780 0926 03F5C043 		add	r3, r3, #24576
 1781 092a 1946     		mov	r1, r3
 1782              		.loc 1 1250 0 discriminator 3
 1783 092c 1368     		ldr	r3, [r2]
1249:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 1784              		.loc 1 1249 0 discriminator 3
 1785 092e 0B60     		str	r3, [r1]
1247:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1786              		.loc 1 1247 0 discriminator 3
 1787 0930 FB69     		ldr	r3, [r7, #28]
 1788 0932 0133     		adds	r3, r3, #1
 1789 0934 FB61     		str	r3, [r7, #28]
 1790              	.L108:
1247:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1791              		.loc 1 1247 0 is_stmt 0 discriminator 1
 1792 0936 7B68     		ldr	r3, [r7, #4]
 1793 0938 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1794 093a 1A46     		mov	r2, r3
 1795 093c FB69     		ldr	r3, [r7, #28]
 1796 093e 9342     		cmp	r3, r2
 1797 0940 E5DB     		blt	.L109
1251:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1252:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1253:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1254:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset for the next data.
1255:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1256:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 1798              		.loc 1 1256 0 is_stmt 1
 1799 0942 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1800 0944 FB69     		ldr	r3, [r7, #28]
 1801 0946 1344     		add	r3, r3, r2
 1802 0948 9B00     		lsls	r3, r3, #2
 1803 094a 1A46     		mov	r2, r3
 1804 094c BB69     		ldr	r3, [r7, #24]
 1805 094e 1344     		add	r3, r3, r2
 1806 0950 BB61     		str	r3, [r7, #24]
1257:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1258:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1259:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Copy curve parameter 'a' in PKA RAM.
1260:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1261:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1807              		.loc 1 1261 0
 1808 0952 0023     		movs	r3, #0
 1809 0954 FB61     		str	r3, [r7, #28]
 1810 0956 13E0     		b	.L110
 1811              	.L111:
1262:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1263:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32A[i];
 1812              		.loc 1 1263 0 discriminator 3
 1813 0958 7B68     		ldr	r3, [r7, #4]
 1814 095a 1A69     		ldr	r2, [r3, #16]
 1815 095c FB69     		ldr	r3, [r7, #28]
 1816 095e 9B00     		lsls	r3, r3, #2
 1817 0960 1A44     		add	r2, r2, r3
 1818 0962 FB69     		ldr	r3, [r7, #28]
 1819 0964 9B00     		lsls	r3, r3, #2
 1820 0966 1946     		mov	r1, r3
 1821 0968 BB69     		ldr	r3, [r7, #24]
 1822 096a 0B44     		add	r3, r3, r1
 1823 096c 03F18843 		add	r3, r3, #1140850688
 1824 0970 03F5C043 		add	r3, r3, #24576
 1825 0974 1946     		mov	r1, r3
 1826 0976 1368     		ldr	r3, [r2]
 1827 0978 0B60     		str	r3, [r1]
1261:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1828              		.loc 1 1261 0 discriminator 3
 1829 097a FB69     		ldr	r3, [r7, #28]
 1830 097c 0133     		adds	r3, r3, #1
 1831 097e FB61     		str	r3, [r7, #28]
 1832              	.L110:
1261:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1833              		.loc 1 1261 0 is_stmt 0 discriminator 1
 1834 0980 7B68     		ldr	r3, [r7, #4]
 1835 0982 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1836 0984 1A46     		mov	r2, r3
 1837 0986 FB69     		ldr	r3, [r7, #28]
 1838 0988 9342     		cmp	r3, r2
 1839 098a E5DB     		blt	.L111
1264:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1265:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1266:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1267:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset for the next data.
1268:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1269:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 1840              		.loc 1 1269 0 is_stmt 1
 1841 098c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1842 098e FB69     		ldr	r3, [r7, #28]
 1843 0990 1344     		add	r3, r3, r2
 1844 0992 9B00     		lsls	r3, r3, #2
 1845 0994 1A46     		mov	r2, r3
 1846 0996 BB69     		ldr	r3, [r7, #24]
 1847 0998 1344     		add	r3, r3, r2
 1848 099a BB61     		str	r3, [r7, #24]
1270:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1271:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1272:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Copy curve parameter 'b' in PKA RAM.
1273:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1274:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1849              		.loc 1 1274 0
 1850 099c 0023     		movs	r3, #0
 1851 099e FB61     		str	r3, [r7, #28]
 1852 09a0 13E0     		b	.L112
 1853              	.L113:
1275:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1276:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32B[i];
 1854              		.loc 1 1276 0 discriminator 3
 1855 09a2 7B68     		ldr	r3, [r7, #4]
 1856 09a4 5A69     		ldr	r2, [r3, #20]
 1857 09a6 FB69     		ldr	r3, [r7, #28]
 1858 09a8 9B00     		lsls	r3, r3, #2
 1859 09aa 1A44     		add	r2, r2, r3
 1860 09ac FB69     		ldr	r3, [r7, #28]
 1861 09ae 9B00     		lsls	r3, r3, #2
 1862 09b0 1946     		mov	r1, r3
 1863 09b2 BB69     		ldr	r3, [r7, #24]
 1864 09b4 0B44     		add	r3, r3, r1
 1865 09b6 03F18843 		add	r3, r3, #1140850688
 1866 09ba 03F5C043 		add	r3, r3, #24576
 1867 09be 1946     		mov	r1, r3
 1868 09c0 1368     		ldr	r3, [r2]
 1869 09c2 0B60     		str	r3, [r1]
1274:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1870              		.loc 1 1274 0 discriminator 3
 1871 09c4 FB69     		ldr	r3, [r7, #28]
 1872 09c6 0133     		adds	r3, r3, #1
 1873 09c8 FB61     		str	r3, [r7, #28]
 1874              	.L112:
1274:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1875              		.loc 1 1274 0 is_stmt 0 discriminator 1
 1876 09ca 7B68     		ldr	r3, [r7, #4]
 1877 09cc 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1878 09ce 1A46     		mov	r2, r3
 1879 09d0 FB69     		ldr	r3, [r7, #28]
 1880 09d2 9342     		cmp	r3, r2
 1881 09d4 E5DB     		blt	.L113
1277:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1278:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1279:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1280:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset for the next data.
1281:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1282:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 1882              		.loc 1 1282 0 is_stmt 1
 1883 09d6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1884 09d8 FB69     		ldr	r3, [r7, #28]
 1885 09da 1344     		add	r3, r3, r2
 1886 09dc 9B00     		lsls	r3, r3, #2
 1887 09de 1A46     		mov	r2, r3
 1888 09e0 BB69     		ldr	r3, [r7, #24]
 1889 09e2 1344     		add	r3, r3, r2
 1890 09e4 BB61     		str	r3, [r7, #24]
1283:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1284:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1285:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the C ptr with the offset address of the PKA RAM location
1286:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the Gx, Gy will be stored.
1287:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1288:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG((PKA_CPTR)) = offset >> 2;
 1891              		.loc 1 1288 0
 1892 09e6 384A     		ldr	r2, .L118+12
 1893 09e8 BB69     		ldr	r3, [r7, #24]
 1894 09ea 9B08     		lsrs	r3, r3, #2
 1895 09ec 1360     		str	r3, [r2]
1289:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1290:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1291:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Write elliptic curve point x co-ordinate value.
1292:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1293:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1896              		.loc 1 1293 0
 1897 09ee 0023     		movs	r3, #0
 1898 09f0 FB61     		str	r3, [r7, #28]
 1899 09f2 13E0     		b	.L114
 1900              	.L115:
1294:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1295:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt->pui32X[i];
 1901              		.loc 1 1295 0 discriminator 3
 1902 09f4 BB68     		ldr	r3, [r7, #8]
 1903 09f6 1A68     		ldr	r2, [r3]
 1904 09f8 FB69     		ldr	r3, [r7, #28]
 1905 09fa 9B00     		lsls	r3, r3, #2
 1906 09fc 1A44     		add	r2, r2, r3
 1907 09fe FB69     		ldr	r3, [r7, #28]
 1908 0a00 9B00     		lsls	r3, r3, #2
 1909 0a02 1946     		mov	r1, r3
 1910 0a04 BB69     		ldr	r3, [r7, #24]
 1911 0a06 0B44     		add	r3, r3, r1
 1912 0a08 03F18843 		add	r3, r3, #1140850688
 1913 0a0c 03F5C043 		add	r3, r3, #24576
 1914 0a10 1946     		mov	r1, r3
 1915 0a12 1368     		ldr	r3, [r2]
 1916 0a14 0B60     		str	r3, [r1]
1293:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1917              		.loc 1 1293 0 discriminator 3
 1918 0a16 FB69     		ldr	r3, [r7, #28]
 1919 0a18 0133     		adds	r3, r3, #1
 1920 0a1a FB61     		str	r3, [r7, #28]
 1921              	.L114:
1293:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1922              		.loc 1 1293 0 is_stmt 0 discriminator 1
 1923 0a1c 7B68     		ldr	r3, [r7, #4]
 1924 0a1e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1925 0a20 1A46     		mov	r2, r3
 1926 0a22 FB69     		ldr	r3, [r7, #28]
 1927 0a24 9342     		cmp	r3, r2
 1928 0a26 E5DB     		blt	.L115
1296:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1297:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1298:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1299:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset for the next data.
1300:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1301:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 1929              		.loc 1 1301 0 is_stmt 1
 1930 0a28 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1931 0a2a FB69     		ldr	r3, [r7, #28]
 1932 0a2c 1344     		add	r3, r3, r2
 1933 0a2e 9B00     		lsls	r3, r3, #2
 1934 0a30 1A46     		mov	r2, r3
 1935 0a32 BB69     		ldr	r3, [r7, #24]
 1936 0a34 1344     		add	r3, r3, r2
 1937 0a36 BB61     		str	r3, [r7, #24]
1302:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1303:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1304:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Write elliptic curve point y co-ordinate value.
1305:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1306:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1938              		.loc 1 1306 0
 1939 0a38 0023     		movs	r3, #0
 1940 0a3a FB61     		str	r3, [r7, #28]
 1941 0a3c 13E0     		b	.L116
 1942              	.L117:
1307:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1308:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt->pui32Y[i];
 1943              		.loc 1 1308 0 discriminator 3
 1944 0a3e BB68     		ldr	r3, [r7, #8]
 1945 0a40 5A68     		ldr	r2, [r3, #4]
 1946 0a42 FB69     		ldr	r3, [r7, #28]
 1947 0a44 9B00     		lsls	r3, r3, #2
 1948 0a46 1A44     		add	r2, r2, r3
 1949 0a48 FB69     		ldr	r3, [r7, #28]
 1950 0a4a 9B00     		lsls	r3, r3, #2
 1951 0a4c 1946     		mov	r1, r3
 1952 0a4e BB69     		ldr	r3, [r7, #24]
 1953 0a50 0B44     		add	r3, r3, r1
 1954 0a52 03F18843 		add	r3, r3, #1140850688
 1955 0a56 03F5C043 		add	r3, r3, #24576
 1956 0a5a 1946     		mov	r1, r3
 1957 0a5c 1368     		ldr	r3, [r2]
 1958 0a5e 0B60     		str	r3, [r1]
1306:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1959              		.loc 1 1306 0 discriminator 3
 1960 0a60 FB69     		ldr	r3, [r7, #28]
 1961 0a62 0133     		adds	r3, r3, #1
 1962 0a64 FB61     		str	r3, [r7, #28]
 1963              	.L116:
1306:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 1964              		.loc 1 1306 0 is_stmt 0 discriminator 1
 1965 0a66 7B68     		ldr	r3, [r7, #4]
 1966 0a68 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1967 0a6a 1A46     		mov	r2, r3
 1968 0a6c FB69     		ldr	r3, [r7, #28]
 1969 0a6e 9342     		cmp	r3, r2
 1970 0a70 E5DB     		blt	.L117
1309:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1310:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1311:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1312:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset for the next data.
1313:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1314:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 1971              		.loc 1 1314 0 is_stmt 1
 1972 0a72 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1973 0a74 FB69     		ldr	r3, [r7, #28]
 1974 0a76 1344     		add	r3, r3, r2
 1975 0a78 9B00     		lsls	r3, r3, #2
 1976 0a7a 1A46     		mov	r2, r3
 1977 0a7c BB69     		ldr	r3, [r7, #24]
 1978 0a7e 1344     		add	r3, r3, r2
 1979 0a80 BB61     		str	r3, [r7, #24]
1315:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1316:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1317:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the result location.
1318:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1319:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     *pui32ResultVector =  PKA_RAM_BASE + offset;
 1980              		.loc 1 1319 0
 1981 0a82 BB69     		ldr	r3, [r7, #24]
 1982 0a84 03F18843 		add	r3, r3, #1140850688
 1983 0a88 03F5C043 		add	r3, r3, #24576
 1984 0a8c 3A68     		ldr	r2, [r7]
 1985 0a8e 1360     		str	r3, [r2]
1320:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1321:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1322:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load D ptr with the result location in PKA RAM.
1323:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1324:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_DPTR) = offset >> 2;
 1986              		.loc 1 1324 0
 1987 0a90 0E4A     		ldr	r2, .L118+16
 1988 0a92 BB69     		ldr	r3, [r7, #24]
 1989 0a94 9B08     		lsrs	r3, r3, #2
 1990 0a96 1360     		str	r3, [r2]
1325:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1326:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1327:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load length registers.
1328:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1329:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_ALENGTH) = ptCurve->ui8Size;
 1991              		.loc 1 1329 0
 1992 0a98 7B68     		ldr	r3, [r7, #4]
 1993 0a9a 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 1994 0a9c 0C4B     		ldr	r3, .L118+20
 1995 0a9e 1A60     		str	r2, [r3]
1330:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_BLENGTH) = ptCurve->ui8Size;
 1996              		.loc 1 1330 0
 1997 0aa0 7B68     		ldr	r3, [r7, #4]
 1998 0aa2 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 1999 0aa4 0B4B     		ldr	r3, .L118+24
 2000 0aa6 1A60     		str	r2, [r3]
1331:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1332:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1333:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // set the PKA function to ECC-MULT and start the operation.
1334:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1335:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_FUNCTION) = 0x0000D000;
 2001              		.loc 1 1335 0
 2002 0aa8 044B     		ldr	r3, .L118
 2003 0aaa 4FF45042 		mov	r2, #53248
 2004 0aae 1A60     		str	r2, [r3]
1336:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1337:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     return (PKA_STATUS_SUCCESS);
 2005              		.loc 1 1337 0
 2006 0ab0 0023     		movs	r3, #0
 2007              	.L105:
1338:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 2008              		.loc 1 1338 0
 2009 0ab2 1846     		mov	r0, r3
 2010 0ab4 2437     		adds	r7, r7, #36
 2011              		.cfi_def_cfa_offset 4
 2012 0ab6 BD46     		mov	sp, r7
 2013              		.cfi_def_cfa_register 13
 2014              		@ sp needed
 2015 0ab8 80BC     		pop	{r7}
 2016              		.cfi_restore 7
 2017              		.cfi_def_cfa_offset 0
 2018 0aba 7047     		bx	lr
 2019              	.L119:
 2020              		.align	2
 2021              	.L118:
 2022 0abc 1C400044 		.word	1140867100
 2023 0ac0 00400044 		.word	1140867072
 2024 0ac4 04400044 		.word	1140867076
 2025 0ac8 08400044 		.word	1140867080
 2026 0acc 0C400044 		.word	1140867084
 2027 0ad0 10400044 		.word	1140867088
 2028 0ad4 14400044 		.word	1140867092
 2029              		.cfi_endproc
 2030              	.LFE16:
 2032              		.align	1
 2033              		.global	PKAECCMultiplyGetResult
 2034              		.syntax unified
 2035              		.thumb
 2036              		.thumb_func
 2037              		.fpu softvfp
 2039              	PKAECCMultiplyGetResult:
 2040              	.LFB17:
1339:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1340:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
1341:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
1342:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Gets the result of ECC Multiplication
1343:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1344:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ptOutEcPt is the pointer to the structure where the resultant EC
1345:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! point will be stored.  The callee is responsible to allocate the space for
1346:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! the ec point structure and the x and y co-ordinate as well.
1347:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1348:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! was provided by the start function \sa PKAECCMultiplyStart().
1349:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1350:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function gets the result of ecc point multiplication operation on the
1351:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! ec point and the scalar value, previously started using the function
1352:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \sa PKAECCMultiplyStart().
1353:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1354:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \return Returns:
1355:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1356:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1357:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! the operation.
1358:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1359:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1360:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
1361:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
1362:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
1363:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKAECCMultiplyGetResult(tECPt* ptOutEcPt, uint32_t ui32ResVectorLoc)
1364:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 2041              		.loc 1 1364 0
 2042              		.cfi_startproc
 2043              		@ args = 0, pretend = 0, frame = 24
 2044              		@ frame_needed = 1, uses_anonymous_args = 0
 2045              		@ link register save eliminated.
 2046 0ad8 80B4     		push	{r7}
 2047              		.cfi_def_cfa_offset 4
 2048              		.cfi_offset 7, -4
 2049 0ada 87B0     		sub	sp, sp, #28
 2050              		.cfi_def_cfa_offset 32
 2051 0adc 00AF     		add	r7, sp, #0
 2052              		.cfi_def_cfa_register 7
 2053 0ade 7860     		str	r0, [r7, #4]
 2054 0ae0 3960     		str	r1, [r7]
1365:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
1366:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t addr;
1367:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t regMSWVal;
1368:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t len;
1369:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1370:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1371:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check for the arguments.
1372:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1373:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptOutEcPt);
1374:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32X);
1375:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32Y);
1376:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1377:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1378:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1379:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1380:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Verify that the operation is completed.
1381:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1382:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2055              		.loc 1 1382 0
 2056 0ae2 324B     		ldr	r3, .L129
 2057 0ae4 1B68     		ldr	r3, [r3]
 2058 0ae6 03F40043 		and	r3, r3, #32768
 2059 0aea 002B     		cmp	r3, #0
 2060 0aec 01D0     		beq	.L121
1383:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1384:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2061              		.loc 1 1384 0
 2062 0aee 0723     		movs	r3, #7
 2063 0af0 56E0     		b	.L122
 2064              	.L121:
1385:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1386:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1387:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if(HWREG(PKA_SHIFT) == 0x00000000)
 2065              		.loc 1 1387 0
 2066 0af2 2F4B     		ldr	r3, .L129+4
 2067 0af4 1B68     		ldr	r3, [r3]
 2068 0af6 002B     		cmp	r3, #0
 2069 0af8 51D1     		bne	.L123
1388:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1389:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1390:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // Get the MSW register value.
1391:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1392:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         regMSWVal = HWREG(PKA_MSW);
 2070              		.loc 1 1392 0
 2071 0afa 2E4B     		ldr	r3, .L129+8
 2072 0afc 1B68     		ldr	r3, [r3]
 2073 0afe 3B61     		str	r3, [r7, #16]
1393:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1394:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1395:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // Check to make sure that the result vector is not all zeroes.
1396:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1397:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 2074              		.loc 1 1397 0
 2075 0b00 3B69     		ldr	r3, [r7, #16]
 2076 0b02 03F40043 		and	r3, r3, #32768
 2077 0b06 002B     		cmp	r3, #0
 2078 0b08 01D0     		beq	.L124
1398:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
1399:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             return (PKA_STATUS_RESULT_0);
 2079              		.loc 1 1399 0
 2080 0b0a 0423     		movs	r3, #4
 2081 0b0c 48E0     		b	.L122
 2082              	.L124:
1400:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         }
1401:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1402:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1403:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // Get the length of the result
1404:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1405:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 2083              		.loc 1 1405 0
 2084 0b0e 3B69     		ldr	r3, [r7, #16]
 2085 0b10 C3F30A02 		ubfx	r2, r3, #0, #11
1406:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2086              		.loc 1 1406 0
 2087 0b14 3B68     		ldr	r3, [r7]
 2088 0b16 03F13C43 		add	r3, r3, #-1140850688
 2089 0b1a A3F5C043 		sub	r3, r3, #24576
 2090 0b1e 9B08     		lsrs	r3, r3, #2
1405:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2091              		.loc 1 1405 0
 2092 0b20 D31A     		subs	r3, r2, r3
 2093 0b22 0133     		adds	r3, r3, #1
 2094 0b24 FB60     		str	r3, [r7, #12]
1407:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1408:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         addr = ui32ResVectorLoc;
 2095              		.loc 1 1408 0
 2096 0b26 3B68     		ldr	r3, [r7]
 2097 0b28 BB60     		str	r3, [r7, #8]
1409:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1410:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1411:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // copy the x co-ordinate value of the result from vector D into
1412:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // the \e ptOutEcPt.
1413:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1414:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         for(i = 0; i < len; i++)
 2098              		.loc 1 1414 0
 2099 0b2a 0023     		movs	r3, #0
 2100 0b2c 7B61     		str	r3, [r7, #20]
 2101 0b2e 0FE0     		b	.L125
 2102              	.L126:
1415:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
1416:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             ptOutEcPt->pui32X[i] = HWREG(addr + 4*i);
 2103              		.loc 1 1416 0 discriminator 3
 2104 0b30 7B69     		ldr	r3, [r7, #20]
 2105 0b32 9B00     		lsls	r3, r3, #2
 2106 0b34 1A46     		mov	r2, r3
 2107 0b36 BB68     		ldr	r3, [r7, #8]
 2108 0b38 1344     		add	r3, r3, r2
 2109 0b3a 1946     		mov	r1, r3
 2110 0b3c 7B68     		ldr	r3, [r7, #4]
 2111 0b3e 1A68     		ldr	r2, [r3]
 2112 0b40 7B69     		ldr	r3, [r7, #20]
 2113 0b42 9B00     		lsls	r3, r3, #2
 2114 0b44 1344     		add	r3, r3, r2
 2115 0b46 0A68     		ldr	r2, [r1]
 2116 0b48 1A60     		str	r2, [r3]
1414:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
 2117              		.loc 1 1414 0 discriminator 3
 2118 0b4a 7B69     		ldr	r3, [r7, #20]
 2119 0b4c 0133     		adds	r3, r3, #1
 2120 0b4e 7B61     		str	r3, [r7, #20]
 2121              	.L125:
1414:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
 2122              		.loc 1 1414 0 is_stmt 0 discriminator 1
 2123 0b50 7B69     		ldr	r3, [r7, #20]
 2124 0b52 FA68     		ldr	r2, [r7, #12]
 2125 0b54 9A42     		cmp	r2, r3
 2126 0b56 EBD8     		bhi	.L126
1417:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         }
1418:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1419:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         addr += 4 * (i + 2 + len % 2);
 2127              		.loc 1 1419 0 is_stmt 1
 2128 0b58 FB68     		ldr	r3, [r7, #12]
 2129 0b5a 03F00102 		and	r2, r3, #1
 2130 0b5e 7B69     		ldr	r3, [r7, #20]
 2131 0b60 1344     		add	r3, r3, r2
 2132 0b62 0233     		adds	r3, r3, #2
 2133 0b64 9B00     		lsls	r3, r3, #2
 2134 0b66 BA68     		ldr	r2, [r7, #8]
 2135 0b68 1344     		add	r3, r3, r2
 2136 0b6a BB60     		str	r3, [r7, #8]
1420:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1421:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1422:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // copy the y co-ordinate value of the result from vector D into
1423:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // the \e ptOutEcPt.
1424:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1425:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         for(i = 0; i < len; i++)
 2137              		.loc 1 1425 0
 2138 0b6c 0023     		movs	r3, #0
 2139 0b6e 7B61     		str	r3, [r7, #20]
 2140 0b70 0FE0     		b	.L127
 2141              	.L128:
1426:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
1427:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             ptOutEcPt->pui32Y[i] = HWREG(addr + 4*i);
 2142              		.loc 1 1427 0 discriminator 3
 2143 0b72 7B69     		ldr	r3, [r7, #20]
 2144 0b74 9B00     		lsls	r3, r3, #2
 2145 0b76 1A46     		mov	r2, r3
 2146 0b78 BB68     		ldr	r3, [r7, #8]
 2147 0b7a 1344     		add	r3, r3, r2
 2148 0b7c 1946     		mov	r1, r3
 2149 0b7e 7B68     		ldr	r3, [r7, #4]
 2150 0b80 5A68     		ldr	r2, [r3, #4]
 2151 0b82 7B69     		ldr	r3, [r7, #20]
 2152 0b84 9B00     		lsls	r3, r3, #2
 2153 0b86 1344     		add	r3, r3, r2
 2154 0b88 0A68     		ldr	r2, [r1]
 2155 0b8a 1A60     		str	r2, [r3]
1425:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
 2156              		.loc 1 1425 0 discriminator 3
 2157 0b8c 7B69     		ldr	r3, [r7, #20]
 2158 0b8e 0133     		adds	r3, r3, #1
 2159 0b90 7B61     		str	r3, [r7, #20]
 2160              	.L127:
1425:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
 2161              		.loc 1 1425 0 is_stmt 0 discriminator 1
 2162 0b92 7B69     		ldr	r3, [r7, #20]
 2163 0b94 FA68     		ldr	r2, [r7, #12]
 2164 0b96 9A42     		cmp	r2, r3
 2165 0b98 EBD8     		bhi	.L128
1428:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         }
1429:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1430:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_SUCCESS);
 2166              		.loc 1 1430 0 is_stmt 1
 2167 0b9a 0023     		movs	r3, #0
 2168 0b9c 00E0     		b	.L122
 2169              	.L123:
1431:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1432:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     else
1433:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1434:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_FAILURE);
 2170              		.loc 1 1434 0
 2171 0b9e 0123     		movs	r3, #1
 2172              	.L122:
1435:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1436:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 2173              		.loc 1 1436 0
 2174 0ba0 1846     		mov	r0, r3
 2175 0ba2 1C37     		adds	r7, r7, #28
 2176              		.cfi_def_cfa_offset 4
 2177 0ba4 BD46     		mov	sp, r7
 2178              		.cfi_def_cfa_register 13
 2179              		@ sp needed
 2180 0ba6 80BC     		pop	{r7}
 2181              		.cfi_restore 7
 2182              		.cfi_def_cfa_offset 0
 2183 0ba8 7047     		bx	lr
 2184              	.L130:
 2185 0baa 00BF     		.align	2
 2186              	.L129:
 2187 0bac 1C400044 		.word	1140867100
 2188 0bb0 18400044 		.word	1140867096
 2189 0bb4 24400044 		.word	1140867108
 2190              		.cfi_endproc
 2191              	.LFE17:
 2193              		.align	1
 2194              		.global	PKAECCMultGenPtStart
 2195              		.syntax unified
 2196              		.thumb
 2197              		.thumb_func
 2198              		.fpu softvfp
 2200              	PKAECCMultGenPtStart:
 2201              	.LFB18:
1437:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1438:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
1439:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
1440:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Starts the ECC Multiplication with Generator point.
1441:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1442:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32Scalar is the to pointer to the buffer containing the scalar
1443:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! value.
1444:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ptCurve is the pointer to the structure containing the curve
1445:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! info.
1446:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
1447:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! which will be set by this function.
1448:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1449:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function starts the ecc point multiplication operation of the
1450:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! scalar value with the well known generator point of the given curve.
1451:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1452:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!\return Returns: 
1453:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
1454:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
1455:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! some other operation.
1456:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
1457:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
1458:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
1459:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKAECCMultGenPtStart(uint32_t* pui32Scalar, tECCCurveInfo* ptCurve,
1460:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                      uint32_t* pui32ResultVector)
1461:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 2202              		.loc 1 1461 0
 2203              		.cfi_startproc
 2204              		@ args = 0, pretend = 0, frame = 32
 2205              		@ frame_needed = 1, uses_anonymous_args = 0
 2206              		@ link register save eliminated.
 2207 0bb8 80B4     		push	{r7}
 2208              		.cfi_def_cfa_offset 4
 2209              		.cfi_offset 7, -4
 2210 0bba 89B0     		sub	sp, sp, #36
 2211              		.cfi_def_cfa_offset 40
 2212 0bbc 00AF     		add	r7, sp, #0
 2213              		.cfi_def_cfa_register 7
 2214 0bbe F860     		str	r0, [r7, #12]
 2215 0bc0 B960     		str	r1, [r7, #8]
 2216 0bc2 7A60     		str	r2, [r7, #4]
1462:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint8_t extraBuf;
1463:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t offset;
1464:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
1465:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1466:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1467:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // check for the arguments.
1468:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1469:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32Scalar);
1470:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptCurve);
1471:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(ptCurve->ui8Size <= PKA_MAX_CURVE_SIZE_32_BIT_WORD);
1472:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32ResultVector);
1473:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1474:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset = 0;
 2217              		.loc 1 1474 0
 2218 0bc4 0023     		movs	r3, #0
 2219 0bc6 BB61     		str	r3, [r7, #24]
1475:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1476:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1477:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Make sure no operation is in progress.
1478:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1479:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2220              		.loc 1 1479 0
 2221 0bc8 8B4B     		ldr	r3, .L146
 2222 0bca 1B68     		ldr	r3, [r3]
 2223 0bcc 03F40043 		and	r3, r3, #32768
 2224 0bd0 002B     		cmp	r3, #0
 2225 0bd2 01D0     		beq	.L132
1480:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1481:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2226              		.loc 1 1481 0
 2227 0bd4 0723     		movs	r3, #7
 2228 0bd6 09E1     		b	.L133
 2229              	.L132:
1482:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1483:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1484:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1485:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Calculate the extra buffer requirement.
1486:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1487:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     extraBuf = 2 + ptCurve->ui8Size % 2;
 2230              		.loc 1 1487 0
 2231 0bd8 BB68     		ldr	r3, [r7, #8]
 2232 0bda 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2233 0bdc 03F00103 		and	r3, r3, #1
 2234 0be0 DBB2     		uxtb	r3, r3
 2235 0be2 0233     		adds	r3, r3, #2
 2236 0be4 FB75     		strb	r3, [r7, #23]
1488:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1489:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1490:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1491:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the scalar will be stored.
1492:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1493:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_APTR) = offset >> 2;
 2237              		.loc 1 1493 0
 2238 0be6 854A     		ldr	r2, .L146+4
 2239 0be8 BB69     		ldr	r3, [r7, #24]
 2240 0bea 9B08     		lsrs	r3, r3, #2
 2241 0bec 1360     		str	r3, [r2]
1494:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1495:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1496:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the scalar in PKA RAM.
1497:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1498:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2242              		.loc 1 1498 0
 2243 0bee 0023     		movs	r3, #0
 2244 0bf0 FB61     		str	r3, [r7, #28]
 2245 0bf2 11E0     		b	.L134
 2246              	.L135:
1499:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1500:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = *pui32Scalar++;
 2247              		.loc 1 1500 0 discriminator 3
 2248 0bf4 FA68     		ldr	r2, [r7, #12]
 2249 0bf6 131D     		adds	r3, r2, #4
 2250 0bf8 FB60     		str	r3, [r7, #12]
 2251 0bfa FB69     		ldr	r3, [r7, #28]
 2252 0bfc 9B00     		lsls	r3, r3, #2
 2253 0bfe 1946     		mov	r1, r3
 2254 0c00 BB69     		ldr	r3, [r7, #24]
 2255 0c02 0B44     		add	r3, r3, r1
 2256 0c04 03F18843 		add	r3, r3, #1140850688
 2257 0c08 03F5C043 		add	r3, r3, #24576
 2258 0c0c 1946     		mov	r1, r3
 2259 0c0e 1368     		ldr	r3, [r2]
 2260 0c10 0B60     		str	r3, [r1]
1498:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2261              		.loc 1 1498 0 discriminator 3
 2262 0c12 FB69     		ldr	r3, [r7, #28]
 2263 0c14 0133     		adds	r3, r3, #1
 2264 0c16 FB61     		str	r3, [r7, #28]
 2265              	.L134:
1498:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2266              		.loc 1 1498 0 is_stmt 0 discriminator 1
 2267 0c18 BB68     		ldr	r3, [r7, #8]
 2268 0c1a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2269 0c1c 1A46     		mov	r2, r3
 2270 0c1e FB69     		ldr	r3, [r7, #28]
 2271 0c20 9342     		cmp	r3, r2
 2272 0c22 E7DB     		blt	.L135
1501:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1502:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1503:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1504:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1505:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1506:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + (ptCurve->ui8Size % 2));
 2273              		.loc 1 1506 0 is_stmt 1
 2274 0c24 BB68     		ldr	r3, [r7, #8]
 2275 0c26 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2276 0c28 03F00102 		and	r2, r3, #1
 2277 0c2c FB69     		ldr	r3, [r7, #28]
 2278 0c2e 1344     		add	r3, r3, r2
 2279 0c30 9B00     		lsls	r3, r3, #2
 2280 0c32 1A46     		mov	r2, r3
 2281 0c34 BB69     		ldr	r3, [r7, #24]
 2282 0c36 1344     		add	r3, r3, r2
 2283 0c38 BB61     		str	r3, [r7, #24]
1507:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1508:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1509:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1510:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the curve parameters will be stored.
1511:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1512:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_BPTR) = offset >> 2;
 2284              		.loc 1 1512 0
 2285 0c3a 714A     		ldr	r2, .L146+8
 2286 0c3c BB69     		ldr	r3, [r7, #24]
 2287 0c3e 9B08     		lsrs	r3, r3, #2
 2288 0c40 1360     		str	r3, [r2]
1513:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1514:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1515:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Write curve parameter 'p' as 1st part of vector B.
1516:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1517:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2289              		.loc 1 1517 0
 2290 0c42 0023     		movs	r3, #0
 2291 0c44 FB61     		str	r3, [r7, #28]
 2292 0c46 13E0     		b	.L136
 2293              	.L137:
1518:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1519:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) =
1520:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2294              		.loc 1 1520 0 discriminator 3
 2295 0c48 BB68     		ldr	r3, [r7, #8]
 2296 0c4a 9A68     		ldr	r2, [r3, #8]
 2297 0c4c FB69     		ldr	r3, [r7, #28]
 2298 0c4e 9B00     		lsls	r3, r3, #2
 2299 0c50 1A44     		add	r2, r2, r3
1519:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2300              		.loc 1 1519 0 discriminator 3
 2301 0c52 FB69     		ldr	r3, [r7, #28]
 2302 0c54 9B00     		lsls	r3, r3, #2
 2303 0c56 1946     		mov	r1, r3
 2304 0c58 BB69     		ldr	r3, [r7, #24]
 2305 0c5a 0B44     		add	r3, r3, r1
 2306 0c5c 03F18843 		add	r3, r3, #1140850688
 2307 0c60 03F5C043 		add	r3, r3, #24576
 2308 0c64 1946     		mov	r1, r3
 2309              		.loc 1 1520 0 discriminator 3
 2310 0c66 1368     		ldr	r3, [r2]
1519:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2311              		.loc 1 1519 0 discriminator 3
 2312 0c68 0B60     		str	r3, [r1]
1517:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2313              		.loc 1 1517 0 discriminator 3
 2314 0c6a FB69     		ldr	r3, [r7, #28]
 2315 0c6c 0133     		adds	r3, r3, #1
 2316 0c6e FB61     		str	r3, [r7, #28]
 2317              	.L136:
1517:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2318              		.loc 1 1517 0 is_stmt 0 discriminator 1
 2319 0c70 BB68     		ldr	r3, [r7, #8]
 2320 0c72 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2321 0c74 1A46     		mov	r2, r3
 2322 0c76 FB69     		ldr	r3, [r7, #28]
 2323 0c78 9342     		cmp	r3, r2
 2324 0c7a E5DB     		blt	.L137
1521:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1522:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1523:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1524:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1525:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1526:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 2325              		.loc 1 1526 0 is_stmt 1
 2326 0c7c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2327 0c7e FB69     		ldr	r3, [r7, #28]
 2328 0c80 1344     		add	r3, r3, r2
 2329 0c82 9B00     		lsls	r3, r3, #2
 2330 0c84 1A46     		mov	r2, r3
 2331 0c86 BB69     		ldr	r3, [r7, #24]
 2332 0c88 1344     		add	r3, r3, r2
 2333 0c8a BB61     		str	r3, [r7, #24]
1527:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1528:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1529:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Write curve parameter 'a' in PKA RAM.
1530:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1531:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2334              		.loc 1 1531 0
 2335 0c8c 0023     		movs	r3, #0
 2336 0c8e FB61     		str	r3, [r7, #28]
 2337 0c90 13E0     		b	.L138
 2338              	.L139:
1532:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1533:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32A[i];
 2339              		.loc 1 1533 0 discriminator 3
 2340 0c92 BB68     		ldr	r3, [r7, #8]
 2341 0c94 1A69     		ldr	r2, [r3, #16]
 2342 0c96 FB69     		ldr	r3, [r7, #28]
 2343 0c98 9B00     		lsls	r3, r3, #2
 2344 0c9a 1A44     		add	r2, r2, r3
 2345 0c9c FB69     		ldr	r3, [r7, #28]
 2346 0c9e 9B00     		lsls	r3, r3, #2
 2347 0ca0 1946     		mov	r1, r3
 2348 0ca2 BB69     		ldr	r3, [r7, #24]
 2349 0ca4 0B44     		add	r3, r3, r1
 2350 0ca6 03F18843 		add	r3, r3, #1140850688
 2351 0caa 03F5C043 		add	r3, r3, #24576
 2352 0cae 1946     		mov	r1, r3
 2353 0cb0 1368     		ldr	r3, [r2]
 2354 0cb2 0B60     		str	r3, [r1]
1531:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2355              		.loc 1 1531 0 discriminator 3
 2356 0cb4 FB69     		ldr	r3, [r7, #28]
 2357 0cb6 0133     		adds	r3, r3, #1
 2358 0cb8 FB61     		str	r3, [r7, #28]
 2359              	.L138:
1531:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2360              		.loc 1 1531 0 is_stmt 0 discriminator 1
 2361 0cba BB68     		ldr	r3, [r7, #8]
 2362 0cbc 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2363 0cbe 1A46     		mov	r2, r3
 2364 0cc0 FB69     		ldr	r3, [r7, #28]
 2365 0cc2 9342     		cmp	r3, r2
 2366 0cc4 E5DB     		blt	.L139
1534:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1535:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1536:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1537:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1538:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1539:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 2367              		.loc 1 1539 0 is_stmt 1
 2368 0cc6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2369 0cc8 FB69     		ldr	r3, [r7, #28]
 2370 0cca 1344     		add	r3, r3, r2
 2371 0ccc 9B00     		lsls	r3, r3, #2
 2372 0cce 1A46     		mov	r2, r3
 2373 0cd0 BB69     		ldr	r3, [r7, #24]
 2374 0cd2 1344     		add	r3, r3, r2
 2375 0cd4 BB61     		str	r3, [r7, #24]
1540:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1541:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1542:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // write curve parameter 'b' in PKA RAM.
1543:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1544:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2376              		.loc 1 1544 0
 2377 0cd6 0023     		movs	r3, #0
 2378 0cd8 FB61     		str	r3, [r7, #28]
 2379 0cda 13E0     		b	.L140
 2380              	.L141:
1545:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1546:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32B[i];
 2381              		.loc 1 1546 0 discriminator 3
 2382 0cdc BB68     		ldr	r3, [r7, #8]
 2383 0cde 5A69     		ldr	r2, [r3, #20]
 2384 0ce0 FB69     		ldr	r3, [r7, #28]
 2385 0ce2 9B00     		lsls	r3, r3, #2
 2386 0ce4 1A44     		add	r2, r2, r3
 2387 0ce6 FB69     		ldr	r3, [r7, #28]
 2388 0ce8 9B00     		lsls	r3, r3, #2
 2389 0cea 1946     		mov	r1, r3
 2390 0cec BB69     		ldr	r3, [r7, #24]
 2391 0cee 0B44     		add	r3, r3, r1
 2392 0cf0 03F18843 		add	r3, r3, #1140850688
 2393 0cf4 03F5C043 		add	r3, r3, #24576
 2394 0cf8 1946     		mov	r1, r3
 2395 0cfa 1368     		ldr	r3, [r2]
 2396 0cfc 0B60     		str	r3, [r1]
1544:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2397              		.loc 1 1544 0 discriminator 3
 2398 0cfe FB69     		ldr	r3, [r7, #28]
 2399 0d00 0133     		adds	r3, r3, #1
 2400 0d02 FB61     		str	r3, [r7, #28]
 2401              	.L140:
1544:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2402              		.loc 1 1544 0 is_stmt 0 discriminator 1
 2403 0d04 BB68     		ldr	r3, [r7, #8]
 2404 0d06 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2405 0d08 1A46     		mov	r2, r3
 2406 0d0a FB69     		ldr	r3, [r7, #28]
 2407 0d0c 9342     		cmp	r3, r2
 2408 0d0e E5DB     		blt	.L141
1547:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1548:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1549:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1550:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1551:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1552:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 2409              		.loc 1 1552 0 is_stmt 1
 2410 0d10 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2411 0d12 FB69     		ldr	r3, [r7, #28]
 2412 0d14 1344     		add	r3, r3, r2
 2413 0d16 9B00     		lsls	r3, r3, #2
 2414 0d18 1A46     		mov	r2, r3
 2415 0d1a BB69     		ldr	r3, [r7, #24]
 2416 0d1c 1344     		add	r3, r3, r2
 2417 0d1e BB61     		str	r3, [r7, #24]
1553:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1554:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1555:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the C ptr with the offset address of the PKA RAM location
1556:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the Gx, Gy will be stored.
1557:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1558:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_CPTR) = offset >> 2;
 2418              		.loc 1 1558 0
 2419 0d20 384A     		ldr	r2, .L146+12
 2420 0d22 BB69     		ldr	r3, [r7, #24]
 2421 0d24 9B08     		lsrs	r3, r3, #2
 2422 0d26 1360     		str	r3, [r2]
1559:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1560:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1561:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Write x co-ordinate value of the Generator point in PKA RAM.
1562:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1563:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2423              		.loc 1 1563 0
 2424 0d28 0023     		movs	r3, #0
 2425 0d2a FB61     		str	r3, [r7, #28]
 2426 0d2c 13E0     		b	.L142
 2427              	.L143:
1564:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1565:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32Gx[i];
 2428              		.loc 1 1565 0 discriminator 3
 2429 0d2e BB68     		ldr	r3, [r7, #8]
 2430 0d30 9A69     		ldr	r2, [r3, #24]
 2431 0d32 FB69     		ldr	r3, [r7, #28]
 2432 0d34 9B00     		lsls	r3, r3, #2
 2433 0d36 1A44     		add	r2, r2, r3
 2434 0d38 FB69     		ldr	r3, [r7, #28]
 2435 0d3a 9B00     		lsls	r3, r3, #2
 2436 0d3c 1946     		mov	r1, r3
 2437 0d3e BB69     		ldr	r3, [r7, #24]
 2438 0d40 0B44     		add	r3, r3, r1
 2439 0d42 03F18843 		add	r3, r3, #1140850688
 2440 0d46 03F5C043 		add	r3, r3, #24576
 2441 0d4a 1946     		mov	r1, r3
 2442 0d4c 1368     		ldr	r3, [r2]
 2443 0d4e 0B60     		str	r3, [r1]
1563:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2444              		.loc 1 1563 0 discriminator 3
 2445 0d50 FB69     		ldr	r3, [r7, #28]
 2446 0d52 0133     		adds	r3, r3, #1
 2447 0d54 FB61     		str	r3, [r7, #28]
 2448              	.L142:
1563:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2449              		.loc 1 1563 0 is_stmt 0 discriminator 1
 2450 0d56 BB68     		ldr	r3, [r7, #8]
 2451 0d58 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2452 0d5a 1A46     		mov	r2, r3
 2453 0d5c FB69     		ldr	r3, [r7, #28]
 2454 0d5e 9342     		cmp	r3, r2
 2455 0d60 E5DB     		blt	.L143
1566:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1567:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1568:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1569:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1570:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1571:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 2456              		.loc 1 1571 0 is_stmt 1
 2457 0d62 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2458 0d64 FB69     		ldr	r3, [r7, #28]
 2459 0d66 1344     		add	r3, r3, r2
 2460 0d68 9B00     		lsls	r3, r3, #2
 2461 0d6a 1A46     		mov	r2, r3
 2462 0d6c BB69     		ldr	r3, [r7, #24]
 2463 0d6e 1344     		add	r3, r3, r2
 2464 0d70 BB61     		str	r3, [r7, #24]
1572:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1573:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1574:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Write y co-ordinate value of the Generator point in PKA RAM.
1575:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1576:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2465              		.loc 1 1576 0
 2466 0d72 0023     		movs	r3, #0
 2467 0d74 FB61     		str	r3, [r7, #28]
 2468 0d76 13E0     		b	.L144
 2469              	.L145:
1577:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1578:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32Gy[i];
 2470              		.loc 1 1578 0 discriminator 3
 2471 0d78 BB68     		ldr	r3, [r7, #8]
 2472 0d7a DA69     		ldr	r2, [r3, #28]
 2473 0d7c FB69     		ldr	r3, [r7, #28]
 2474 0d7e 9B00     		lsls	r3, r3, #2
 2475 0d80 1A44     		add	r2, r2, r3
 2476 0d82 FB69     		ldr	r3, [r7, #28]
 2477 0d84 9B00     		lsls	r3, r3, #2
 2478 0d86 1946     		mov	r1, r3
 2479 0d88 BB69     		ldr	r3, [r7, #24]
 2480 0d8a 0B44     		add	r3, r3, r1
 2481 0d8c 03F18843 		add	r3, r3, #1140850688
 2482 0d90 03F5C043 		add	r3, r3, #24576
 2483 0d94 1946     		mov	r1, r3
 2484 0d96 1368     		ldr	r3, [r2]
 2485 0d98 0B60     		str	r3, [r1]
1576:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2486              		.loc 1 1576 0 discriminator 3
 2487 0d9a FB69     		ldr	r3, [r7, #28]
 2488 0d9c 0133     		adds	r3, r3, #1
 2489 0d9e FB61     		str	r3, [r7, #28]
 2490              	.L144:
1576:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2491              		.loc 1 1576 0 is_stmt 0 discriminator 1
 2492 0da0 BB68     		ldr	r3, [r7, #8]
 2493 0da2 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2494 0da4 1A46     		mov	r2, r3
 2495 0da6 FB69     		ldr	r3, [r7, #28]
 2496 0da8 9342     		cmp	r3, r2
 2497 0daa E5DB     		blt	.L145
1579:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1580:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1581:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1582:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1583:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1584:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 2498              		.loc 1 1584 0 is_stmt 1
 2499 0dac FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2500 0dae FB69     		ldr	r3, [r7, #28]
 2501 0db0 1344     		add	r3, r3, r2
 2502 0db2 9B00     		lsls	r3, r3, #2
 2503 0db4 1A46     		mov	r2, r3
 2504 0db6 BB69     		ldr	r3, [r7, #24]
 2505 0db8 1344     		add	r3, r3, r2
 2506 0dba BB61     		str	r3, [r7, #24]
1585:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1586:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1587:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the result location.
1588:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1589:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     *pui32ResultVector =  PKA_RAM_BASE + offset;
 2507              		.loc 1 1589 0
 2508 0dbc BB69     		ldr	r3, [r7, #24]
 2509 0dbe 03F18843 		add	r3, r3, #1140850688
 2510 0dc2 03F5C043 		add	r3, r3, #24576
 2511 0dc6 7A68     		ldr	r2, [r7, #4]
 2512 0dc8 1360     		str	r3, [r2]
1590:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1591:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1592:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load D ptr with the result location in PKA RAM.
1593:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1594:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_DPTR) = offset >> 2;
 2513              		.loc 1 1594 0
 2514 0dca 0F4A     		ldr	r2, .L146+16
 2515 0dcc BB69     		ldr	r3, [r7, #24]
 2516 0dce 9B08     		lsrs	r3, r3, #2
 2517 0dd0 1360     		str	r3, [r2]
1595:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1596:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1597:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load length registers.
1598:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1599:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_ALENGTH) = ptCurve->ui8Size;
 2518              		.loc 1 1599 0
 2519 0dd2 BB68     		ldr	r3, [r7, #8]
 2520 0dd4 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 2521 0dd6 0D4B     		ldr	r3, .L146+20
 2522 0dd8 1A60     		str	r2, [r3]
1600:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_BLENGTH) = ptCurve->ui8Size;
 2523              		.loc 1 1600 0
 2524 0dda BB68     		ldr	r3, [r7, #8]
 2525 0ddc 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 2526 0dde 0C4B     		ldr	r3, .L146+24
 2527 0de0 1A60     		str	r2, [r3]
1601:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1602:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1603:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Set the PKA function to ECC-MULT and start the operation.
1604:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1605:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_FUNCTION) ) = 0x0000D000;
 2528              		.loc 1 1605 0
 2529 0de2 054B     		ldr	r3, .L146
 2530 0de4 4FF45042 		mov	r2, #53248
 2531 0de8 1A60     		str	r2, [r3]
1606:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1607:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     return (PKA_STATUS_SUCCESS);
 2532              		.loc 1 1607 0
 2533 0dea 0023     		movs	r3, #0
 2534              	.L133:
1608:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 2535              		.loc 1 1608 0
 2536 0dec 1846     		mov	r0, r3
 2537 0dee 2437     		adds	r7, r7, #36
 2538              		.cfi_def_cfa_offset 4
 2539 0df0 BD46     		mov	sp, r7
 2540              		.cfi_def_cfa_register 13
 2541              		@ sp needed
 2542 0df2 80BC     		pop	{r7}
 2543              		.cfi_restore 7
 2544              		.cfi_def_cfa_offset 0
 2545 0df4 7047     		bx	lr
 2546              	.L147:
 2547 0df6 00BF     		.align	2
 2548              	.L146:
 2549 0df8 1C400044 		.word	1140867100
 2550 0dfc 00400044 		.word	1140867072
 2551 0e00 04400044 		.word	1140867076
 2552 0e04 08400044 		.word	1140867080
 2553 0e08 0C400044 		.word	1140867084
 2554 0e0c 10400044 		.word	1140867088
 2555 0e10 14400044 		.word	1140867092
 2556              		.cfi_endproc
 2557              	.LFE18:
 2559              		.align	1
 2560              		.global	PKAECCMultGenPtGetResult
 2561              		.syntax unified
 2562              		.thumb
 2563              		.thumb_func
 2564              		.fpu softvfp
 2566              	PKAECCMultGenPtGetResult:
 2567              	.LFB19:
1609:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1610:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
1611:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
1612:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Gets the result of ECC Multiplication with Generator point.
1613:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1614:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ptOutEcPt is the pointer to the structure where the resultant EC
1615:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! point will be stored.  The callee is responsible to allocate the space for
1616:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! the ec point structure and the x and y co-ordinate as well.
1617:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1618:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! was provided by the start function \sa PKAECCMultGenPtStart().
1619:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1620:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function gets the result of ecc point multiplication operation on the
1621:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! scalar point and the known generator point on the curve, previously started
1622:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! using the function \sa PKAECCMultGenPtStart().
1623:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1624:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \return Returns:
1625:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1626:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1627:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! the operation.
1628:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1629:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1630:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
1631:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
1632:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
1633:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKAECCMultGenPtGetResult(tECPt* ptOutEcPt, uint32_t ui32ResVectorLoc)
1634:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 2568              		.loc 1 1634 0
 2569              		.cfi_startproc
 2570              		@ args = 0, pretend = 0, frame = 24
 2571              		@ frame_needed = 1, uses_anonymous_args = 0
 2572              		@ link register save eliminated.
 2573 0e14 80B4     		push	{r7}
 2574              		.cfi_def_cfa_offset 4
 2575              		.cfi_offset 7, -4
 2576 0e16 87B0     		sub	sp, sp, #28
 2577              		.cfi_def_cfa_offset 32
 2578 0e18 00AF     		add	r7, sp, #0
 2579              		.cfi_def_cfa_register 7
 2580 0e1a 7860     		str	r0, [r7, #4]
 2581 0e1c 3960     		str	r1, [r7]
1635:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
1636:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t regMSWVal;
1637:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t addr;
1638:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t len;
1639:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1640:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1641:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check for the arguments.
1642:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1643:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptOutEcPt);
1644:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32X);
1645:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32Y);
1646:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1647:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1648:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1649:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1650:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Verify that the operation is completed.
1651:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1652:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2582              		.loc 1 1652 0
 2583 0e1e 324B     		ldr	r3, .L157
 2584 0e20 1B68     		ldr	r3, [r3]
 2585 0e22 03F40043 		and	r3, r3, #32768
 2586 0e26 002B     		cmp	r3, #0
 2587 0e28 01D0     		beq	.L149
1653:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1654:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2588              		.loc 1 1654 0
 2589 0e2a 0723     		movs	r3, #7
 2590 0e2c 56E0     		b	.L150
 2591              	.L149:
1655:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1656:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1657:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if(HWREG(PKA_SHIFT) == 0x00000000)
 2592              		.loc 1 1657 0
 2593 0e2e 2F4B     		ldr	r3, .L157+4
 2594 0e30 1B68     		ldr	r3, [r3]
 2595 0e32 002B     		cmp	r3, #0
 2596 0e34 51D1     		bne	.L151
1658:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1659:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1660:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // Get the MSW register value.
1661:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1662:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         regMSWVal = HWREG(PKA_MSW);
 2597              		.loc 1 1662 0
 2598 0e36 2E4B     		ldr	r3, .L157+8
 2599 0e38 1B68     		ldr	r3, [r3]
 2600 0e3a 3B61     		str	r3, [r7, #16]
1663:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1664:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1665:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // Check to make sure that the result vector is not all zeroes.
1666:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1667:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 2601              		.loc 1 1667 0
 2602 0e3c 3B69     		ldr	r3, [r7, #16]
 2603 0e3e 03F40043 		and	r3, r3, #32768
 2604 0e42 002B     		cmp	r3, #0
 2605 0e44 01D0     		beq	.L152
1668:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
1669:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             return (PKA_STATUS_RESULT_0);
 2606              		.loc 1 1669 0
 2607 0e46 0423     		movs	r3, #4
 2608 0e48 48E0     		b	.L150
 2609              	.L152:
1670:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         }
1671:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1672:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1673:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // Get the length of the result.
1674:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1675:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 2610              		.loc 1 1675 0
 2611 0e4a 3B69     		ldr	r3, [r7, #16]
 2612 0e4c C3F30A02 		ubfx	r2, r3, #0, #11
1676:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2613              		.loc 1 1676 0
 2614 0e50 3B68     		ldr	r3, [r7]
 2615 0e52 03F13C43 		add	r3, r3, #-1140850688
 2616 0e56 A3F5C043 		sub	r3, r3, #24576
 2617 0e5a 9B08     		lsrs	r3, r3, #2
1675:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2618              		.loc 1 1675 0
 2619 0e5c D31A     		subs	r3, r2, r3
 2620 0e5e 0133     		adds	r3, r3, #1
 2621 0e60 FB60     		str	r3, [r7, #12]
1677:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1678:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         addr = ui32ResVectorLoc;
 2622              		.loc 1 1678 0
 2623 0e62 3B68     		ldr	r3, [r7]
 2624 0e64 BB60     		str	r3, [r7, #8]
1679:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1680:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1681:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // Copy the x co-ordinate value of the result from vector D into the
1682:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // EC point.
1683:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1684:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         for(i = 0; i < len; i++)
 2625              		.loc 1 1684 0
 2626 0e66 0023     		movs	r3, #0
 2627 0e68 7B61     		str	r3, [r7, #20]
 2628 0e6a 0FE0     		b	.L153
 2629              	.L154:
1685:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
1686:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             ptOutEcPt->pui32X[i] = HWREG( (addr + 4*i) );
 2630              		.loc 1 1686 0 discriminator 3
 2631 0e6c 7B69     		ldr	r3, [r7, #20]
 2632 0e6e 9B00     		lsls	r3, r3, #2
 2633 0e70 1A46     		mov	r2, r3
 2634 0e72 BB68     		ldr	r3, [r7, #8]
 2635 0e74 1344     		add	r3, r3, r2
 2636 0e76 1946     		mov	r1, r3
 2637 0e78 7B68     		ldr	r3, [r7, #4]
 2638 0e7a 1A68     		ldr	r2, [r3]
 2639 0e7c 7B69     		ldr	r3, [r7, #20]
 2640 0e7e 9B00     		lsls	r3, r3, #2
 2641 0e80 1344     		add	r3, r3, r2
 2642 0e82 0A68     		ldr	r2, [r1]
 2643 0e84 1A60     		str	r2, [r3]
1684:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
 2644              		.loc 1 1684 0 discriminator 3
 2645 0e86 7B69     		ldr	r3, [r7, #20]
 2646 0e88 0133     		adds	r3, r3, #1
 2647 0e8a 7B61     		str	r3, [r7, #20]
 2648              	.L153:
1684:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
 2649              		.loc 1 1684 0 is_stmt 0 discriminator 1
 2650 0e8c 7B69     		ldr	r3, [r7, #20]
 2651 0e8e FA68     		ldr	r2, [r7, #12]
 2652 0e90 9A42     		cmp	r2, r3
 2653 0e92 EBD8     		bhi	.L154
1687:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         }
1688:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1689:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         addr += 4 * (i + 2 + len % 2);
 2654              		.loc 1 1689 0 is_stmt 1
 2655 0e94 FB68     		ldr	r3, [r7, #12]
 2656 0e96 03F00102 		and	r2, r3, #1
 2657 0e9a 7B69     		ldr	r3, [r7, #20]
 2658 0e9c 1344     		add	r3, r3, r2
 2659 0e9e 0233     		adds	r3, r3, #2
 2660 0ea0 9B00     		lsls	r3, r3, #2
 2661 0ea2 BA68     		ldr	r2, [r7, #8]
 2662 0ea4 1344     		add	r3, r3, r2
 2663 0ea6 BB60     		str	r3, [r7, #8]
1690:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1691:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1692:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // Copy the y co-ordinate value of the result from vector D into the
1693:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // EC point.
1694:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1695:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         for(i = 0; i < len; i++)
 2664              		.loc 1 1695 0
 2665 0ea8 0023     		movs	r3, #0
 2666 0eaa 7B61     		str	r3, [r7, #20]
 2667 0eac 0FE0     		b	.L155
 2668              	.L156:
1696:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
1697:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             ptOutEcPt->pui32Y[i] = HWREG( (addr + 4*i) );
 2669              		.loc 1 1697 0 discriminator 3
 2670 0eae 7B69     		ldr	r3, [r7, #20]
 2671 0eb0 9B00     		lsls	r3, r3, #2
 2672 0eb2 1A46     		mov	r2, r3
 2673 0eb4 BB68     		ldr	r3, [r7, #8]
 2674 0eb6 1344     		add	r3, r3, r2
 2675 0eb8 1946     		mov	r1, r3
 2676 0eba 7B68     		ldr	r3, [r7, #4]
 2677 0ebc 5A68     		ldr	r2, [r3, #4]
 2678 0ebe 7B69     		ldr	r3, [r7, #20]
 2679 0ec0 9B00     		lsls	r3, r3, #2
 2680 0ec2 1344     		add	r3, r3, r2
 2681 0ec4 0A68     		ldr	r2, [r1]
 2682 0ec6 1A60     		str	r2, [r3]
1695:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
 2683              		.loc 1 1695 0 discriminator 3
 2684 0ec8 7B69     		ldr	r3, [r7, #20]
 2685 0eca 0133     		adds	r3, r3, #1
 2686 0ecc 7B61     		str	r3, [r7, #20]
 2687              	.L155:
1695:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
 2688              		.loc 1 1695 0 is_stmt 0 discriminator 1
 2689 0ece 7B69     		ldr	r3, [r7, #20]
 2690 0ed0 FA68     		ldr	r2, [r7, #12]
 2691 0ed2 9A42     		cmp	r2, r3
 2692 0ed4 EBD8     		bhi	.L156
1698:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         }
1699:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1700:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_SUCCESS);
 2693              		.loc 1 1700 0 is_stmt 1
 2694 0ed6 0023     		movs	r3, #0
 2695 0ed8 00E0     		b	.L150
 2696              	.L151:
1701:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1702:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     else
1703:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1704:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_FAILURE);
 2697              		.loc 1 1704 0
 2698 0eda 0123     		movs	r3, #1
 2699              	.L150:
1705:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1706:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 2700              		.loc 1 1706 0
 2701 0edc 1846     		mov	r0, r3
 2702 0ede 1C37     		adds	r7, r7, #28
 2703              		.cfi_def_cfa_offset 4
 2704 0ee0 BD46     		mov	sp, r7
 2705              		.cfi_def_cfa_register 13
 2706              		@ sp needed
 2707 0ee2 80BC     		pop	{r7}
 2708              		.cfi_restore 7
 2709              		.cfi_def_cfa_offset 0
 2710 0ee4 7047     		bx	lr
 2711              	.L158:
 2712 0ee6 00BF     		.align	2
 2713              	.L157:
 2714 0ee8 1C400044 		.word	1140867100
 2715 0eec 18400044 		.word	1140867096
 2716 0ef0 24400044 		.word	1140867108
 2717              		.cfi_endproc
 2718              	.LFE19:
 2720              		.align	1
 2721              		.global	PKAECCAddStart
 2722              		.syntax unified
 2723              		.thumb
 2724              		.thumb_func
 2725              		.fpu softvfp
 2727              	PKAECCAddStart:
 2728              	.LFB20:
1707:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1708:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
1709:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
1710:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Starts the ECC Addition.
1711:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1712:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ptEcPt1 is the pointer to the structure containing the first
1713:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! ecc point.
1714:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ptEcPt2 is the pointer to the structure containing the
1715:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! second ecc point.
1716:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ptCurve is the pointer to the structure containing the curve
1717:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! info.
1718:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
1719:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! which will be set by this function.
1720:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1721:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function starts the ecc point addition operation on the
1722:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! two given ec points and generates the resultant ecc point.
1723:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1724:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!\return Returns: 
1725:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
1726:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
1727:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! some other operation.
1728:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
1729:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
1730:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
1731:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKAECCAddStart(tECPt* ptEcPt1, tECPt* ptEcPt2,tECCCurveInfo* ptCurve,
1732:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****                uint32_t* pui32ResultVector)
1733:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 2729              		.loc 1 1733 0
 2730              		.cfi_startproc
 2731              		@ args = 0, pretend = 0, frame = 32
 2732              		@ frame_needed = 1, uses_anonymous_args = 0
 2733              		@ link register save eliminated.
 2734 0ef4 80B4     		push	{r7}
 2735              		.cfi_def_cfa_offset 4
 2736              		.cfi_offset 7, -4
 2737 0ef6 89B0     		sub	sp, sp, #36
 2738              		.cfi_def_cfa_offset 40
 2739 0ef8 00AF     		add	r7, sp, #0
 2740              		.cfi_def_cfa_register 7
 2741 0efa F860     		str	r0, [r7, #12]
 2742 0efc B960     		str	r1, [r7, #8]
 2743 0efe 7A60     		str	r2, [r7, #4]
 2744 0f00 3B60     		str	r3, [r7]
1734:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint8_t extraBuf;
1735:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t offset;
1736:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
1737:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1738:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1739:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check for the arguments.
1740:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1741:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptEcPt1);
1742:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptEcPt1->pui32X);
1743:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptEcPt1->pui32Y);
1744:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptEcPt2);
1745:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptEcPt2->pui32X);
1746:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptEcPt2->pui32Y);
1747:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptCurve);
1748:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != pui32ResultVector);
1749:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1750:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset = 0;
 2745              		.loc 1 1750 0
 2746 0f02 0023     		movs	r3, #0
 2747 0f04 BB61     		str	r3, [r7, #24]
1751:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1752:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1753:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Make sure no operation is in progress.
1754:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1755:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2748              		.loc 1 1755 0
 2749 0f06 894B     		ldr	r3, .L174
 2750 0f08 1B68     		ldr	r3, [r3]
 2751 0f0a 03F40043 		and	r3, r3, #32768
 2752 0f0e 002B     		cmp	r3, #0
 2753 0f10 01D0     		beq	.L160
1756:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1757:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2754              		.loc 1 1757 0
 2755 0f12 0723     		movs	r3, #7
 2756 0f14 04E1     		b	.L161
 2757              	.L160:
1758:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1759:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1760:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1761:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Calculate the extra buffer requirement.
1762:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1763:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     extraBuf = 2 + ptCurve->ui8Size % 2;
 2758              		.loc 1 1763 0
 2759 0f16 7B68     		ldr	r3, [r7, #4]
 2760 0f18 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2761 0f1a 03F00103 		and	r3, r3, #1
 2762 0f1e DBB2     		uxtb	r3, r3
 2763 0f20 0233     		adds	r3, r3, #2
 2764 0f22 FB75     		strb	r3, [r7, #23]
1764:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1765:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1766:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1767:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the first ecPt will be stored.
1768:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1769:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_APTR) = offset >> 2;
 2765              		.loc 1 1769 0
 2766 0f24 824A     		ldr	r2, .L174+4
 2767 0f26 BB69     		ldr	r3, [r7, #24]
 2768 0f28 9B08     		lsrs	r3, r3, #2
 2769 0f2a 1360     		str	r3, [r2]
1770:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1771:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1772:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the x co-ordinate value of the first EC point in PKA RAM.
1773:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1774:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2770              		.loc 1 1774 0
 2771 0f2c 0023     		movs	r3, #0
 2772 0f2e FB61     		str	r3, [r7, #28]
 2773 0f30 13E0     		b	.L162
 2774              	.L163:
1775:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1776:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt1->pui32X[i];
 2775              		.loc 1 1776 0 discriminator 3
 2776 0f32 FB68     		ldr	r3, [r7, #12]
 2777 0f34 1A68     		ldr	r2, [r3]
 2778 0f36 FB69     		ldr	r3, [r7, #28]
 2779 0f38 9B00     		lsls	r3, r3, #2
 2780 0f3a 1A44     		add	r2, r2, r3
 2781 0f3c FB69     		ldr	r3, [r7, #28]
 2782 0f3e 9B00     		lsls	r3, r3, #2
 2783 0f40 1946     		mov	r1, r3
 2784 0f42 BB69     		ldr	r3, [r7, #24]
 2785 0f44 0B44     		add	r3, r3, r1
 2786 0f46 03F18843 		add	r3, r3, #1140850688
 2787 0f4a 03F5C043 		add	r3, r3, #24576
 2788 0f4e 1946     		mov	r1, r3
 2789 0f50 1368     		ldr	r3, [r2]
 2790 0f52 0B60     		str	r3, [r1]
1774:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2791              		.loc 1 1774 0 discriminator 3
 2792 0f54 FB69     		ldr	r3, [r7, #28]
 2793 0f56 0133     		adds	r3, r3, #1
 2794 0f58 FB61     		str	r3, [r7, #28]
 2795              	.L162:
1774:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2796              		.loc 1 1774 0 is_stmt 0 discriminator 1
 2797 0f5a 7B68     		ldr	r3, [r7, #4]
 2798 0f5c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2799 0f5e 1A46     		mov	r2, r3
 2800 0f60 FB69     		ldr	r3, [r7, #28]
 2801 0f62 9342     		cmp	r3, r2
 2802 0f64 E5DB     		blt	.L163
1777:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1778:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1779:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1780:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1781:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1782:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 2803              		.loc 1 1782 0 is_stmt 1
 2804 0f66 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2805 0f68 FB69     		ldr	r3, [r7, #28]
 2806 0f6a 1344     		add	r3, r3, r2
 2807 0f6c 9B00     		lsls	r3, r3, #2
 2808 0f6e 1A46     		mov	r2, r3
 2809 0f70 BB69     		ldr	r3, [r7, #24]
 2810 0f72 1344     		add	r3, r3, r2
 2811 0f74 BB61     		str	r3, [r7, #24]
1783:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1784:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1785:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the y co-ordinate value of the first EC point in PKA RAM.
1786:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1787:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2812              		.loc 1 1787 0
 2813 0f76 0023     		movs	r3, #0
 2814 0f78 FB61     		str	r3, [r7, #28]
 2815 0f7a 13E0     		b	.L164
 2816              	.L165:
1788:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1789:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt1->pui32Y[i];
 2817              		.loc 1 1789 0 discriminator 3
 2818 0f7c FB68     		ldr	r3, [r7, #12]
 2819 0f7e 5A68     		ldr	r2, [r3, #4]
 2820 0f80 FB69     		ldr	r3, [r7, #28]
 2821 0f82 9B00     		lsls	r3, r3, #2
 2822 0f84 1A44     		add	r2, r2, r3
 2823 0f86 FB69     		ldr	r3, [r7, #28]
 2824 0f88 9B00     		lsls	r3, r3, #2
 2825 0f8a 1946     		mov	r1, r3
 2826 0f8c BB69     		ldr	r3, [r7, #24]
 2827 0f8e 0B44     		add	r3, r3, r1
 2828 0f90 03F18843 		add	r3, r3, #1140850688
 2829 0f94 03F5C043 		add	r3, r3, #24576
 2830 0f98 1946     		mov	r1, r3
 2831 0f9a 1368     		ldr	r3, [r2]
 2832 0f9c 0B60     		str	r3, [r1]
1787:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2833              		.loc 1 1787 0 discriminator 3
 2834 0f9e FB69     		ldr	r3, [r7, #28]
 2835 0fa0 0133     		adds	r3, r3, #1
 2836 0fa2 FB61     		str	r3, [r7, #28]
 2837              	.L164:
1787:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2838              		.loc 1 1787 0 is_stmt 0 discriminator 1
 2839 0fa4 7B68     		ldr	r3, [r7, #4]
 2840 0fa6 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2841 0fa8 1A46     		mov	r2, r3
 2842 0faa FB69     		ldr	r3, [r7, #28]
 2843 0fac 9342     		cmp	r3, r2
 2844 0fae E5DB     		blt	.L165
1790:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1791:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1792:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1793:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1794:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1795:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 2845              		.loc 1 1795 0 is_stmt 1
 2846 0fb0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2847 0fb2 FB69     		ldr	r3, [r7, #28]
 2848 0fb4 1344     		add	r3, r3, r2
 2849 0fb6 9B00     		lsls	r3, r3, #2
 2850 0fb8 1A46     		mov	r2, r3
 2851 0fba BB69     		ldr	r3, [r7, #24]
 2852 0fbc 1344     		add	r3, r3, r2
 2853 0fbe BB61     		str	r3, [r7, #24]
1796:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1797:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1798:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1799:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the curve parameters will be stored.
1800:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1801:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_BPTR) = offset >> 2;
 2854              		.loc 1 1801 0
 2855 0fc0 5C4A     		ldr	r2, .L174+8
 2856 0fc2 BB69     		ldr	r3, [r7, #24]
 2857 0fc4 9B08     		lsrs	r3, r3, #2
 2858 0fc6 1360     		str	r3, [r2]
1802:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1803:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1804:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Write curve parameter 'p' as 1st part of vector B
1805:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1806:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2859              		.loc 1 1806 0
 2860 0fc8 0023     		movs	r3, #0
 2861 0fca FB61     		str	r3, [r7, #28]
 2862 0fcc 13E0     		b	.L166
 2863              	.L167:
1807:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1808:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) =
1809:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2864              		.loc 1 1809 0 discriminator 3
 2865 0fce 7B68     		ldr	r3, [r7, #4]
 2866 0fd0 9A68     		ldr	r2, [r3, #8]
 2867 0fd2 FB69     		ldr	r3, [r7, #28]
 2868 0fd4 9B00     		lsls	r3, r3, #2
 2869 0fd6 1A44     		add	r2, r2, r3
1808:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2870              		.loc 1 1808 0 discriminator 3
 2871 0fd8 FB69     		ldr	r3, [r7, #28]
 2872 0fda 9B00     		lsls	r3, r3, #2
 2873 0fdc 1946     		mov	r1, r3
 2874 0fde BB69     		ldr	r3, [r7, #24]
 2875 0fe0 0B44     		add	r3, r3, r1
 2876 0fe2 03F18843 		add	r3, r3, #1140850688
 2877 0fe6 03F5C043 		add	r3, r3, #24576
 2878 0fea 1946     		mov	r1, r3
 2879              		.loc 1 1809 0 discriminator 3
 2880 0fec 1368     		ldr	r3, [r2]
1808:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2881              		.loc 1 1808 0 discriminator 3
 2882 0fee 0B60     		str	r3, [r1]
1806:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2883              		.loc 1 1806 0 discriminator 3
 2884 0ff0 FB69     		ldr	r3, [r7, #28]
 2885 0ff2 0133     		adds	r3, r3, #1
 2886 0ff4 FB61     		str	r3, [r7, #28]
 2887              	.L166:
1806:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2888              		.loc 1 1806 0 is_stmt 0 discriminator 1
 2889 0ff6 7B68     		ldr	r3, [r7, #4]
 2890 0ff8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2891 0ffa 1A46     		mov	r2, r3
 2892 0ffc FB69     		ldr	r3, [r7, #28]
 2893 0ffe 9342     		cmp	r3, r2
 2894 1000 E5DB     		blt	.L167
1810:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1811:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1812:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1813:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1814:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1815:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 2895              		.loc 1 1815 0 is_stmt 1
 2896 1002 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2897 1004 FB69     		ldr	r3, [r7, #28]
 2898 1006 1344     		add	r3, r3, r2
 2899 1008 9B00     		lsls	r3, r3, #2
 2900 100a 1A46     		mov	r2, r3
 2901 100c BB69     		ldr	r3, [r7, #24]
 2902 100e 1344     		add	r3, r3, r2
 2903 1010 BB61     		str	r3, [r7, #24]
1816:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1817:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1818:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Write curve parameter 'a'.
1819:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1820:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2904              		.loc 1 1820 0
 2905 1012 0023     		movs	r3, #0
 2906 1014 FB61     		str	r3, [r7, #28]
 2907 1016 13E0     		b	.L168
 2908              	.L169:
1821:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1822:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32A[i];
 2909              		.loc 1 1822 0 discriminator 3
 2910 1018 7B68     		ldr	r3, [r7, #4]
 2911 101a 1A69     		ldr	r2, [r3, #16]
 2912 101c FB69     		ldr	r3, [r7, #28]
 2913 101e 9B00     		lsls	r3, r3, #2
 2914 1020 1A44     		add	r2, r2, r3
 2915 1022 FB69     		ldr	r3, [r7, #28]
 2916 1024 9B00     		lsls	r3, r3, #2
 2917 1026 1946     		mov	r1, r3
 2918 1028 BB69     		ldr	r3, [r7, #24]
 2919 102a 0B44     		add	r3, r3, r1
 2920 102c 03F18843 		add	r3, r3, #1140850688
 2921 1030 03F5C043 		add	r3, r3, #24576
 2922 1034 1946     		mov	r1, r3
 2923 1036 1368     		ldr	r3, [r2]
 2924 1038 0B60     		str	r3, [r1]
1820:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2925              		.loc 1 1820 0 discriminator 3
 2926 103a FB69     		ldr	r3, [r7, #28]
 2927 103c 0133     		adds	r3, r3, #1
 2928 103e FB61     		str	r3, [r7, #28]
 2929              	.L168:
1820:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2930              		.loc 1 1820 0 is_stmt 0 discriminator 1
 2931 1040 7B68     		ldr	r3, [r7, #4]
 2932 1042 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2933 1044 1A46     		mov	r2, r3
 2934 1046 FB69     		ldr	r3, [r7, #28]
 2935 1048 9342     		cmp	r3, r2
 2936 104a E5DB     		blt	.L169
1823:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1824:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1825:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1826:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1827:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1828:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 2937              		.loc 1 1828 0 is_stmt 1
 2938 104c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2939 104e FB69     		ldr	r3, [r7, #28]
 2940 1050 1344     		add	r3, r3, r2
 2941 1052 9B00     		lsls	r3, r3, #2
 2942 1054 1A46     		mov	r2, r3
 2943 1056 BB69     		ldr	r3, [r7, #24]
 2944 1058 1344     		add	r3, r3, r2
 2945 105a BB61     		str	r3, [r7, #24]
1829:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1830:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1831:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Update the C ptr with the offset address of the PKA RAM location
1832:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // where the ecPt2 will be stored.
1833:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1834:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_CPTR) = offset >> 2;
 2946              		.loc 1 1834 0
 2947 105c 364A     		ldr	r2, .L174+12
 2948 105e BB69     		ldr	r3, [r7, #24]
 2949 1060 9B08     		lsrs	r3, r3, #2
 2950 1062 1360     		str	r3, [r2]
1835:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1836:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1837:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the x co-ordinate value of the second EC point in PKA RAM.
1838:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1839:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2951              		.loc 1 1839 0
 2952 1064 0023     		movs	r3, #0
 2953 1066 FB61     		str	r3, [r7, #28]
 2954 1068 13E0     		b	.L170
 2955              	.L171:
1840:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1841:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt2->pui32X[i];
 2956              		.loc 1 1841 0 discriminator 3
 2957 106a BB68     		ldr	r3, [r7, #8]
 2958 106c 1A68     		ldr	r2, [r3]
 2959 106e FB69     		ldr	r3, [r7, #28]
 2960 1070 9B00     		lsls	r3, r3, #2
 2961 1072 1A44     		add	r2, r2, r3
 2962 1074 FB69     		ldr	r3, [r7, #28]
 2963 1076 9B00     		lsls	r3, r3, #2
 2964 1078 1946     		mov	r1, r3
 2965 107a BB69     		ldr	r3, [r7, #24]
 2966 107c 0B44     		add	r3, r3, r1
 2967 107e 03F18843 		add	r3, r3, #1140850688
 2968 1082 03F5C043 		add	r3, r3, #24576
 2969 1086 1946     		mov	r1, r3
 2970 1088 1368     		ldr	r3, [r2]
 2971 108a 0B60     		str	r3, [r1]
1839:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2972              		.loc 1 1839 0 discriminator 3
 2973 108c FB69     		ldr	r3, [r7, #28]
 2974 108e 0133     		adds	r3, r3, #1
 2975 1090 FB61     		str	r3, [r7, #28]
 2976              	.L170:
1839:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 2977              		.loc 1 1839 0 is_stmt 0 discriminator 1
 2978 1092 7B68     		ldr	r3, [r7, #4]
 2979 1094 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2980 1096 1A46     		mov	r2, r3
 2981 1098 FB69     		ldr	r3, [r7, #28]
 2982 109a 9342     		cmp	r3, r2
 2983 109c E5DB     		blt	.L171
1842:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1843:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1844:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1845:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1846:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1847:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 2984              		.loc 1 1847 0 is_stmt 1
 2985 109e FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2986 10a0 FB69     		ldr	r3, [r7, #28]
 2987 10a2 1344     		add	r3, r3, r2
 2988 10a4 9B00     		lsls	r3, r3, #2
 2989 10a6 1A46     		mov	r2, r3
 2990 10a8 BB69     		ldr	r3, [r7, #24]
 2991 10aa 1344     		add	r3, r3, r2
 2992 10ac BB61     		str	r3, [r7, #24]
1848:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1849:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1850:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load the y co-ordinate value of the second EC point in PKA RAM.
1851:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1852:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2993              		.loc 1 1852 0
 2994 10ae 0023     		movs	r3, #0
 2995 10b0 FB61     		str	r3, [r7, #28]
 2996 10b2 13E0     		b	.L172
 2997              	.L173:
1853:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1854:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt2->pui32Y[i];
 2998              		.loc 1 1854 0 discriminator 3
 2999 10b4 BB68     		ldr	r3, [r7, #8]
 3000 10b6 5A68     		ldr	r2, [r3, #4]
 3001 10b8 FB69     		ldr	r3, [r7, #28]
 3002 10ba 9B00     		lsls	r3, r3, #2
 3003 10bc 1A44     		add	r2, r2, r3
 3004 10be FB69     		ldr	r3, [r7, #28]
 3005 10c0 9B00     		lsls	r3, r3, #2
 3006 10c2 1946     		mov	r1, r3
 3007 10c4 BB69     		ldr	r3, [r7, #24]
 3008 10c6 0B44     		add	r3, r3, r1
 3009 10c8 03F18843 		add	r3, r3, #1140850688
 3010 10cc 03F5C043 		add	r3, r3, #24576
 3011 10d0 1946     		mov	r1, r3
 3012 10d2 1368     		ldr	r3, [r2]
 3013 10d4 0B60     		str	r3, [r1]
1852:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 3014              		.loc 1 1852 0 discriminator 3
 3015 10d6 FB69     		ldr	r3, [r7, #28]
 3016 10d8 0133     		adds	r3, r3, #1
 3017 10da FB61     		str	r3, [r7, #28]
 3018              	.L172:
1852:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
 3019              		.loc 1 1852 0 is_stmt 0 discriminator 1
 3020 10dc 7B68     		ldr	r3, [r7, #4]
 3021 10de 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3022 10e0 1A46     		mov	r2, r3
 3023 10e2 FB69     		ldr	r3, [r7, #28]
 3024 10e4 9342     		cmp	r3, r2
 3025 10e6 E5DB     		blt	.L173
1855:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1856:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1857:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1858:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1859:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1860:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     offset += 4 * (i + extraBuf);
 3026              		.loc 1 1860 0 is_stmt 1
 3027 10e8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 3028 10ea FB69     		ldr	r3, [r7, #28]
 3029 10ec 1344     		add	r3, r3, r2
 3030 10ee 9B00     		lsls	r3, r3, #2
 3031 10f0 1A46     		mov	r2, r3
 3032 10f2 BB69     		ldr	r3, [r7, #24]
 3033 10f4 1344     		add	r3, r3, r2
 3034 10f6 BB61     		str	r3, [r7, #24]
1861:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1862:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1863:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Copy the result vector location.
1864:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1865:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 3035              		.loc 1 1865 0
 3036 10f8 BB69     		ldr	r3, [r7, #24]
 3037 10fa 03F18843 		add	r3, r3, #1140850688
 3038 10fe 03F5C043 		add	r3, r3, #24576
 3039 1102 3A68     		ldr	r2, [r7]
 3040 1104 1360     		str	r3, [r2]
1866:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1867:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1868:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load D ptr with the result location in PKA RAM.
1869:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1870:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_DPTR) = offset >> 2;
 3041              		.loc 1 1870 0
 3042 1106 0D4A     		ldr	r2, .L174+16
 3043 1108 BB69     		ldr	r3, [r7, #24]
 3044 110a 9B08     		lsrs	r3, r3, #2
 3045 110c 1360     		str	r3, [r2]
1871:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1872:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1873:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Load length registers.
1874:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1875:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG(PKA_BLENGTH) = ptCurve->ui8Size;
 3046              		.loc 1 1875 0
 3047 110e 7B68     		ldr	r3, [r7, #4]
 3048 1110 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 3049 1112 0B4B     		ldr	r3, .L174+20
 3050 1114 1A60     		str	r2, [r3]
1876:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1877:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1878:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Set the PKA Function to ECC-ADD and start the operation.
1879:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1880:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     HWREG( (PKA_FUNCTION) ) = 0x0000B000;
 3051              		.loc 1 1880 0
 3052 1116 054B     		ldr	r3, .L174
 3053 1118 4FF43042 		mov	r2, #45056
 3054 111c 1A60     		str	r2, [r3]
1881:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1882:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     return (PKA_STATUS_SUCCESS);
 3055              		.loc 1 1882 0
 3056 111e 0023     		movs	r3, #0
 3057              	.L161:
1883:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 3058              		.loc 1 1883 0
 3059 1120 1846     		mov	r0, r3
 3060 1122 2437     		adds	r7, r7, #36
 3061              		.cfi_def_cfa_offset 4
 3062 1124 BD46     		mov	sp, r7
 3063              		.cfi_def_cfa_register 13
 3064              		@ sp needed
 3065 1126 80BC     		pop	{r7}
 3066              		.cfi_restore 7
 3067              		.cfi_def_cfa_offset 0
 3068 1128 7047     		bx	lr
 3069              	.L175:
 3070 112a 00BF     		.align	2
 3071              	.L174:
 3072 112c 1C400044 		.word	1140867100
 3073 1130 00400044 		.word	1140867072
 3074 1134 04400044 		.word	1140867076
 3075 1138 08400044 		.word	1140867080
 3076 113c 0C400044 		.word	1140867084
 3077 1140 14400044 		.word	1140867092
 3078              		.cfi_endproc
 3079              	.LFE20:
 3081              		.align	1
 3082              		.global	PKAECCAddGetResult
 3083              		.syntax unified
 3084              		.thumb
 3085              		.thumb_func
 3086              		.fpu softvfp
 3088              	PKAECCAddGetResult:
 3089              	.LFB21:
1884:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1885:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
1886:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
1887:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! Gets the result of the ECC Addition
1888:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1889:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ptOutEcPt is the pointer to the structure where the resultant
1890:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!        point will be stored. The callee is responsible to allocate memory,
1891:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!        for the ec point structure including the memory for x and y
1892:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!        co-ordinate values.
1893:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1894:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!        was provided by the function \sa PKAECCAddStart().
1895:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1896:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! This function gets the result of ecc point addition operation on the
1897:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! on the two given ec points, previously started using the function \sa
1898:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! PKAECCAddStart().
1899:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //!
1900:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! \return Returns:
1901:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1902:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1903:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! the operation.
1904:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1905:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1906:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //
1907:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** //*****************************************************************************
1908:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** tPKAStatus
1909:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** PKAECCAddGetResult(tECPt* ptOutEcPt, uint32_t ui32ResVectorLoc)
1910:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** {
 3090              		.loc 1 1910 0
 3091              		.cfi_startproc
 3092              		@ args = 0, pretend = 0, frame = 24
 3093              		@ frame_needed = 1, uses_anonymous_args = 0
 3094              		@ link register save eliminated.
 3095 1144 80B4     		push	{r7}
 3096              		.cfi_def_cfa_offset 4
 3097              		.cfi_offset 7, -4
 3098 1146 87B0     		sub	sp, sp, #28
 3099              		.cfi_def_cfa_offset 32
 3100 1148 00AF     		add	r7, sp, #0
 3101              		.cfi_def_cfa_register 7
 3102 114a 7860     		str	r0, [r7, #4]
 3103 114c 3960     		str	r1, [r7]
1911:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t regMSWVal;
1912:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t addr;
1913:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     int i;
1914:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     uint32_t len;
1915:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1916:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1917:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     // Check for the arguments.
1918:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     //
1919:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptOutEcPt);
1920:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32X);
1921:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32Y);
1922:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1923:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1924:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1925:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 3104              		.loc 1 1925 0
 3105 114e 324B     		ldr	r3, .L185
 3106 1150 1B68     		ldr	r3, [r3]
 3107 1152 03F40043 		and	r3, r3, #32768
 3108 1156 002B     		cmp	r3, #0
 3109 1158 01D0     		beq	.L177
1926:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1927:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 3110              		.loc 1 1927 0
 3111 115a 0723     		movs	r3, #7
 3112 115c 56E0     		b	.L178
 3113              	.L177:
1928:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1929:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1930:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     if(HWREG(PKA_SHIFT) == 0x00000000)
 3114              		.loc 1 1930 0
 3115 115e 2F4B     		ldr	r3, .L185+4
 3116 1160 1B68     		ldr	r3, [r3]
 3117 1162 002B     		cmp	r3, #0
 3118 1164 51D1     		bne	.L179
1931:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1932:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1933:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // Get the MSW register value.
1934:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1935:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         regMSWVal = HWREG(PKA_MSW);
 3119              		.loc 1 1935 0
 3120 1166 2E4B     		ldr	r3, .L185+8
 3121 1168 1B68     		ldr	r3, [r3]
 3122 116a 3B61     		str	r3, [r7, #16]
1936:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1937:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1938:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // Check to make sure that the result vector is not all zeroes.
1939:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1940:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 3123              		.loc 1 1940 0
 3124 116c 3B69     		ldr	r3, [r7, #16]
 3125 116e 03F40043 		and	r3, r3, #32768
 3126 1172 002B     		cmp	r3, #0
 3127 1174 01D0     		beq	.L180
1941:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
1942:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             return (PKA_STATUS_RESULT_0);
 3128              		.loc 1 1942 0
 3129 1176 0423     		movs	r3, #4
 3130 1178 48E0     		b	.L178
 3131              	.L180:
1943:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         }
1944:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1945:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1946:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // Get the length of the result.
1947:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1948:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 3132              		.loc 1 1948 0
 3133 117a 3B69     		ldr	r3, [r7, #16]
 3134 117c C3F30A02 		ubfx	r2, r3, #0, #11
1949:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 3135              		.loc 1 1949 0
 3136 1180 3B68     		ldr	r3, [r7]
 3137 1182 03F13C43 		add	r3, r3, #-1140850688
 3138 1186 A3F5C043 		sub	r3, r3, #24576
 3139 118a 9B08     		lsrs	r3, r3, #2
1948:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 3140              		.loc 1 1948 0
 3141 118c D31A     		subs	r3, r2, r3
 3142 118e 0133     		adds	r3, r3, #1
 3143 1190 FB60     		str	r3, [r7, #12]
1950:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1951:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         addr = ui32ResVectorLoc;
 3144              		.loc 1 1951 0
 3145 1192 3B68     		ldr	r3, [r7]
 3146 1194 BB60     		str	r3, [r7, #8]
1952:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1953:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1954:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // Copy the x co-ordinate value of result from vector D into the
1955:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // the output EC Point.
1956:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1957:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         for(i = 0; i < len; i++)
 3147              		.loc 1 1957 0
 3148 1196 0023     		movs	r3, #0
 3149 1198 7B61     		str	r3, [r7, #20]
 3150 119a 0FE0     		b	.L181
 3151              	.L182:
1958:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
1959:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             ptOutEcPt->pui32X[i] = HWREG((addr + 4*i));
 3152              		.loc 1 1959 0 discriminator 3
 3153 119c 7B69     		ldr	r3, [r7, #20]
 3154 119e 9B00     		lsls	r3, r3, #2
 3155 11a0 1A46     		mov	r2, r3
 3156 11a2 BB68     		ldr	r3, [r7, #8]
 3157 11a4 1344     		add	r3, r3, r2
 3158 11a6 1946     		mov	r1, r3
 3159 11a8 7B68     		ldr	r3, [r7, #4]
 3160 11aa 1A68     		ldr	r2, [r3]
 3161 11ac 7B69     		ldr	r3, [r7, #20]
 3162 11ae 9B00     		lsls	r3, r3, #2
 3163 11b0 1344     		add	r3, r3, r2
 3164 11b2 0A68     		ldr	r2, [r1]
 3165 11b4 1A60     		str	r2, [r3]
1957:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
 3166              		.loc 1 1957 0 discriminator 3
 3167 11b6 7B69     		ldr	r3, [r7, #20]
 3168 11b8 0133     		adds	r3, r3, #1
 3169 11ba 7B61     		str	r3, [r7, #20]
 3170              	.L181:
1957:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
 3171              		.loc 1 1957 0 is_stmt 0 discriminator 1
 3172 11bc 7B69     		ldr	r3, [r7, #20]
 3173 11be FA68     		ldr	r2, [r7, #12]
 3174 11c0 9A42     		cmp	r2, r3
 3175 11c2 EBD8     		bhi	.L182
1960:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         }
1961:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1962:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         addr += 4 * (i + 2 + len % 2);
 3176              		.loc 1 1962 0 is_stmt 1
 3177 11c4 FB68     		ldr	r3, [r7, #12]
 3178 11c6 03F00102 		and	r2, r3, #1
 3179 11ca 7B69     		ldr	r3, [r7, #20]
 3180 11cc 1344     		add	r3, r3, r2
 3181 11ce 0233     		adds	r3, r3, #2
 3182 11d0 9B00     		lsls	r3, r3, #2
 3183 11d2 BA68     		ldr	r2, [r7, #8]
 3184 11d4 1344     		add	r3, r3, r2
 3185 11d6 BB60     		str	r3, [r7, #8]
1963:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1964:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1965:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // Copy the y co-ordinate value of result from vector D into the
1966:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         // the output EC Point.
1967:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         //
1968:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         for(i = 0; i < len; i++)
 3186              		.loc 1 1968 0
 3187 11d8 0023     		movs	r3, #0
 3188 11da 7B61     		str	r3, [r7, #20]
 3189 11dc 0FE0     		b	.L183
 3190              	.L184:
1969:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
1970:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****             ptOutEcPt->pui32Y[i] = HWREG((addr + 4*i));
 3191              		.loc 1 1970 0 discriminator 3
 3192 11de 7B69     		ldr	r3, [r7, #20]
 3193 11e0 9B00     		lsls	r3, r3, #2
 3194 11e2 1A46     		mov	r2, r3
 3195 11e4 BB68     		ldr	r3, [r7, #8]
 3196 11e6 1344     		add	r3, r3, r2
 3197 11e8 1946     		mov	r1, r3
 3198 11ea 7B68     		ldr	r3, [r7, #4]
 3199 11ec 5A68     		ldr	r2, [r3, #4]
 3200 11ee 7B69     		ldr	r3, [r7, #20]
 3201 11f0 9B00     		lsls	r3, r3, #2
 3202 11f2 1344     		add	r3, r3, r2
 3203 11f4 0A68     		ldr	r2, [r1]
 3204 11f6 1A60     		str	r2, [r3]
1968:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
 3205              		.loc 1 1968 0 discriminator 3
 3206 11f8 7B69     		ldr	r3, [r7, #20]
 3207 11fa 0133     		adds	r3, r3, #1
 3208 11fc 7B61     		str	r3, [r7, #20]
 3209              	.L183:
1968:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         {
 3210              		.loc 1 1968 0 is_stmt 0 discriminator 1
 3211 11fe 7B69     		ldr	r3, [r7, #20]
 3212 1200 FA68     		ldr	r2, [r7, #12]
 3213 1202 9A42     		cmp	r2, r3
 3214 1204 EBD8     		bhi	.L184
1971:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         }
1972:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** 
1973:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_SUCCESS);
 3215              		.loc 1 1973 0 is_stmt 1
 3216 1206 0023     		movs	r3, #0
 3217 1208 00E0     		b	.L178
 3218              	.L179:
1974:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1975:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     else
1976:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     {
1977:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****         return (PKA_STATUS_FAILURE);
 3219              		.loc 1 1977 0
 3220 120a 0123     		movs	r3, #1
 3221              	.L178:
1978:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c ****     }
1979:build\openmote-cc2538_armgcc\bsp\boards\openmote-cc2538\source/pka.c **** }
 3222              		.loc 1 1979 0
 3223 120c 1846     		mov	r0, r3
 3224 120e 1C37     		adds	r7, r7, #28
 3225              		.cfi_def_cfa_offset 4
 3226 1210 BD46     		mov	sp, r7
 3227              		.cfi_def_cfa_register 13
 3228              		@ sp needed
 3229 1212 80BC     		pop	{r7}
 3230              		.cfi_restore 7
 3231              		.cfi_def_cfa_offset 0
 3232 1214 7047     		bx	lr
 3233              	.L186:
 3234 1216 00BF     		.align	2
 3235              	.L185:
 3236 1218 1C400044 		.word	1140867100
 3237 121c 18400044 		.word	1140867096
 3238 1220 24400044 		.word	1140867108
 3239              		.cfi_endproc
 3240              	.LFE21:
 3242              	.Letext0:
 3243              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 3244              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 3245              		.file 4 "build\\openmote-cc2538_armgcc\\bsp\\boards\\openmote-cc2538\\source\\ecc_curveinfo.h"
 3246              		.file 5 "build\\openmote-cc2538_armgcc\\bsp\\boards\\openmote-cc2538\\source\\pka.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pka.c
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:15     .text:00000000 $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:22     .text:00000000 PKAEnableInt
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:51     .text:0000000e PKADisableInt
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:79     .text:0000001c PKAClearInt
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:107    .text:0000002a PKARegInt
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:144    .text:00000042 PKAUnRegInt
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:172    .text:00000050 PKAGetOpsStatus
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:209    .text:00000070 $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:213    .text:00000074 $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:220    .text:00000074 PKABigNumModStart
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:389    .text:0000017c $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:398    .text:00000194 $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:405    .text:00000194 PKABigNumModGetResult
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:512    .text:00000224 $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:517    .text:0000022c $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:524    .text:0000022c PKABigNumCmpStart
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:660    .text:000002f4 $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:667    .text:00000304 $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:674    .text:00000304 PKABigNumCmpGetResult
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:751    .text:00000354 $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:756    .text:0000035c $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:763    .text:0000035c PKABigNumInvModStart
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:927    .text:0000045c $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:936    .text:00000474 $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:943    .text:00000474 PKABigNumInvModGetResult
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1050   .text:00000504 $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1055   .text:0000050c $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1062   .text:0000050c PKABigNumMultiplyStart
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1228   .text:0000060c $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1237   .text:00000624 $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1244   .text:00000624 PKABigNumMultGetResult
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1356   .text:000006bc $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1361   .text:000006c4 $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1368   .text:000006c4 PKABigNumAddStart
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1532   .text:000007c4 $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1541   .text:000007dc $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1548   .text:000007dc PKABigNumAddGetResult
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1660   .text:00000874 $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1665   .text:0000087c $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:1672   .text:0000087c PKAECCMultiplyStart
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:2022   .text:00000abc $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:2032   .text:00000ad8 $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:2039   .text:00000ad8 PKAECCMultiplyGetResult
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:2187   .text:00000bac $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:2193   .text:00000bb8 $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:2200   .text:00000bb8 PKAECCMultGenPtStart
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:2549   .text:00000df8 $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:2559   .text:00000e14 $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:2566   .text:00000e14 PKAECCMultGenPtGetResult
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:2714   .text:00000ee8 $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:2720   .text:00000ef4 $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:2727   .text:00000ef4 PKAECCAddStart
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:3072   .text:0000112c $d
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:3081   .text:00001144 $t
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:3088   .text:00001144 PKAECCAddGetResult
C:\Users\Lee\AppData\Local\Temp\cct0Vn8f.s:3236   .text:00001218 $d
                           .group:00000000 wm4.0.93d65e4ff05d5af51629690e5b534e57
                           .group:00000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:00000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:00000000 wm4.hw_pka.h.39.21ddda4008595aed4ecf0317dc241440
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:00000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:00000000 wm4.pka.h.64.e6658a746a1332f9f0f055d6d08ac005
                           .group:00000000 wm4.sys_ctrl.h.41.c6bbd4dace326d685c1afa45bc1ba1e2
                           .group:00000000 wm4.debug.h.41.b891e613993738d067c45a5ff528d11a

UNDEFINED SYMBOLS
IntEnable
IntDisable
IntPendClear
IntRegister
IntUnregister
